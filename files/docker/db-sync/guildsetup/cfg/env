## VARIABLES ##
CURL_TIMEOUT=60
PGDATABASE=cexplorer
BRANCH=alpha
URL_RAW="https://raw.githubusercontent.com/cardano-community/guild-operators/${BRANCH}"
DB_SCRIPTS_URL="${URL_RAW}/scripts/grest-helper-scripts/db-scripts"


## FUNCTIONS ##


# Description : Check and apply delta updates using different combinations to retain custom config
#             : $1 = name of script to update
#             : $2 = [Y|N] ignore question and auto update
#             : $3 = [Y|N] do a complete file comparision
#             : $4 = [Y|N] wait to acknowledge update
#             : $5 = optional alternative scripts folder instead of default 'cnode-helper-scripts'
# return code : 0 = no update
#             : 1 = update applied
#             : 2 = update failed
checkUpdate() {
  [[ "${UPDATE_CHECK}" != "Y" ]] && return 0

  if [[ ${OFFLINE_MODE} = N && ${BRANCH} != master && ${BRANCH} != alpha ]]; then
    if ! curl -s -f -m ${CURL_TIMEOUT} "https://api.github.com/repos/cardano-community/guild-operators/branches" | jq -e ".[] | select(.name == \"${BRANCH}\")" &>/dev/null ; then
      echo -e "WARN!! The folder was configured against ${BRANCH} branch - which does not exist anymore, falling back to alpha branch"
      # alpha because if someone was testing something against a custom branch, it would likely be merged to alpha first. Production systems should not be using custom branch anyways
      BRANCH=alpha
      echo "${BRANCH}" > "${CNODE_HOME}"/scripts/.env_branch
    fi
  fi
  [[ -n $5 ]] && URL="${URL_RAW}/scripts/$5" || URL="${URL_RAW}/scripts/cnode-helper-scripts"
  URL_DOCS="${URL_RAW}/docs/Scripts"
  if curl -s -f -m ${CURL_TIMEOUT} -o "${PARENT}/${1}".tmp "${URL}/${1}" 2>/dev/null; then

    # get vname from env file
    vname=${CNODE_NAME//_HOME}
    vname_uc=$(tr '[:lower:]' '[:upper:]' <<< ${vname})
    if [[ -n ${vname} ]]; then
      # replace default CNODE with custom name if needed
      [[ ${vname} != cnode ]] && sed -e "s@/opt/cardano/[c]node@/opt/cardano/${vname}@g" -e "s@[C]NODE_HOME@${vname_uc}_HOME@g" -i "${PARENT}/${1}".tmp
    else
      printf "${FG_RED}ERROR${NC}: '${1}' update failed! Please use prereqs.sh to force an update or manually download the file from GitHub"
      [[ $4 != N ]] && waitToProceed
      return 2
    fi

    # make sure script exist, else just rename
    [[ ! -f "${PARENT}/${1}" ]] && mv -f "${PARENT}/${1}".tmp "${PARENT}/${1}" && chmod +x "${PARENT}/${1}" && return 0

    OLD_STATIC=$(awk '/#!/{x=1}/^# Do NOT modify/{exit} x' "${PARENT}/${1}")
    OLD_TEMPL=$(awk '/^# Do NOT modify/,0' "${PARENT}/${1}")
    GIT_STATIC=$(awk '/#!/{x=1}/^# Do NOT modify/{exit} x' "${PARENT}/${1}".tmp)
    GIT_TEMPL=$(awk '/^# Do NOT modify/,0' "${PARENT}/${1}".tmp)
    NEW_STATIC=$(checkUserVariables "${OLD_STATIC}" "${GIT_STATIC}")
    if [[ ($3 = Y && "$(sha256sum "${PARENT}/${1}" | cut -d' ' -f1)" != "$(sha256sum "${PARENT}/${1}.tmp" | cut -d' ' -f1)") || "$(echo ${OLD_STATIC} | sha256sum)" != "$(echo ${NEW_STATIC} | sha256sum)" || "$(echo ${OLD_TEMPL} | sha256sum)" != "$(echo ${GIT_TEMPL} | sha256sum)" ]]; then
      update_msg="\nScript update(s) detected, do you want to download the latest version?"
      if [[ $1 = cntools.library || $1 = gLiveView.sh ]]; then
        if [[ $1 = cntools.library ]]; then
          CUR_MAJOR_VERSION=$(grep -r ^CNTOOLS_MAJOR_VERSION= "${PARENT}/${1}" |sed -e "s#.*=##")
          CUR_MINOR_VERSION=$(grep -r ^CNTOOLS_MINOR_VERSION= "${PARENT}/${1}" |sed -e "s#.*=##")
          CUR_PATCH_VERSION=$(grep -r ^CNTOOLS_PATCH_VERSION= "${PARENT}/${1}" |sed -e "s#.*=##")
          CUR_VERSION="${CUR_MAJOR_VERSION}.${CUR_MINOR_VERSION}.${CUR_PATCH_VERSION}"
          GIT_MAJOR_VERSION=$(grep -r ^CNTOOLS_MAJOR_VERSION= "${PARENT}/${1}".tmp |sed -e "s#.*=##")
          GIT_MINOR_VERSION=$(grep -r ^CNTOOLS_MINOR_VERSION= "${PARENT}/${1}".tmp |sed -e "s#.*=##")
          GIT_PATCH_VERSION=$(grep -r ^CNTOOLS_PATCH_VERSION= "${PARENT}/${1}".tmp |sed -e "s#.*=##")
          GIT_VERSION="${GIT_MAJOR_VERSION}.${GIT_MINOR_VERSION}.${GIT_PATCH_VERSION}"
        else
          CUR_VERSION=$(grep -r ^GLV_VERSION= "${PARENT}/${1}" | cut -d'=' -f2)
          GIT_VERSION=$(grep -r ^GLV_VERSION= "${PARENT}/${1}".tmp | cut -d'=' -f2)
        fi
        if ! versionCheck ${GIT_VERSION} ${CUR_VERSION}; then
          [[ $1 = cntools.library ]] && script_name="CNTools" || script_name="Guild LiveView"
          update_msg="\nA new version of ${script_name} is available."
          update_msg="${update_msg}\nInstalled Version : ${FG_LGRAY}${CUR_VERSION}${NC}"
          update_msg="${update_msg}\nAvailable Version : ${FG_GREEN}${GIT_VERSION}${NC}"
          echo -e "${update_msg}"
          update_msg="\nDo you want to download the latest version?"
        fi
      fi
      if [[ $2 = Y ]] || { [[ -t 1 ]] && getAnswer "${update_msg}"; }; then
        if [[ $3 != Y ]] && grep -q "# Do NOT modify" "${PARENT}/${1}"; then
          printf '%s\n%s\n' "${NEW_STATIC}" "${GIT_TEMPL}" > "${PARENT}/${1}".tmp
        fi
        cp "${PARENT}/${1}" "${PARENT}/${1}_bkp$(date +%s)"
        mv "${PARENT}/${1}".tmp "${PARENT}/${1}"
        [[ ! "${1}" == "env" ]] && chmod +x "${PARENT}/${1}"
        echo -e "\n${FG_YELLOW}${1}${NC} update successfully applied!"
        [[ -t 1 && $4 != N ]] && waitToProceed && clear
        return 1
      fi
    fi
  fi
  rm -f "${PARENT}/${1}".tmp
  return 0
}

# Description : Exit with error message
#             : $1 = Error message we'd like to display before exiting (function will pre-fix 'ERROR: ' to the argument)
err_exit() {
  printf "${FG_RED}ERROR${NC}: ${1}\n" >&2
  echo -e "Exiting...\n" >&2
  pushd -0 >/dev/null && dirs -c
  exit 1
}

# Description : Check if provided file exists
#             : $1 = File (with path) to check
is_file() {
  local file=$1
  [[ -f $file ]]
}

# Description : Check if provided directory exists
#             : $1 = Directory (with path) to check
is_dir() {
  local dir=$1
  [[ -d $dir ]]
}