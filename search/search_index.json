{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This documentation site (rather the repository itself) is created by some of the well known and experienced community members and contains instructions/information about various guild tools which simplify various stake-ops (setting up, managing and monitoring pools) for operators. Note that the guides are present to help you simplify your tasks - but as an entity responsible for creating blocks on a financial platform, we expect the pre-requisite skill sets - at professional level - before entering the portal: Learn about working with architecture, setup and essentials (SysOps); Understand how to secure your server (SecOps); Be comfortable with working with cardano-cli , and have worked on testnet for pool operations without use of wrapper scripts - as an education exercise; Read the documentation and disclaimers. The guide and tools only aim to simplify your tasks, it will not try to do everything for you - neither scope best practices. We recommend anyone using these instructions to use offline workflow, and NEVER have their wallet keys and pool keys to be made available to online servers, as supported by the tools. Everyone is welcome to contribute to the repository (via documentation, testing, code, videos, etc). Our aim is to work together and reduce confusion rather than hosting 100 versions of documentation - each marketing their pool in a way. Support \u2693\ufe0e The Telegram announcement & support channel is used to announce new releases and changes to the code base. This is also the place to ask general questions regarding the Guild Operators documentation and scripts. Telegram Announcement & Support channel To report bugs and issues with scripts and documentation please open a GitHub Issue . Feature requests are best opened as a discussion thread . Getting Started \u2693\ufe0e Use the sidebar to navigate through the topics. Note that the instructions assume the folder structure as per here . Again, Feedback/Contribution and ownership of tasks is always welcome . If you're interested in collaborating regularly, make a start - and you should be part of the guild already .","title":"Home"},{"location":"#support","text":"The Telegram announcement & support channel is used to announce new releases and changes to the code base. This is also the place to ask general questions regarding the Guild Operators documentation and scripts. Telegram Announcement & Support channel To report bugs and issues with scripts and documentation please open a GitHub Issue . Feature requests are best opened as a discussion thread .","title":"Support"},{"location":"#getting-started","text":"Use the sidebar to navigate through the topics. Note that the instructions assume the folder structure as per here . Again, Feedback/Contribution and ownership of tasks is always welcome . If you're interested in collaborating regularly, make a start - and you should be part of the guild already .","title":"Getting Started"},{"location":"basics/","text":"Architecture \u2693\ufe0e The architecture for various components are already described at docs.cardano.org by CF/IOHK. We will not reinvent the wheel Pre-Requisites \u2693\ufe0e Reminder !! You're expected to run the commands below from same session, using same working directories as indicated and using a non-root user with sudo access . You are expected to be familiar with this as part of pre-requisite skill sets for stake pool operators. Set up OS packages, folder structure and fetch files from repo \u2693\ufe0e The pre-requisites for Linux systems are automated to be executed as a single script. To download the pre-requisites scripts, execute the below: mkdir \" $HOME /tmp\" ; cd \" $HOME /tmp\" # Install curl # CentOS / RedHat - sudo dnf -y install curl # Ubuntu / Debian - sudo apt -y install curl curl -sS -o prereqs.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/prereqs.sh chmod 755 prereqs.sh Please familiarise with the syntax of prereqs.sh before proceeding. The usage syntax can be checked using ./prereqs.sh -h , sample output below: Usage: prereqs.sh [ -f ] [ -s ] [ -i ] [ -l ] [ -c ] [ -w ] [ -p ] [ -b <branch> ] [ -n <mainnet | testnet | guild | staging> ] [ -t <name> ] [ -m <seconds> ] Install pre-requisites for building cardano-node and using CNTools -f Force overwrite of all files including normally saved user config sections in env, cnode.sh and gLiveView.sh topology.json, config.json and genesis files normally saved will also be overwritten -s Skip installing OS level dependencies ( Default: will check and install any missing OS level prerequisites ) -n Connect to specified network instead of mainnet network ( Default: connect to cardano mainnet network ) eg: -n testnet -t Alternate name for top level folder, non alpha-numeric chars will be replaced with underscore ( Default: cnode ) -m Maximum time in seconds that you allow the file download operation to take before aborting ( Default: 60s ) -l Use system libsodium instead of IOG fork ( Default: use libsodium from IOG fork ) -c Install/Upgrade and build CNCLI with RUST -w Install/Upgrade Vacuumlabs cardano-hw-cli for hardware wallet support -p Install/Upgrade PostgREST binary to query postgres DB as a service -b Use alternate branch of scripts to download - only recommended for testing/development ( Default: master ) -i Interactive mode ( Default: silent mode ) Running without any parameters will run script in silent mode with OS Dependencies, install libsodium fork from IOG, and NOT force overwrite of all files (only static files will be overwritten, which should not contain user modifications): ./prereqs.sh . \" ${ HOME } /.bashrc\" Folder structure \u2693\ufe0e Running the script above will create the folder structure as per below, for your reference. You can replace the top level folder /opt/cardano/cnode by editing the value of CNODE_HOME in ~/.bashrc and $CNODE_HOME/files/env files: /opt/cardano/cnode # Top-Level Folder \u251c\u2500\u2500 ... \u251c\u2500\u2500 files # Config, genesis and topology files \u2502 \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500 genesis.json # Genesis file referenced in config.json \u2502 \u251c\u2500\u2500 byron-genesis.json # Byron Genesis file referenced in config.json (if using combinator network) \u2502 \u251c\u2500\u2500 config.json # Config file used by cardano-node \u2502 \u2514\u2500\u2500 topology.json # Map of chain for cardano-node to boot from \u251c\u2500\u2500 db # DB Store for cardano-node \u251c\u2500\u2500 guild-db # DB Store for guild-specific tools and additions (eg: cncli, cardano-db-sync's schema) \u251c\u2500\u2500 logs # Logs for cardano-node \u251c\u2500\u2500 priv # Folder to store your keys (permission: 600) \u251c\u2500\u2500 scripts # Scripts to start and interact with cardano-node \u2514\u2500\u2500 sockets # Socket files created by cardano-node","title":"Basics"},{"location":"basics/#architecture","text":"The architecture for various components are already described at docs.cardano.org by CF/IOHK. We will not reinvent the wheel","title":"Architecture"},{"location":"basics/#pre-requisites","text":"Reminder !! You're expected to run the commands below from same session, using same working directories as indicated and using a non-root user with sudo access . You are expected to be familiar with this as part of pre-requisite skill sets for stake pool operators.","title":"Pre-Requisites"},{"location":"build/","text":"The documentation here uses instructions from IOHK repositories as a foundation, with additional info which we can contribute to where appropriate. Note that not everyone needs to build each component. You can refer to architecture to understand and qualify which components you want to run. Components \u2693\ufe0e For most Pool Operators, simply building cardano-node should be enough. Use the below to decide whether you need other components: graph TB A(Need to interact with HD Wallets with keys saved locally?) B(Need to explore blockchain locally?) C(Manage pool-ops, asset operation tasks easily?) D(Create Custom Assets?) E(Monitor node using Terminal UI) O(Node) P(PostgREST) Q(DBSync) R(Wallet) S(CNTools) T(Rest) U(GraphQL) V(OfflineMetadataTools) X(gLiveView) O --x E --x X O --x C --x S O --x D D --x S D --x V O --x B B --x P --x Q B --x T --x Q B --x U --x Q O --x A --x R We strongly prefer use of PostgREST over Rest/GraphQL components due to performance, security, simplicity, control and most importantly - consistency benefits. Please refer to official documentations if you're interested in GraphQL or Cardano-Rest components instead. Note The instructions are intentionally limited to stack/cabal to avoid wait times/availability of nix/docker files on a rapidly developing codebase - this also helps us prevent managing multiple versions of instructions.","title":"Overview"},{"location":"build/#components","text":"For most Pool Operators, simply building cardano-node should be enough. Use the below to decide whether you need other components: graph TB A(Need to interact with HD Wallets with keys saved locally?) B(Need to explore blockchain locally?) C(Manage pool-ops, asset operation tasks easily?) D(Create Custom Assets?) E(Monitor node using Terminal UI) O(Node) P(PostgREST) Q(DBSync) R(Wallet) S(CNTools) T(Rest) U(GraphQL) V(OfflineMetadataTools) X(gLiveView) O --x E --x X O --x C --x S O --x D D --x S D --x V O --x B B --x P --x Q B --x T --x Q B --x U --x Q O --x A --x R We strongly prefer use of PostgREST over Rest/GraphQL components due to performance, security, simplicity, control and most importantly - consistency benefits. Please refer to official documentations if you're interested in GraphQL or Cardano-Rest components instead. Note The instructions are intentionally limited to stack/cabal to avoid wait times/availability of nix/docker files on a rapidly developing codebase - this also helps us prevent managing multiple versions of instructions.","title":"Components"},{"location":"contributors/","text":"Everyone is welcome to contribute to the guide, as well as the repository. Below is just a thank you to people who have been contributing consistently: Adam Chris Damjan Homer Markus OCG Ola Ahlman Pal Dorogi Papacarp PegasusPool Psychomb RdLrT RedOracle SmaugPool To start contributing, simply hit the github repository and raise Issue/Pull Request","title":"Contributors"},{"location":"upgrade/","text":"One Time major upgrade for Guild Scripts from 15-Oct-2020 \u2693\ufe0e We would like to start by thanking entire community for the love, adoption and contribution to the repositories. We look forward to more contributions and working together. Preface for Upgrade \u2693\ufe0e Given the increase in usage and adoptability of the scripts, we have seen some repetitive requests as well as learnt that if we are to keep adding features, we need to rewrite the scripts to accommodate: Update components in place Handle Multiple Networks using flags - reducing manual download of file/configs. Retain User customisations, while trying to reduce number of files (topology, custom ports, paths, etc) Re-use code as much as possible, instead of re-writing across scripts Have better workflow for troubleshooting using alternate git branches Standardise the method of accessing information and use EKG as much as possible This was merged nicely with the addition of CNTools Offline transaction signing and online creation/submission process (details here ) We also use this opportunity to make some changes to topologyUpdater script to not require a separate fetch call, and let variables be defined using consistent manner, including custom peers for own relays. @gufmar has modified the backend service, to at least provide a minimal viable topology file (includes IOG peers along with custom ones) in case you're not allowed to fetch yet. Some or all of the above required us to rewrite some artifacts in a way that is more future proof, but is not too much of a hassle to existing users of guild scripts. We have tried to come up with what we think is a good balance, but would like to apologize in advance if this does not seem very convenient to a few. Steps for Ugrading \u2693\ufe0e !> Remember that same as before, you're running these as non root user with sudo access for the session. Download the latest prereqs.sh (tip: do checkout new features with prereqs.sh -h ) to update all the scripts and files from the guild template. Most of the files modified with user content ( env , gLiveView.sh , topologyUpdater.sh , cnode.sh , etc) will be backed up before overwriting. The backed up files will be in the same folder as the original files, and will be named as ${filename}_bkp<timestamp> . More static files (genesis files or some of the scripts themselves) will not be backed up, as they're not expected to be modified. mkdir \" $HOME /tmp\" ; cd \" $HOME /tmp\" curl -sS -o prereqs.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/prereqs.sh chmod 700 prereqs.sh ./prereqs.sh -f Check and add back your customisations. Below is a list of files that you will typically customise against each script. env file is usually the common place for most user variables, while there may be a few scripts which may have variables within themselves: User-Defined customisations Applies to gLiveView.sh cntools.sh topologyUpdater.sh cnode.sh topology.json config.json env Script/File itself Others cntools.config - It is likely that you'd want to visit/update customisations. - Usually users don't need to touch, but it is supported for scenarios when they're applying non-standard customisations. - No customisations required. Typical section that you may want to modify (if defaults don't work for you): ###################################### # User Variables - Change as desired # # Leave as is if unsure # ###################################### #CCLI=\"${HOME}/.cabal/bin/cardano-cli\" # Override automatic detection of path to cardano-cli executable #CNCLI=\"${HOME}/.cargo/bin/cncli\" # Override automatic detection of path to cncli executable (https://github.com/AndrewWestberg/cncli) #CNODE_HOME=\"/opt/cardano/cnode\" # Override default CNODE_HOME path (defaults to /opt/cardano/cnode) CNODE_PORT = 6000 # Set node port #CONFIG=\"${CNODE_HOME}/files/config.json\" # Override automatic detection of node config path #SOCKET=\"${CNODE_HOME}/sockets/node0.socket\" # Override automatic detection of path to socket #EKG_HOST=127.0.0.1 # Set node EKG host #EKG_PORT=12788 # Override automatic detection of node EKG port #EKG_TIMEOUT=3 # Maximum time in seconds that you allow EKG request to take before aborting (node metrics) #CURL_TIMEOUT=10 # Maximum time in seconds that you allow curl file download to take before aborting (GitHub update process) #BLOCKLOG_DIR=\"${CNODE_HOME}/guild-db/blocklog\" # Override default directory used to store block data for core node #BLOCKLOG_TZ=\"UTC\" # TimeZone to use when displaying blocklog - https://en.wikipedia.org/wiki/List_of_tz_database_time_zones ###################################### # Do NOT modify code below # ###################################### !> The way user content is retained during future upgrades is all the user customisations are to be retained above the line stating DO NOT MODIFY , anything after that line will be overwritten with the latest code from github. Advanced Users/Testers only \u2693\ufe0e For folks who would like to try out an unreleased feature by using a specific branch ( alpha for example), you can now do so. While setting up your repository, use prereqs.sh -b alpha -f where alpha is the name of the branch. The -b branch argument is also extended to CNTools, gLiveView and topologyUpdater scripts. Just beware, that using this option may mean you test against a branch that may have breaking changes. Always take extra care when using this option.","title":"Upgrade"},{"location":"upgrade/#one-time-major-upgrade-for-guild-scripts-from-15-oct-2020","text":"We would like to start by thanking entire community for the love, adoption and contribution to the repositories. We look forward to more contributions and working together.","title":"One Time major upgrade for Guild Scripts from 15-Oct-2020"},{"location":"upgrade/#preface-for-upgrade","text":"Given the increase in usage and adoptability of the scripts, we have seen some repetitive requests as well as learnt that if we are to keep adding features, we need to rewrite the scripts to accommodate: Update components in place Handle Multiple Networks using flags - reducing manual download of file/configs. Retain User customisations, while trying to reduce number of files (topology, custom ports, paths, etc) Re-use code as much as possible, instead of re-writing across scripts Have better workflow for troubleshooting using alternate git branches Standardise the method of accessing information and use EKG as much as possible This was merged nicely with the addition of CNTools Offline transaction signing and online creation/submission process (details here ) We also use this opportunity to make some changes to topologyUpdater script to not require a separate fetch call, and let variables be defined using consistent manner, including custom peers for own relays. @gufmar has modified the backend service, to at least provide a minimal viable topology file (includes IOG peers along with custom ones) in case you're not allowed to fetch yet. Some or all of the above required us to rewrite some artifacts in a way that is more future proof, but is not too much of a hassle to existing users of guild scripts. We have tried to come up with what we think is a good balance, but would like to apologize in advance if this does not seem very convenient to a few.","title":"Preface for Upgrade"},{"location":"upgrade/#steps-for-ugrading","text":"!> Remember that same as before, you're running these as non root user with sudo access for the session. Download the latest prereqs.sh (tip: do checkout new features with prereqs.sh -h ) to update all the scripts and files from the guild template. Most of the files modified with user content ( env , gLiveView.sh , topologyUpdater.sh , cnode.sh , etc) will be backed up before overwriting. The backed up files will be in the same folder as the original files, and will be named as ${filename}_bkp<timestamp> . More static files (genesis files or some of the scripts themselves) will not be backed up, as they're not expected to be modified. mkdir \" $HOME /tmp\" ; cd \" $HOME /tmp\" curl -sS -o prereqs.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/prereqs.sh chmod 700 prereqs.sh ./prereqs.sh -f Check and add back your customisations. Below is a list of files that you will typically customise against each script. env file is usually the common place for most user variables, while there may be a few scripts which may have variables within themselves: User-Defined customisations Applies to gLiveView.sh cntools.sh topologyUpdater.sh cnode.sh topology.json config.json env Script/File itself Others cntools.config - It is likely that you'd want to visit/update customisations. - Usually users don't need to touch, but it is supported for scenarios when they're applying non-standard customisations. - No customisations required. Typical section that you may want to modify (if defaults don't work for you): ###################################### # User Variables - Change as desired # # Leave as is if unsure # ###################################### #CCLI=\"${HOME}/.cabal/bin/cardano-cli\" # Override automatic detection of path to cardano-cli executable #CNCLI=\"${HOME}/.cargo/bin/cncli\" # Override automatic detection of path to cncli executable (https://github.com/AndrewWestberg/cncli) #CNODE_HOME=\"/opt/cardano/cnode\" # Override default CNODE_HOME path (defaults to /opt/cardano/cnode) CNODE_PORT = 6000 # Set node port #CONFIG=\"${CNODE_HOME}/files/config.json\" # Override automatic detection of node config path #SOCKET=\"${CNODE_HOME}/sockets/node0.socket\" # Override automatic detection of path to socket #EKG_HOST=127.0.0.1 # Set node EKG host #EKG_PORT=12788 # Override automatic detection of node EKG port #EKG_TIMEOUT=3 # Maximum time in seconds that you allow EKG request to take before aborting (node metrics) #CURL_TIMEOUT=10 # Maximum time in seconds that you allow curl file download to take before aborting (GitHub update process) #BLOCKLOG_DIR=\"${CNODE_HOME}/guild-db/blocklog\" # Override default directory used to store block data for core node #BLOCKLOG_TZ=\"UTC\" # TimeZone to use when displaying blocklog - https://en.wikipedia.org/wiki/List_of_tz_database_time_zones ###################################### # Do NOT modify code below # ###################################### !> The way user content is retained during future upgrades is all the user customisations are to be retained above the line stating DO NOT MODIFY , anything after that line will be overwritten with the latest code from github.","title":"Steps for Ugrading"},{"location":"upgrade/#advanced-userstesters-only","text":"For folks who would like to try out an unreleased feature by using a specific branch ( alpha for example), you can now do so. While setting up your repository, use prereqs.sh -b alpha -f where alpha is the name of the branch. The -b branch argument is also extended to CNTools, gLiveView and topologyUpdater scripts. Just beware, that using this option may mean you test against a branch that may have breaking changes. Always take extra care when using this option.","title":"Advanced Users/Testers only"},{"location":"Appendix/RecoverByronWallet/","text":"Unofficial Instructions for recovering your Byron Era funds on the new Incentivized Shelley Testnet \u2693\ufe0e 1. Grab and install Haskell \u2693\ufe0e curl -sSL https://get.haskellstack.org/ | sh 2. Get the wallet \u2693\ufe0e note: you must build from source as of today as there are changes that just got into master you need git clone https://github.com/input-output-hk/cardano-wallet.git 3. Go into the wallet directory \u2693\ufe0e cd cardano-wallet 4. Build the wallet \u2693\ufe0e stack build --test --no-run-tests If it fails there are a few reasons we have found: - The cardano build instructions reference a few things that may be missing. Check those. - or maybe one of these would help: Libssl: \u2693\ufe0e sudo apt install libssl-dev Sqlite : \u2693\ufe0e sudo apt-get install sqlite3 libsqlite3-dev gmp: \u2693\ufe0e sudo apt-get install libgmp3-dev systemd dev: \u2693\ufe0e sudo apt install libsystemd-dev get coffee... It takes awhile 5. When its done, install executables to your path \u2693\ufe0e stack install 6. Test to make sure cardano-wallet-jormungandr works fine. \u2693\ufe0e Generate your new mnemonics you will need below. Note that this generates 15 words as opposed to your byron era mnemnomics which were only 12 words. cardano-wallet-jormungandr mnemonic generate 7. Launch the wallet as a service. \u2693\ufe0e you can either open another terminal window or use screen or something. anyway, wherever you run this next command you won't be able to use anymore for a terminal until you stop the wallet change --node-port 3001 to wherever you have your jormungandr rest interface running. for me it was 5001.. so change --port 3002 to wherever you want to access the wallet interface at. If you have other things running avoid those ports. for most, 3002 should be free just to future proof these instructions. genesis should be whatever genesis you are on. cardano-wallet-jormungandr serve --node-port 3001 --port 3002 --genesis-block-hash e03547a7effaf05021b40dd762d5c4cf944b991144f1ad507ef792ae54603197 8. Restore your byron wallet: \u2693\ufe0e --->in another window replace foo, foo, foo with all your mnemnomics from the byron wallet you are restoring Also, if you put your wallet on a different port than 3002, fix that too curl -X POST -H \"Content-Type: application/json\" -d '{ \"name\": \"legacy_wallet\", \"mnemonic_sentence\": [\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\"], \"passphrase\": \"areallylongpassword\"}' http://localhost:3002/v2/byron-wallets Thats going to spit out some information about a wallet it creates, you should see the value of your wallet - hopefully its not zero. And you need the wallet ID for the next step 9. Create your shelley wallet: \u2693\ufe0e Remember all those mnemnomics you made above.. put them here instead of all the foo's. curl -X POST -H \"Content-Type: application/json\" -d '{ \"name\": \"pool_wallet\", \"mnemonic_sentence\": [\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\"], \"passphrase\": \"areallylongpasswordagain\"}' http://localhost:3002/v2/wallets Important thing to get is the wallet id from this command 10. Migrate your funds \u2693\ufe0e Now you are ready to migrate your wallet. replace the <old wallet id> and <new wallet id> with the values you got above curl -X POST -H \"Content-Type: application/json\" -d '{\"passphrase\": \"areallylongpassword\"}' http://localhost:3002/v2/byron-wallets/<old wallet id>/migrations/<new wallet id> 11. Congratulations. your funds are now in your new wallet. \u2693\ufe0e From here we recommend you send them to a new address entirely owned and created by jcli or whatever method you have been using for the testnet process. This technically may not be required. But a lot of us did it and we know it works for setting up pools and stuff. send a small amount first just to make sure you are in control of the transaction and don't send your funds to la la land. If you want to send to another address use the command below, but replace the address that you want to send it to, the amount, and your <new wallet id> curl -X POST -H \"Content-Type: application/json\" -d '{\"payments\": [ { \"address\": \"<address to send to>\"\", \"amount\": { \"quantity\": 83333330000000, \"unit\": \"lovelace\" } } ], \"passphrase\": \"areallylongpasswordagain\"}' http://localhost:3002/v2/wallets/<new wallet id>/transactions","title":"Unofficial Instructions for recovering your Byron Era funds on the new Incentivized Shelley Testnet"},{"location":"Appendix/RecoverByronWallet/#unofficial-instructions-for-recovering-your-byron-era-funds-on-the-new-incentivized-shelley-testnet","text":"","title":"Unofficial Instructions for recovering your Byron Era funds on the new Incentivized Shelley Testnet"},{"location":"Appendix/RecoverByronWallet/#1-grab-and-install-haskell","text":"curl -sSL https://get.haskellstack.org/ | sh","title":"1.  Grab and install Haskell"},{"location":"Appendix/RecoverByronWallet/#2-get-the-wallet","text":"note: you must build from source as of today as there are changes that just got into master you need git clone https://github.com/input-output-hk/cardano-wallet.git","title":"2.  Get the wallet"},{"location":"Appendix/RecoverByronWallet/#3-go-into-the-wallet-directory","text":"cd cardano-wallet","title":"3.  Go into the wallet directory"},{"location":"Appendix/RecoverByronWallet/#4-build-the-wallet","text":"stack build --test --no-run-tests If it fails there are a few reasons we have found: - The cardano build instructions reference a few things that may be missing. Check those. - or maybe one of these would help:","title":"4. Build the wallet"},{"location":"Appendix/RecoverByronWallet/#libssl","text":"sudo apt install libssl-dev","title":"Libssl:"},{"location":"Appendix/RecoverByronWallet/#sqlite","text":"sudo apt-get install sqlite3 libsqlite3-dev","title":"Sqlite :"},{"location":"Appendix/RecoverByronWallet/#gmp","text":"sudo apt-get install libgmp3-dev","title":"gmp:"},{"location":"Appendix/RecoverByronWallet/#systemd-dev","text":"sudo apt install libsystemd-dev get coffee... It takes awhile","title":"systemd dev:"},{"location":"Appendix/RecoverByronWallet/#5-when-its-done-install-executables-to-your-path","text":"stack install","title":"5.  When its done, install executables to your path"},{"location":"Appendix/RecoverByronWallet/#6-test-to-make-sure-cardano-wallet-jormungandr-works-fine","text":"Generate your new mnemonics you will need below. Note that this generates 15 words as opposed to your byron era mnemnomics which were only 12 words. cardano-wallet-jormungandr mnemonic generate","title":"6.  Test to make sure cardano-wallet-jormungandr works fine."},{"location":"Appendix/RecoverByronWallet/#7-launch-the-wallet-as-a-service","text":"you can either open another terminal window or use screen or something. anyway, wherever you run this next command you won't be able to use anymore for a terminal until you stop the wallet change --node-port 3001 to wherever you have your jormungandr rest interface running. for me it was 5001.. so change --port 3002 to wherever you want to access the wallet interface at. If you have other things running avoid those ports. for most, 3002 should be free just to future proof these instructions. genesis should be whatever genesis you are on. cardano-wallet-jormungandr serve --node-port 3001 --port 3002 --genesis-block-hash e03547a7effaf05021b40dd762d5c4cf944b991144f1ad507ef792ae54603197","title":"7.  Launch the wallet as a service."},{"location":"Appendix/RecoverByronWallet/#8-restore-your-byron-wallet","text":"--->in another window replace foo, foo, foo with all your mnemnomics from the byron wallet you are restoring Also, if you put your wallet on a different port than 3002, fix that too curl -X POST -H \"Content-Type: application/json\" -d '{ \"name\": \"legacy_wallet\", \"mnemonic_sentence\": [\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\"], \"passphrase\": \"areallylongpassword\"}' http://localhost:3002/v2/byron-wallets Thats going to spit out some information about a wallet it creates, you should see the value of your wallet - hopefully its not zero. And you need the wallet ID for the next step","title":"8.  Restore your byron wallet:"},{"location":"Appendix/RecoverByronWallet/#9-create-your-shelley-wallet","text":"Remember all those mnemnomics you made above.. put them here instead of all the foo's. curl -X POST -H \"Content-Type: application/json\" -d '{ \"name\": \"pool_wallet\", \"mnemonic_sentence\": [\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\"], \"passphrase\": \"areallylongpasswordagain\"}' http://localhost:3002/v2/wallets Important thing to get is the wallet id from this command","title":"9.  Create your shelley wallet:"},{"location":"Appendix/RecoverByronWallet/#10-migrate-your-funds","text":"Now you are ready to migrate your wallet. replace the <old wallet id> and <new wallet id> with the values you got above curl -X POST -H \"Content-Type: application/json\" -d '{\"passphrase\": \"areallylongpassword\"}' http://localhost:3002/v2/byron-wallets/<old wallet id>/migrations/<new wallet id>","title":"10.  Migrate your funds"},{"location":"Appendix/RecoverByronWallet/#11-congratulations-your-funds-are-now-in-your-new-wallet","text":"From here we recommend you send them to a new address entirely owned and created by jcli or whatever method you have been using for the testnet process. This technically may not be required. But a lot of us did it and we know it works for setting up pools and stuff. send a small amount first just to make sure you are in control of the transaction and don't send your funds to la la land. If you want to send to another address use the command below, but replace the address that you want to send it to, the amount, and your <new wallet id> curl -X POST -H \"Content-Type: application/json\" -d '{\"payments\": [ { \"address\": \"<address to send to>\"\", \"amount\": { \"quantity\": 83333330000000, \"unit\": \"lovelace\" } } ], \"passphrase\": \"areallylongpasswordagain\"}' http://localhost:3002/v2/wallets/<new wallet id>/transactions","title":"11.  Congratulations.  your funds are now in your new wallet."},{"location":"Appendix/monitoring/","text":"Ensure the Pre-Requisites are in place before you proceed. This is an easy-to-use script to automate setting up of monitoring tools. Tasks automates the following tasks: - Installs Prometheus, Node Exporter and Grafana Servers for your respective Linux architecture. - Configure Prometheus to connect to cardano node and node exporter jobs. - Provisions the installed prometheus server to be automatically available as data source in Grafana. - Provisions two of the common grafana dashboards used to monitor cardano-node by SkyLight and IOHK to be readily consumed from Grafana. - Deploy prometheus , node_exporter and grafana-server as systemd service on Linux. - Start and enable those services. Note that securing prometheus/grafana servers via TLS encryption and other security best practices are out of scope for this document, and its mainly aimed to help you get started with monitoring without much fuss. !> Ensure that you've opened the firewall port for grafana server (default used in this script is 5000) Download setup_mon.sh \u2693\ufe0e If you have run prereqs.sh , you can skip this step. To download monitoring script, you can execute the commands below: cd $CNODE_HOME /scripts wget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/setup_mon.sh chmod 750 setup_mon.sh Customise any Environment Variables \u2693\ufe0e The default selection may not always be usable for everyone. You can customise further environment variable settings by opening in editor (eg: vi setup_mon.sh ), and updating variables below to your liking: #!/usr/bin/env bash # shellcheck disable=SC2209,SC2164 ###################################################################### #### Environment Variables ###################################################################### CNODE_IP = 127 .0.0.1 CNODE_PORT = 12798 GRAFANA_HOST = 0 .0.0.0 GRAFANA_PORT = 5000 PROJ_PATH = /opt/cardano/monitoring PROM_HOST = 127 .0.0.1 PROM_PORT = 9090 NEXP_PORT = $(( PROM_PORT + 1 )) ```` #### Set up Monitoring Execute setup_mon.sh with full path to destination folder you want to setup monitoring in. If you 're following guild folder structure, you do not need to specify `-d`. Read the usage comments below before you run the actual script. Note that to deploy services as systemd, the script expect sudo access is available to the user running the script. ``` bash cd $CNODE_HOME/scripts # To check Usage parameters: # ./setup_mon.sh -h #Usage: setup_mon.sh [-d directory] [-h hostname] [-p port] #Setup monitoring using Prometheus and Grafana for Cardano Node #-d directory Directory where you' d like to deploy the packages for prometheus , node exporter and grafana #-i IP/hostname IPv4 address or a FQDN/DNS name where your cardano-node (relay) is running (check for hasPrometheus in config.json; eg: 127.0.0.1 if same machine as cardano-node) #-p port Port at which your cardano-node is exporting stats (check for hasPrometheus in config.json; eg: 12798) ./setup_mon.sh # # Downloading prometheus v2.18.1... # Downloading grafana v7.0.0... # Downloading exporter v0.18.1... # Downloading grafana dashboard(s)... # - SKYLight Monitoring Dashboard # - IOHK Monitoring Dashboard # # NOTE: Could not create directory as rdlrt, attempting sudo .. # NOTE: No worries, sudo worked !! Moving on .. # Configuring components # Registering Prometheus as datasource in Grafana.. # Creating service files as root.. # # ===================================================== # Installation is completed # ===================================================== # # - Prometheus (default): http://127.0.0.1:9090/metrics # Node metrics: http://127.0.0.1:12798 # Node exp metrics: http://127.0.0.1:9091 # - Grafana (default): http://0.0.0.0:5000 # # # You need to do the following to configure grafana: # 0. The services should already be started, verify if you can login to grafana, and prometheus. If using 127.0.0.1 as IP, you can check via curl # 1. Login to grafana as admin/admin (http://0.0.0.0:5000) # 2. Add \"prometheus\" (all lowercase) datasource (http://127.0.0.1:9090) # 3. Create a new dashboard by importing dashboards (left plus sign). # - Sometimes, the individual panel's \"prometheus\" datasource needs to be refreshed. # # Enjoy... # # Cleaning up... View Dashboards \u2693\ufe0e You should now be able to Login to grafana dashboard, using the public IP of your server, at port 5000. The initial credentials to login would be admin/admin , and you will be asked to update your password upon first login. Once logged on, you should be able to go to Manage > Dashboards and select the dashboard you'd like to view. Note that if you've just started the server, you might see graphs as empty, as initial interval for dashboards is 12 hours. You can change it to 5 minutes by looking at top right section of the page. Thanks to Pal Dorogi for the original setup instructions used for modifying.","title":"Monitoring"},{"location":"Appendix/monitoring/#download-setup_monsh","text":"If you have run prereqs.sh , you can skip this step. To download monitoring script, you can execute the commands below: cd $CNODE_HOME /scripts wget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/setup_mon.sh chmod 750 setup_mon.sh","title":"Download setup_mon.sh"},{"location":"Appendix/monitoring/#customise-any-environment-variables","text":"The default selection may not always be usable for everyone. You can customise further environment variable settings by opening in editor (eg: vi setup_mon.sh ), and updating variables below to your liking: #!/usr/bin/env bash # shellcheck disable=SC2209,SC2164 ###################################################################### #### Environment Variables ###################################################################### CNODE_IP = 127 .0.0.1 CNODE_PORT = 12798 GRAFANA_HOST = 0 .0.0.0 GRAFANA_PORT = 5000 PROJ_PATH = /opt/cardano/monitoring PROM_HOST = 127 .0.0.1 PROM_PORT = 9090 NEXP_PORT = $(( PROM_PORT + 1 )) ```` #### Set up Monitoring Execute setup_mon.sh with full path to destination folder you want to setup monitoring in. If you 're following guild folder structure, you do not need to specify `-d`. Read the usage comments below before you run the actual script. Note that to deploy services as systemd, the script expect sudo access is available to the user running the script. ``` bash cd $CNODE_HOME/scripts # To check Usage parameters: # ./setup_mon.sh -h #Usage: setup_mon.sh [-d directory] [-h hostname] [-p port] #Setup monitoring using Prometheus and Grafana for Cardano Node #-d directory Directory where you' d like to deploy the packages for prometheus , node exporter and grafana #-i IP/hostname IPv4 address or a FQDN/DNS name where your cardano-node (relay) is running (check for hasPrometheus in config.json; eg: 127.0.0.1 if same machine as cardano-node) #-p port Port at which your cardano-node is exporting stats (check for hasPrometheus in config.json; eg: 12798) ./setup_mon.sh # # Downloading prometheus v2.18.1... # Downloading grafana v7.0.0... # Downloading exporter v0.18.1... # Downloading grafana dashboard(s)... # - SKYLight Monitoring Dashboard # - IOHK Monitoring Dashboard # # NOTE: Could not create directory as rdlrt, attempting sudo .. # NOTE: No worries, sudo worked !! Moving on .. # Configuring components # Registering Prometheus as datasource in Grafana.. # Creating service files as root.. # # ===================================================== # Installation is completed # ===================================================== # # - Prometheus (default): http://127.0.0.1:9090/metrics # Node metrics: http://127.0.0.1:12798 # Node exp metrics: http://127.0.0.1:9091 # - Grafana (default): http://0.0.0.0:5000 # # # You need to do the following to configure grafana: # 0. The services should already be started, verify if you can login to grafana, and prometheus. If using 127.0.0.1 as IP, you can check via curl # 1. Login to grafana as admin/admin (http://0.0.0.0:5000) # 2. Add \"prometheus\" (all lowercase) datasource (http://127.0.0.1:9090) # 3. Create a new dashboard by importing dashboards (left plus sign). # - Sometimes, the individual panel's \"prometheus\" datasource needs to be refreshed. # # Enjoy... # # Cleaning up...","title":"Customise any Environment Variables"},{"location":"Appendix/monitoring/#view-dashboards","text":"You should now be able to Login to grafana dashboard, using the public IP of your server, at port 5000. The initial credentials to login would be admin/admin , and you will be asked to update your password upon first login. Once logged on, you should be able to go to Manage > Dashboards and select the dashboard you'd like to view. Note that if you've just started the server, you might see graphs as empty, as initial interval for dashboards is 12 hours. You can change it to 5 minutes by looking at top right section of the page. Thanks to Pal Dorogi for the original setup instructions used for modifying.","title":"View Dashboards"},{"location":"Appendix/postgres/","text":"These deployment instructions used for reference while building cardano-db-sync tool. These are just for reference and ease of set up and consistency for those who are new to Postgres DB. It is recommended to customise these as per your needs for Production builds. Install PostgreSQL Server \u2693\ufe0e Execute commands below to set up Postgres Server # Determine OS platform OS_ID = $( grep -i ^id_like = /etc/os-release | cut -d = -f 2 ) DISTRO = $( grep -i ^NAME = /etc/os-release | cut -d = -f 2 ) if [ -z \" ${ OS_ID ##*debian* } \" ] ; then #Debian/Ubuntu wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - RELEASE = $( lsb_release -cs ) echo \"deb http://apt.postgresql.org/pub/repos/apt/ ${ RELEASE } \" -pgdg main | sudo tee /etc/apt/sources.list.d/pgdg.list sudo apt-get update sudo apt-get -y install postgresql-11 postgresql-server-dev-11 postgresql-contrib libghc-hdbc-postgresql-dev sudo systemctl restart postgresql sudo systemctl enable postgresql elif [ -z \" ${ OS_ID ##*rhel* } \" ] ; then #CentOS/RHEL/Fedora sudo yum install -y postgresql-server postgresql-server-devel postgresql-contrib postgresql-devel libpq-devel sudo postgresql-setup initdb sudo systemctl start postgresql sudo systemctl enable postgresql else echo \"We have no automated procedures for this ${ DISTRO } system\" fi Create User in Postgres \u2693\ufe0e Login to Postgres instance as superuser: echo $( whoami ) # <user> sudo su postgres psql Note the returned as the output of echo $(whoami) command. Replace all instance of in the documentation below. Execute the below in psql prompt. Replace and PasswordYouWant with your OS user (output of echo $(whoami) command executed above) and a password you'd like to authenticate to Postgres with: CREATE ROLE < user > SUPERUSER LOGIN ; ALTER USER < user > PASSWORD 'PasswordYouWant' ; \\ q Type exit at shell to return to your user from postgres Verify Login to postgres instance \u2693\ufe0e export PGPASSFILE = $CNODE_HOME /priv/.pgpass echo \"/var/run/postgresql:5432:cexplorer:*:*\" > $PGPASSFILE chmod 0600 $PGPASSFILE psql postgres # psql (10.6) # Type \"help\" for help. # # postgres=#","title":"Sample Postgres Setup"},{"location":"Appendix/postgres/#install-postgresql-server","text":"Execute commands below to set up Postgres Server # Determine OS platform OS_ID = $( grep -i ^id_like = /etc/os-release | cut -d = -f 2 ) DISTRO = $( grep -i ^NAME = /etc/os-release | cut -d = -f 2 ) if [ -z \" ${ OS_ID ##*debian* } \" ] ; then #Debian/Ubuntu wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - RELEASE = $( lsb_release -cs ) echo \"deb http://apt.postgresql.org/pub/repos/apt/ ${ RELEASE } \" -pgdg main | sudo tee /etc/apt/sources.list.d/pgdg.list sudo apt-get update sudo apt-get -y install postgresql-11 postgresql-server-dev-11 postgresql-contrib libghc-hdbc-postgresql-dev sudo systemctl restart postgresql sudo systemctl enable postgresql elif [ -z \" ${ OS_ID ##*rhel* } \" ] ; then #CentOS/RHEL/Fedora sudo yum install -y postgresql-server postgresql-server-devel postgresql-contrib postgresql-devel libpq-devel sudo postgresql-setup initdb sudo systemctl start postgresql sudo systemctl enable postgresql else echo \"We have no automated procedures for this ${ DISTRO } system\" fi","title":"Install PostgreSQL Server"},{"location":"Appendix/postgres/#create-user-in-postgres","text":"Login to Postgres instance as superuser: echo $( whoami ) # <user> sudo su postgres psql Note the returned as the output of echo $(whoami) command. Replace all instance of in the documentation below. Execute the below in psql prompt. Replace and PasswordYouWant with your OS user (output of echo $(whoami) command executed above) and a password you'd like to authenticate to Postgres with: CREATE ROLE < user > SUPERUSER LOGIN ; ALTER USER < user > PASSWORD 'PasswordYouWant' ; \\ q Type exit at shell to return to your user from postgres","title":"Create User in Postgres"},{"location":"Appendix/postgres/#verify-login-to-postgres-instance","text":"export PGPASSFILE = $CNODE_HOME /priv/.pgpass echo \"/var/run/postgresql:5432:cexplorer:*:*\" > $PGPASSFILE chmod 0600 $PGPASSFILE psql postgres # psql (10.6) # Type \"help\" for help. # # postgres=#","title":"Verify Login to postgres instance"},{"location":"Build/dbsync/","text":"Important An average pool operator may not require cardano-db-sync at all. Please verify if it is required for your use as mentioned here . Ensure the Pre-Requisites are in place before you proceed. The Cardano DB Sync relies on an existing PostgreSQL server. To keep the focus on building dbsync tool, and not how to setup postgres itself, you can refer to Sample Local PostgreSQL Server Deployment instructions for setting up a Postgres instance. Specifically, we expect the PGPASSFILE environment variable is set as per the instructions in the sample guide, for db-sync to be able to connect. Build Instructions \u2693\ufe0e Clone the repository \u2693\ufe0e Execute the below to clone the cardano-db-sync repository to $HOME/git folder on your system: cd ~/git git clone https://github.com/input-output-hk/cardano-db-sync cd cardano-db-sync Build Cardano DB Sync \u2693\ufe0e You can use the instructions below to build the latest release of cardano-db-sync . git fetch --tags --all git pull # Include the cardano-crypto-praos and libsodium components for db-sync # On CentOS 7 (GCC 4.8.5) we should also do # echo -e \"package cryptonite\\n flags: -use_target_attributes\" >> cabal.project.local # Replace tag against checkout if you do not want to build the latest released version git checkout $( curl -s https://api.github.com/repos/input-output-hk/cardano-db-sync/releases/latest | jq -r .tag_name ) # Use `-l` argument if you'd like to use system libsodium instead of IOG fork of libsodium while compiling $CNODE_HOME /scripts/cabal-build-all.sh The above would copy the binaries into ~/.cabal/bin folder. Prepare DB for sync \u2693\ufe0e Now that binaries are available, let's create our database (when going through breaking changes, you may need to use --recreatedb instead of --createdb used for the first time. Again, we expect that PGPASSFILE environment variable is already set (refer to the top of this guide for sample instructions): cd ~/git/cardano-db-sync # scripts/postgresql-setup.sh --dropdb #if exists already, will fail if it doesnt - thats OK scripts/postgresql-setup.sh --createdb # Password: # Password: # All good! ## Verify you can see \"All good!\" as above Start Synching \u2693\ufe0e cd ~/git/cardano-db-sync cardano-db-sync-extended --config $CNODE_HOME /files/dbsync.json --socket-path $CNODE_HOME /sockets/node0.socket --state-dir $CNODE_HOME /guild-db/ledger-state --schema-dir schema/ You can use same instructions above to repeat and execute cardano-db-sync as well, but cardano-db-sync-extended provides additional views/useful data ready to be consumed by query layer. Note that synching entire blockchain from scratch could take a few hours. Validation \u2693\ufe0e To validate, connect to your postgres instance and execute commands as per below: export PGPASSFILE = $CNODE_HOME /priv/.pgpass psql cexplorer You should be at the psql prompt, you can check the tables and verify they're populated: \\ dt select * from meta ; A sample output of the above two commands may look like below (the number of tables and names may vary between versions): cexplorer=# \\dt List of relations Schema | Name | Type | Owner --------+---------------------------+-------+------- public | ada_pots | table | centos public | admin_user | table | centos public | block | table | centos public | delegation | table | centos public | delisted_pool | table | centos public | epoch | table | centos public | epoch_param | table | centos public | epoch_stake | table | centos public | ma_tx_mint | table | centos public | ma_tx_out | table | centos public | meta | table | centos public | orphaned_reward | table | centos public | param_proposal | table | centos public | pool_hash | table | centos public | pool_meta_data | table | centos public | pool_metadata | table | centos public | pool_metadata_fetch_error | table | centos public | pool_metadata_ref | table | centos public | pool_owner | table | centos public | pool_relay | table | centos public | pool_retire | table | centos public | pool_update | table | centos public | pot_transfer | table | centos public | reserve | table | centos public | reserved_ticker | table | centos public | reward | table | centos public | schema_version | table | centos public | slot_leader | table | centos public | stake_address | table | centos public | stake_deregistration | table | centos public | stake_registration | table | centos public | treasury | table | centos public | tx | table | centos public | tx_in | table | centos public | tx_metadata | table | centos public | tx_out | table | centos public | withdrawal | table | centos (37 rows) select * from meta; id | start_time | network_name ----+---------------------+-------------- 1 | 2017-09-23 21:44:51 | mainnet (1 row)","title":"DBSync"},{"location":"Build/dbsync/#build-instructions","text":"","title":"Build Instructions"},{"location":"Build/dbsync/#clone-the-repository","text":"Execute the below to clone the cardano-db-sync repository to $HOME/git folder on your system: cd ~/git git clone https://github.com/input-output-hk/cardano-db-sync cd cardano-db-sync","title":"Clone the repository"},{"location":"Build/dbsync/#build-cardano-db-sync","text":"You can use the instructions below to build the latest release of cardano-db-sync . git fetch --tags --all git pull # Include the cardano-crypto-praos and libsodium components for db-sync # On CentOS 7 (GCC 4.8.5) we should also do # echo -e \"package cryptonite\\n flags: -use_target_attributes\" >> cabal.project.local # Replace tag against checkout if you do not want to build the latest released version git checkout $( curl -s https://api.github.com/repos/input-output-hk/cardano-db-sync/releases/latest | jq -r .tag_name ) # Use `-l` argument if you'd like to use system libsodium instead of IOG fork of libsodium while compiling $CNODE_HOME /scripts/cabal-build-all.sh The above would copy the binaries into ~/.cabal/bin folder.","title":"Build Cardano DB Sync"},{"location":"Build/dbsync/#prepare-db-for-sync","text":"Now that binaries are available, let's create our database (when going through breaking changes, you may need to use --recreatedb instead of --createdb used for the first time. Again, we expect that PGPASSFILE environment variable is already set (refer to the top of this guide for sample instructions): cd ~/git/cardano-db-sync # scripts/postgresql-setup.sh --dropdb #if exists already, will fail if it doesnt - thats OK scripts/postgresql-setup.sh --createdb # Password: # Password: # All good! ## Verify you can see \"All good!\" as above","title":"Prepare DB for sync"},{"location":"Build/dbsync/#start-synching","text":"cd ~/git/cardano-db-sync cardano-db-sync-extended --config $CNODE_HOME /files/dbsync.json --socket-path $CNODE_HOME /sockets/node0.socket --state-dir $CNODE_HOME /guild-db/ledger-state --schema-dir schema/ You can use same instructions above to repeat and execute cardano-db-sync as well, but cardano-db-sync-extended provides additional views/useful data ready to be consumed by query layer. Note that synching entire blockchain from scratch could take a few hours.","title":"Start Synching"},{"location":"Build/dbsync/#validation","text":"To validate, connect to your postgres instance and execute commands as per below: export PGPASSFILE = $CNODE_HOME /priv/.pgpass psql cexplorer You should be at the psql prompt, you can check the tables and verify they're populated: \\ dt select * from meta ; A sample output of the above two commands may look like below (the number of tables and names may vary between versions): cexplorer=# \\dt List of relations Schema | Name | Type | Owner --------+---------------------------+-------+------- public | ada_pots | table | centos public | admin_user | table | centos public | block | table | centos public | delegation | table | centos public | delisted_pool | table | centos public | epoch | table | centos public | epoch_param | table | centos public | epoch_stake | table | centos public | ma_tx_mint | table | centos public | ma_tx_out | table | centos public | meta | table | centos public | orphaned_reward | table | centos public | param_proposal | table | centos public | pool_hash | table | centos public | pool_meta_data | table | centos public | pool_metadata | table | centos public | pool_metadata_fetch_error | table | centos public | pool_metadata_ref | table | centos public | pool_owner | table | centos public | pool_relay | table | centos public | pool_retire | table | centos public | pool_update | table | centos public | pot_transfer | table | centos public | reserve | table | centos public | reserved_ticker | table | centos public | reward | table | centos public | schema_version | table | centos public | slot_leader | table | centos public | stake_address | table | centos public | stake_deregistration | table | centos public | stake_registration | table | centos public | treasury | table | centos public | tx | table | centos public | tx_in | table | centos public | tx_metadata | table | centos public | tx_out | table | centos public | withdrawal | table | centos (37 rows) select * from meta; id | start_time | network_name ----+---------------------+-------------- 1 | 2017-09-23 21:44:51 | mainnet (1 row)","title":"Validation"},{"location":"Build/graphql/","text":"!> We have stopped maintaining documentation for Cardano-GraphQL, and prefer use of PostgREST instead. The specific component does not follow the process/technology/language (requires npm, yarn) used by other components (cabal/stack), and the value provided by cardano-graphql over the (haskell-based) hasura instance has been negligible. Also, an average pool operator may not require cardano-graphql at all, please verify if it is required for your use as mentioned here . The instructions below are out of date . Ensure the Pre-Requisites are in place before you proceed. Build Hasura graphql-engine \u2693\ufe0e Going with the spirit of the documentation here, instruction to build the graphql-engine binary :) cd ~/git git clone https://github.com/hasura/graphql-engine cd graphql-engine/server $CNODE_HOME /scripts/cabal-build-all.sh This should make graphql-engine available at ~/.cabal/bin. Build cardano-graphql \u2693\ufe0e The build will fail if you are running a version of node.js earlier than 10.0.0 (which could happen if you have a conflicting version in your $PATH). You can verify your node version by executing the below: #check your version of node.js node -v #if response is 10.0.0 or higher build can proceed. The commands below will help you compile the cardano-graphql node: cd ~/git git clone https://github.com/input-output-hk/cardano-graphql cd cardano-graphql git checkout v1.1.1 yarn #yarn install v1.22.4 # [1/4] Resolving packages... # [2/4] Fetching packages... # info fsevents@2.1.2: The platform \"linux\" is incompatible with this module. # info \"fsevents@2.1.2\" is an optional dependency and failed compatibility check. Excluding it from installation. # info fsevents@1.2.12: The platform \"linux\" is incompatible with this module. # info \"fsevents@1.2.12\" is an optional dependency and failed compatibility check. Excluding it from installation. # [3/4] Linking dependencies... # warning \" > graphql-type-datetime@0.2.4\" has incorrect peer dependency \"graphql@^0.13.2\". # warning \" > @typescript-eslint/eslint-plugin@1.13.0\" has incorrect peer dependency \"eslint@^5.0.0\". # warning \" > @typescript-eslint/parser@1.13.0\" has incorrect peer dependency \"eslint@^5.0.0\". # [4/4] Building fresh packages... # Done in 20.70s. yarn build # yarn run v1.22.4 # $ yarn codegen:internal && yarn codegen:external && tsc -p . && shx cp src/schema.graphql dist/ # $ graphql-codegen # \u2714 Parse configuration # \u2714 Generate outputs # $ graphql-codegen --config ./codegen.external.yml # \u2714 Parse configuration # \u2714 Generate outputs # Done in 38.11s. cd dist rsync -arvh ../node_modules ./ Set up environment for cardano-graphql \u2693\ufe0e cardano-graphql requires cardano-node, cardano-db-sync-extended, postgresql and graphql-engine to be set up and running. The below will help you map the components: export PGPASSFILE = $CNODE_HOME /priv/.pgpass IFS = ':' read -r -a PGPASS <<< $( cat $PGPASSFILE ) export HASURA_GRAPHQL_ENABLE_TELEMETRY = false # Optional. To send usage data to Hasura, set to true. export HASURA_GRAPHQL_DATABASE_URL = postgres:// ${ PGPASS [3] } : ${ PGPASS [4] } @ ${ PGPASS [0] } : ${ PGPASS [1] } / ${ PGPASS [2] } export HASURA_GRAPHQL_ENABLE_CONSOLE = true export HASURA_GRAPHQL_ENABLED_LOG_TYPES = \"startup, http-log, webhook-log, websocket-log, query-log\" export HASURA_GRAPHQL_SERVER_PORT = 4080 export HASURA_GRAPHQL_SERVER_HOST = 0 .0.0.0 export CACHE_ENABLED = true export HASURA_URI = http://127.0.0.1:4080 cd ~/git/cardano-graphql/dist graphql-engine serve & node index.js","title":"Graphql"},{"location":"Build/graphql/#build-hasura-graphql-engine","text":"Going with the spirit of the documentation here, instruction to build the graphql-engine binary :) cd ~/git git clone https://github.com/hasura/graphql-engine cd graphql-engine/server $CNODE_HOME /scripts/cabal-build-all.sh This should make graphql-engine available at ~/.cabal/bin.","title":"Build Hasura graphql-engine"},{"location":"Build/node-cli/","text":"Reminder !! Ensure the Pre-Requisites are in place before you proceed. Build Instructions \u2693\ufe0e Clone the repository \u2693\ufe0e Execute the below to clone the cardano-node repository to $HOME/git folder on your system: cd ~/git git clone https://github.com/input-output-hk/cardano-node cd cardano-node Build Cardano Node \u2693\ufe0e You can use the instructions below to build the latest release of cardano-node . git fetch --tags --all git pull # Replace tag against checkout if you do not want to build the latest released version git checkout $( curl -s https://api.github.com/repos/input-output-hk/cardano-node/releases/latest | jq -r .tag_name ) # Use `-l` argument if you'd like to use system libsodium instead of IOG fork of libsodium while compiling $CNODE_HOME /scripts/cabal-build-all.sh The above would copy the binaries built into ~/.cabal/bin folder. Verify \u2693\ufe0e Execute cardano-cli and cardano-node to verify output as below: cardano-cli version # cardano-cli 1.27.0 - linux-x86_64 - ghc-8.10 # git rev 8fe46140a52810b6ca456be01d652ca08fe730bf cardano-node version # cardano-node 1.27.0 - linux-x86_64 - ghc-8.10 # git rev 8fe46140a52810b6ca456be01d652ca08fe730bf Update port number or pool name for relative paths \u2693\ufe0e Before you go ahead with starting your node, you may want to update values for CNODE_PORT in $CNODE_HOME/scripts/env . Note that it is imperative for operational relays and pools to ensure that the port mentioned is opened via firewall to the destination your node is supposed to connect from. Update your network/firewall configuration accordingly. Future executions of prereqs.sh will preserve and not overwrite these values. CNODE_PORT = 6000 POOL_NAME = \"GUILD\" Important POOL_NAME is the name of folder that you will use when registering pools and starting node in core mode. This folder would typically contain your hot.skey , vrf.skey and op.cert files required. If the mentioned files are absent, the node will automatically start in a passive mode. Start the node \u2693\ufe0e To test starting the node in interactive mode, you can use the pre-built script below ( cnode.sh ) (note that your node logs are being written to $CNODE_HOME/logs folder, you may not see much output beyond Listening on http://127.0.0.1:12798 ). This script automatically determines whether to start the node as a relay or block producer (if the required pool keys are present in the $CNODE_HOME/priv/pool/<POOL_NAME> as mentioned above). The script contains a user-defined variable CPU_CORES which determines the number of CPU cores the node will use upon start-up: ###################################### # User Variables - Change as desired # # Common variables set in env file # ###################################### #CPU_CORES=2 # Number of CPU cores cardano-node process has access to (please don't set higher than physical core count, 2-4 recommended) You can uncomment this and set to the desired number, but be wary not to go above your physical core count. cd $CNODE_HOME /scripts ./cnode.sh Stop the node by hitting Ctrl-C. Run as systemd service \u2693\ufe0e The preferred way to run the node is through a service manager like systemd. This section explains how to setup a systemd service file. 1. Deploy as a systemd service Execute the below command to deploy your node as a systemd service (from the respective scripts folder): cd $CNODE_HOME /scripts ./deploy-as-systemd.sh 2. Start the node Run below commands to enable automatic start of service on startup and start it. sudo systemctl start cnode.service 3. Check status and stop/start commands Replace status with stop / start / restart depending on what action to take. sudo systemctl status cnode.service Important In case you see the node exit unsuccessfully upon checking status, please verify you've followed the transition process correctly as documented below, and that you do not have another instance of node already running. It would help to check your system logs ( /var/log/syslog for debian-based and /var/log/messages for Red Hat/CentOS/Fedora systems, you can also check journalctl -f -u <service> to examine startup attempt for services) for any errors while starting node. You can use gLiveView to monitor your node that was started as a systemd service. cd $CNODE_HOME /scripts ./gLiveView.sh","title":"Node & CLI"},{"location":"Build/node-cli/#build-instructions","text":"","title":"Build Instructions"},{"location":"Build/node-cli/#clone-the-repository","text":"Execute the below to clone the cardano-node repository to $HOME/git folder on your system: cd ~/git git clone https://github.com/input-output-hk/cardano-node cd cardano-node","title":"Clone the repository"},{"location":"Build/node-cli/#build-cardano-node","text":"You can use the instructions below to build the latest release of cardano-node . git fetch --tags --all git pull # Replace tag against checkout if you do not want to build the latest released version git checkout $( curl -s https://api.github.com/repos/input-output-hk/cardano-node/releases/latest | jq -r .tag_name ) # Use `-l` argument if you'd like to use system libsodium instead of IOG fork of libsodium while compiling $CNODE_HOME /scripts/cabal-build-all.sh The above would copy the binaries built into ~/.cabal/bin folder.","title":"Build Cardano Node"},{"location":"Build/node-cli/#verify","text":"Execute cardano-cli and cardano-node to verify output as below: cardano-cli version # cardano-cli 1.27.0 - linux-x86_64 - ghc-8.10 # git rev 8fe46140a52810b6ca456be01d652ca08fe730bf cardano-node version # cardano-node 1.27.0 - linux-x86_64 - ghc-8.10 # git rev 8fe46140a52810b6ca456be01d652ca08fe730bf","title":"Verify"},{"location":"Build/node-cli/#update-port-number-or-pool-name-for-relative-paths","text":"Before you go ahead with starting your node, you may want to update values for CNODE_PORT in $CNODE_HOME/scripts/env . Note that it is imperative for operational relays and pools to ensure that the port mentioned is opened via firewall to the destination your node is supposed to connect from. Update your network/firewall configuration accordingly. Future executions of prereqs.sh will preserve and not overwrite these values. CNODE_PORT = 6000 POOL_NAME = \"GUILD\" Important POOL_NAME is the name of folder that you will use when registering pools and starting node in core mode. This folder would typically contain your hot.skey , vrf.skey and op.cert files required. If the mentioned files are absent, the node will automatically start in a passive mode.","title":"Update port number or pool name for relative paths"},{"location":"Build/node-cli/#start-the-node","text":"To test starting the node in interactive mode, you can use the pre-built script below ( cnode.sh ) (note that your node logs are being written to $CNODE_HOME/logs folder, you may not see much output beyond Listening on http://127.0.0.1:12798 ). This script automatically determines whether to start the node as a relay or block producer (if the required pool keys are present in the $CNODE_HOME/priv/pool/<POOL_NAME> as mentioned above). The script contains a user-defined variable CPU_CORES which determines the number of CPU cores the node will use upon start-up: ###################################### # User Variables - Change as desired # # Common variables set in env file # ###################################### #CPU_CORES=2 # Number of CPU cores cardano-node process has access to (please don't set higher than physical core count, 2-4 recommended) You can uncomment this and set to the desired number, but be wary not to go above your physical core count. cd $CNODE_HOME /scripts ./cnode.sh Stop the node by hitting Ctrl-C.","title":"Start the node"},{"location":"Build/node-cli/#systemd","text":"The preferred way to run the node is through a service manager like systemd. This section explains how to setup a systemd service file. 1. Deploy as a systemd service Execute the below command to deploy your node as a systemd service (from the respective scripts folder): cd $CNODE_HOME /scripts ./deploy-as-systemd.sh 2. Start the node Run below commands to enable automatic start of service on startup and start it. sudo systemctl start cnode.service 3. Check status and stop/start commands Replace status with stop / start / restart depending on what action to take. sudo systemctl status cnode.service Important In case you see the node exit unsuccessfully upon checking status, please verify you've followed the transition process correctly as documented below, and that you do not have another instance of node already running. It would help to check your system logs ( /var/log/syslog for debian-based and /var/log/messages for Red Hat/CentOS/Fedora systems, you can also check journalctl -f -u <service> to examine startup attempt for services) for any errors while starting node. You can use gLiveView to monitor your node that was started as a systemd service. cd $CNODE_HOME /scripts ./gLiveView.sh","title":"Run as systemd service"},{"location":"Build/offchain-metadata-tools/","text":"Important An average pool operator may not require offline-metadata-tools at all. Please verify if it is required for your use as mentioned here Ensure the Pre-Requisites are in place before you proceed. In the Cardano multi-asset era, this project helps you create and submit metadata describing your assets, storing them off-chain. Download pre-built binaries \u2693\ufe0e Go to input-output-hk/offchain-metadata-tools to download the binaries and place in a directory specified by PATH , e.g. $HOME/.cabal/bin/ . Build Instructions \u2693\ufe0e An alternative to pre-built binaries - instructions describe how to build the token-metadata-creator tool but the offchain-metadata-tools repository contains other tools as well. Build the ones needed for your installation. Clone the repository \u2693\ufe0e Execute the below to clone the offchain-metadata-tools repository to $HOME/git folder on your system: cd ~/git git clone https://github.com/input-output-hk/offchain-metadata-tools.git cd offchain-metadata-tools/token-metadata-creator Build token-metadata-creator \u2693\ufe0e You can use the instructions below to build token-metadata-creator , same steps can be executed in future to update the binaries (replacing appropriate tag) as well. git fetch --tags --all git pull # Replace master with appropriate tag if you'd like to avoid compiling against master git checkout master $CNODE_HOME /scripts/cabal-build-all.sh The above would copy the binaries into ~/.cabal/bin folder. Verify \u2693\ufe0e Verify that the tool is executable from anywhere by running: token-metadata-creator -h","title":"Offchain Metadata Tools"},{"location":"Build/offchain-metadata-tools/#download-pre-built-binaries","text":"Go to input-output-hk/offchain-metadata-tools to download the binaries and place in a directory specified by PATH , e.g. $HOME/.cabal/bin/ .","title":"Download pre-built binaries"},{"location":"Build/offchain-metadata-tools/#build-instructions","text":"An alternative to pre-built binaries - instructions describe how to build the token-metadata-creator tool but the offchain-metadata-tools repository contains other tools as well. Build the ones needed for your installation.","title":"Build Instructions"},{"location":"Build/offchain-metadata-tools/#clone-the-repository","text":"Execute the below to clone the offchain-metadata-tools repository to $HOME/git folder on your system: cd ~/git git clone https://github.com/input-output-hk/offchain-metadata-tools.git cd offchain-metadata-tools/token-metadata-creator","title":"Clone the repository"},{"location":"Build/offchain-metadata-tools/#build-token-metadata-creator","text":"You can use the instructions below to build token-metadata-creator , same steps can be executed in future to update the binaries (replacing appropriate tag) as well. git fetch --tags --all git pull # Replace master with appropriate tag if you'd like to avoid compiling against master git checkout master $CNODE_HOME /scripts/cabal-build-all.sh The above would copy the binaries into ~/.cabal/bin folder.","title":"Build token-metadata-creator"},{"location":"Build/offchain-metadata-tools/#verify","text":"Verify that the tool is executable from anywhere by running: token-metadata-creator -h","title":"Verify"},{"location":"Build/pgrest/","text":"Important An average pool operator may not require this component at all. Please verify if it is required for your use as mentioned here Ensure the Pre-Requisites are in place before you proceed. PostgREST is a web server that serves any PostgreSQL database (in our case, useful for cardano-db-sync and smash ) as a RESTful Web Service. The endpoints of PostgREST in itself are essentially the table itself. You can read more about exploring the API here . Understandably, it would of course rely on an existing PostgreSQL server. At the moment of writing, this is being used as an easy alternative - which will remain up-to-date since it is directly serving the underlying database as an API, as compared to Cardano GraphQL component. Some of the other advantages would also be that you can serve JWT authentication, or use native Postgres DB authentication against the Rest Interface as well (see here for adding this to your instance), and the web server it uses can be hardened or served behind another nginx/httpd/.. reverse proxy as per your SecOps preferences. Again, the focus of this guide (for now) is not to tell you how to secure your PostgREST instance, but to get you up and running quickly. You'd want to harden your instance as per instructions here once you're happy with the usage. The guide below assumes PostgreSQL instance has already been set up (refer to Sample Local PostgreSQL Server Deployment instructions ) along with cardano-db-sync . Enable permissions in Database \u2693\ufe0e For simplicity, the download of latest PostgREST instance is already available via executing the below: mkdir ~/tmp ; cd ~/tmp wget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/prereqs.sh ./prereqs.sh -p This would download and make postgrest binary available in ${HOME}/.cabal/bin which is also where your DB Sync binaries would be, assuming you've followed this guide . To start with you'd want to ensure your current shell session has access to Postgres credentials, continuing from examples from the above mentioned Sample Postgres deployment guide . cd $CNODE_HOME /priv PGPASSFILE = $CNODE_HOME /priv/.pgpass Now you'd want to start psql cexplorer to connect to your Postgres Instance, and create a basic user and give it usage/select access to the schema and tables respectively. Refer to commands below for the same: create role web_anon nologin ; grant usage on schema public to web_anon ; GRANT SELECT ON ALL TABLES IN SCHEMA public TO web_anon ; ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO web_anon ; You can now quit your psql session using \\q . Create Config and Start PostgREST \u2693\ufe0e Now that your user is created in database, you can create the postgrest config. A basic sample is below: Reminder !! Verify and update db-uri if required, the given value configures it for user running the command below (and relies on socket connection to postgres sever. cat << 'EOF' > $CNODE_HOME/priv/pgrest.conf db-uri = \"postgres://${USER}@/cexplorer\" db-schema = \"public\" db-anon-role = \"web_anon\" server-host = \"127.0.0.1\" server-port = 8050 #jwt-secret = \"secret-token\" #db-pool = 10 #db-pool-timeout = 10 #db-extra-search-path = \"public\" #max-rows = 1000 EOF If you'd like to connect to your PostgREST remotely (again, it is recommended you harden your instance before this is done), uncomment and replace the server-host parameter with \"0.0.0.0\"). Make sure to change the file permissions so that it's only visible to user that will run postgrest instance using chmod 600 $CNODE_HOME/priv/pgrest.conf . If you want to prevent unauthenticated access, uncomment the jwt-secret and specify a custom secret-token . You're now all set! To start the instance, you can use the below to start your postgrest instance. postgrest $CNODE_HOME /priv/pgrest.conf ## Attempting to connect to the database... ## Listening on port 8050 ## Connection successful Validation \u2693\ufe0e While you can query PostgREST a browser from a browser if listening on 0.0.0.0 , we'd stick to querying your instance via curl on terminal, so that we're not troubleshooting any firewall/network configuration issues. Now, the nomenclature we used should have connected you to the cardano-db-sync instance. Assuming it is already populated (even partially), you can try explore tables as REST endpoints. To query the network your DBSync instance has connected to curl -s http://127.0.0.1:8050/meta?select = network_name ## [{\"network_name\":\"mainnet\"}] curl -s http://127.0.0.1:8050/meta?network_name | jq -r '.[].network_name' ## mainnet Note that here meta is the table name, while network_name is the column name. Let's now look at another table epoch and add a WHERE filter to query ID equals 2. curl -s http://127.0.0.1:8050/epoch?id = eq.2 | jq . ## [ ## { ## \"id\": 2, ## \"out_sum\": 101402912214214220, ## \"fees\": 1033002678, ## \"tx_count\": 12870, ## \"blk_count\": 21590, ## \"no\": 1, ## \"start_time\": \"2017-09-28T21:44:51\", ## \"end_time\": \"2017-10-03T21:44:31\" ## } ## ] Refer to API documentation for more details about querying (joins, functions, custom queries, stored procedures, etc).","title":"PostgREST"},{"location":"Build/pgrest/#perms","text":"For simplicity, the download of latest PostgREST instance is already available via executing the below: mkdir ~/tmp ; cd ~/tmp wget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/prereqs.sh ./prereqs.sh -p This would download and make postgrest binary available in ${HOME}/.cabal/bin which is also where your DB Sync binaries would be, assuming you've followed this guide . To start with you'd want to ensure your current shell session has access to Postgres credentials, continuing from examples from the above mentioned Sample Postgres deployment guide . cd $CNODE_HOME /priv PGPASSFILE = $CNODE_HOME /priv/.pgpass Now you'd want to start psql cexplorer to connect to your Postgres Instance, and create a basic user and give it usage/select access to the schema and tables respectively. Refer to commands below for the same: create role web_anon nologin ; grant usage on schema public to web_anon ; GRANT SELECT ON ALL TABLES IN SCHEMA public TO web_anon ; ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO web_anon ; You can now quit your psql session using \\q .","title":"Enable permissions in Database"},{"location":"Build/pgrest/#start-pgrest","text":"Now that your user is created in database, you can create the postgrest config. A basic sample is below: Reminder !! Verify and update db-uri if required, the given value configures it for user running the command below (and relies on socket connection to postgres sever. cat << 'EOF' > $CNODE_HOME/priv/pgrest.conf db-uri = \"postgres://${USER}@/cexplorer\" db-schema = \"public\" db-anon-role = \"web_anon\" server-host = \"127.0.0.1\" server-port = 8050 #jwt-secret = \"secret-token\" #db-pool = 10 #db-pool-timeout = 10 #db-extra-search-path = \"public\" #max-rows = 1000 EOF If you'd like to connect to your PostgREST remotely (again, it is recommended you harden your instance before this is done), uncomment and replace the server-host parameter with \"0.0.0.0\"). Make sure to change the file permissions so that it's only visible to user that will run postgrest instance using chmod 600 $CNODE_HOME/priv/pgrest.conf . If you want to prevent unauthenticated access, uncomment the jwt-secret and specify a custom secret-token . You're now all set! To start the instance, you can use the below to start your postgrest instance. postgrest $CNODE_HOME /priv/pgrest.conf ## Attempting to connect to the database... ## Listening on port 8050 ## Connection successful","title":"Create Config and Start PostgREST"},{"location":"Build/pgrest/#validation","text":"While you can query PostgREST a browser from a browser if listening on 0.0.0.0 , we'd stick to querying your instance via curl on terminal, so that we're not troubleshooting any firewall/network configuration issues. Now, the nomenclature we used should have connected you to the cardano-db-sync instance. Assuming it is already populated (even partially), you can try explore tables as REST endpoints. To query the network your DBSync instance has connected to curl -s http://127.0.0.1:8050/meta?select = network_name ## [{\"network_name\":\"mainnet\"}] curl -s http://127.0.0.1:8050/meta?network_name | jq -r '.[].network_name' ## mainnet Note that here meta is the table name, while network_name is the column name. Let's now look at another table epoch and add a WHERE filter to query ID equals 2. curl -s http://127.0.0.1:8050/epoch?id = eq.2 | jq . ## [ ## { ## \"id\": 2, ## \"out_sum\": 101402912214214220, ## \"fees\": 1033002678, ## \"tx_count\": 12870, ## \"blk_count\": 21590, ## \"no\": 1, ## \"start_time\": \"2017-09-28T21:44:51\", ## \"end_time\": \"2017-10-03T21:44:31\" ## } ## ] Refer to API documentation for more details about querying (joins, functions, custom queries, stored procedures, etc).","title":"Validation"},{"location":"Build/rest/","text":"!> - An average pool operator may not require cardano-rest at all. Please verify if it is required for your use as mentioned here Ensure the Pre-Requisites are in place before you proceed. Build Instructions \u2693\ufe0e Clone the repository \u2693\ufe0e Execute the below to clone the cardano-rest repository to $HOME/git folder on your system: cd ~/git git clone https://github.com/input-output-hk/cardano-rest cd cardano-rest Build Cardano Rest \u2693\ufe0e You can use the instructions below to build the cardano-rest, same steps can be executed in future to update the binaries (replacing appropriate tag) as well. git fetch --tags --all git pull # Replace master with appropriate tag if you'd like to avoid compiling against master git checkout master $CNODE_HOME /scripts/cabal-build-all.sh The above would copy the binaries into ~/.cabal/bin folder. Start the REST server \u2693\ufe0e Execute the below to start the Cardano Explorer API Server: export PGPASSFILE = $CNODE_HOME /priv/.pgpass cardano-explorer-api # Running full server on http://localhost:8100/ Verify the REST server is functioning \u2693\ufe0e Verify that you can query the API Server using instruction below: curl http://localhost:8100/api/blocks/pages Expected output should be similar to the following: { \"Right\" :[ 261 ,[{ \"cbeEpoch\" : 4 , \"cbeSlot\" : 9345 , \"cbeBlkHeight\" : 2605 , \"cbeBlkHash\" : \"9026612cfa53b7f8a84ff62c4e897830db9ab6ce24b19e0059f4b4db7a14c0f9\" , \"cbeTimeIssued\" : 1587974365 , \"cbeTxNum\" : 0 , \"cbeTotalSent\" :{ \"getCoin\" : \"0\" }, \"cbeSize\" : 631 , \"cbeBlockLead\" : \"464835a0904109be93d7996b9b4acc486f6c8f75a595b2c4392f9521\" , \"cbeBlockLead\" : \"a18aa0130f67053ed1cb346813054e160687a8ee7602a549f8ae165b\" , \"cbeFees\" :{ \"getCoin\" : \"0\" }}]]}","title":"Rest"},{"location":"Build/wallet/","text":"!> - An average pool operator may not require cardano-wallet at all. Please verify if it is required for your use as mentioned here . Ensure the Pre-Requisites are in place before you proceed. Build Instructions \u2693\ufe0e Follow instructions below for building the cardano-wallet binary: Clone the repository \u2693\ufe0e Execute the below to clone the cardano-wallet repository to $HOME/git folder on your system: cd ~/git git clone https://github.com/input-output-hk/cardano-wallet cd cardano-wallet Build Cardano Wallet \u2693\ufe0e You can use the instructions below to build the latest release of cardano-wallet . !> - Note that the latest release of cardano-wallet may not work with the latest release of cardano-node . Please check the compatibility of each cardano-wallet release yourself in the official docs, e.g. https://github.com/input-output-hk/cardano-wallet/releases/latest . The cardano-wallet repo does not work yet with cabal , hence the alternative for now is building with stack git fetch --tags --all git pull # Replace tag against checkout if you do not want to build the latest released version git checkout $( curl -s https://api.github.com/repos/input-output-hk/cardano-wallet/releases/latest | jq -r .tag_name ) $CNODE_HOME /scripts/stack-build.sh The above would copy the binaries into ~/.cabal/bin folder. Start the wallet \u2693\ufe0e You can run the below to connect to a cardano-node instance that is expected to be already running and the wallet will start syncing. cardano-wallet serve / --node-socket $CNODE_HOME /sockets/node0.socket / --mainnet / # if using the testnet flag you also need to specify the testnet genesis.json file --database $CNODE_HOME /priv/wallet Verify the wallet is handling requests \u2693\ufe0e cardano-wallet network information Expected output should be similar to the following Ok. { \"network_tip\" : { \"time\" : \"2021-06-01T17:31:05Z\" , \"epoch_number\" : 269 , \"absolute_slot_number\" : 31002374 , \"slot_number\" : 157574 }, \"node_era\" : \"mary\" , \"node_tip\" : { \"height\" : { \"quantity\" : 5795127 , \"unit\" : \"block\" }, \"time\" : \"2021-06-01T17:31:00Z\" , \"epoch_number\" : 269 , \"absolute_slot_number\" : 31002369 , \"slot_number\" : 157569 }, \"sync_progress\" : { \"status\" : \"ready\" }, \"next_epoch\" : { \"epoch_start_time\" : \"2021-06-04T21:44:51Z\" , \"epoch_number\" : 270 } } Creating/Restoring Wallet \u2693\ufe0e If you're creating a new wallet, you'd first want to generate a mnemonic for use (see below): cardano-wallet recovery-phrase generate # false brother typical saddle settle phrase foster sauce ask sunset firm gate service render burger You can use the above mnemonic to then restore a wallet as per below: cardano-wallet wallet create from-recovery-phrase MyWalletName Expected output: \u2693\ufe0e Please enter a 15\u201324 word recovery phrase: false brother typical saddle settle phrase foster sauce ask sunset firm gate service render burger (Enter a blank line if you do not wish to use a second factor.) Please enter a 9\u201312 word second factor: Please enter a passphrase: ********** Enter the passphrase a second time: ********** Ok. { ... }","title":"Wallet"},{"location":"Build/wallet/#build-instructions","text":"Follow instructions below for building the cardano-wallet binary:","title":"Build Instructions"},{"location":"Scripts/cncli/","text":"Reminder !! Ensure the Pre-Requisites are in place before you proceed. cncli.sh is a script to download and deploy CNCLI created and maintained by Andrew Westberg. It's a community-based CLI tool written in RUST for low-level cardano-node communication. Usage is optional and no script is dependent on it. The main features include: PING - Validates that the remote server is on the given network and returns its response time. Utilized by gLiveView for peer analysis if available. SYNC - Connects to a node (local or remote) and synchronizes blocks to a local sqlite database. VALIDATE - Validates that a block hash or partial block hash is on-chain. LEADERLOG - Calculates a stakepool's expected slot list. On the mainnet and the official testnet, the next epoch's leader schedule is available 1.5 days before the end of the epoch ( firstSlotOfNextEpoch - (3 * k / f) ). SENDTIP - Send node tip to PoolTool for network analysis and to show that your node is alive and well with a green badge. SENDSLOTS - Securely sends PoolTool the number of slots you have assigned for an epoch and validates the correctness of your past epochs. Installation \u2693\ufe0e cncli.sh script's main functions, sync , leaderlog , validate and PoolTool sendslots / sendtip are not meant to be run manually, but instead deployed as systemd services that run in the background to do the block scraping and validation automatically. Additional commands exist for manual execution to initiate the sqlite db, filling the blocklog DB with all blocks created by the pool known to the blockchain, migration of old cntoolsBlockCollector JSON blocklog, and re-validation of blocks and leaderlogs. See usage output below for a complete list of available commands. The script works in tandem with Log Monitor to provide faster adopted status but mainly to catch slots the node is leader for but are unable to create a block for. These are marked as invalid. Blocklog will however work fine without the logMonitor service and CNCLI is able to handle everything except catching invalid blocks. Run the latest version of prereqs.sh with prereqs.sh -c to download and install RUST and CNCLI. IOG fork of libsodium required by CNCLI is automatically compiled by CNCLI build process. If a previous installation is found, RUST and CNCLI will be updated to the latest version. Run deploy-as-systemd.sh to deploy the systemd services that handle all the work in the background. Six systemd services in total are deployed whereof four are related to CNCLI. See above for the different purposes they serve. If you want to disable some of the deployed services, run sudo systemctl disable <service> cnode.service (main cardano-node launcher) cnode-cncli-sync.service cnode-cncli-leaderlog.service cnode-cncli-validate.service cnode-cncli-ptsendtip.service cnode-cncli-ptsendslots.service cnode-logmonitor.service (see Log Monitor ) Configuration \u2693\ufe0e You can override the values in the script at the User Variables section shown below. POOL_ID , POOL_VRF_SKEY and POOL_VRF_VKEY should automatically be detected if POOL_NAME is set in the common env file and can be left commented. PT_API_KEY and POOL_TICKER need to be set in the script if PoolTool sendtip / sendslots are to be used before starting the services. For the rest of the commented values, if the defaults do not provide the right values, uncomment and make adjustments. #POOL_ID=\"\" # Automatically detected if POOL_NAME is set in env. Required for leaderlog calculation & pooltool sendtip, lower-case hex pool id #POOL_VRF_SKEY=\"\" # Automatically detected if POOL_NAME is set in env. Required for leaderlog calculation, path to pool's vrf.skey file #POOL_VRF_VKEY=\"\" # Automatically detected if POOL_NAME is set in env. Required for block validation, path to pool's vrf.vkey file #PT_API_KEY=\"\" # POOLTOOL sendtip: set API key, e.g \"a47811d3-0008-4ecd-9f3e-9c22bdb7c82d\" #POOL_TICKER=\"\" # POOLTOOL sendtip: set the pools ticker, e.g. \"TCKR\" #PT_HOST=\"127.0.0.1\" # POOLTOOL sendtip: connect to a remote node, preferably block producer (default localhost) #PT_PORT=\"${CNODE_PORT}\" # POOLTOOL sendtip: port of node to connect to (default is CNODE_PORT from the env file) #CNCLI_DIR=\"${CNODE_HOME}/guild-db/cncli\" # path to the directory for cncli sqlite db #SLEEP_RATE=60 # CNCLI leaderlog/validate: time to wait until next check (in seconds) #CONFIRM_SLOT_CNT=600 # CNCLI validate: require at least these many slots to have passed before validating #CONFIRM_BLOCK_CNT=15 # CNCLI validate: require at least these many blocks on top of minted before validating #TIMEOUT_LEDGER_STATE=300 # CNCLI leaderlog: timeout in seconds for ledger-state query #BATCH_AUTO_UPDATE=N # Set to Y to automatically update the script if a new version is available without user interaction Run \u2693\ufe0e Services are controlled by sudo systemctl <status|start|stop|restart> <service name> All services are configured as child services to cnode.service and as such, when an action is taken against this service it's replicated to all child services. E.g running sudo systemctl start cnode.service will also start all child services. Log output is handled by syslog and end up in the systems standard syslog file, normally /var/log/syslog . journalctl -f -u <service> can be used to check service output (follow mode). Other logging configurations are not covered here. Recommended workflow to get started with CNCLI blocklog. Install and deploy services according to Installation section. Set required user variables according to Configuration section. ( optional ) If a previous blocklog db exist created by cntoolsBlockCollector, run this command to migrate json storage to new SQLite DB: $CNODE_HOME/scripts/cncli.sh migrate <path> where is the location to the directory containing all blocks_ .json files. Start deployed services with: sudo systemctl start cnode-cncli-sync.service (starts leaderlog , validate & ptsendslots automatically) sudo systemctl start cnode-logmonitor.service sudo systemctl start cnode-cncli-ptsendtip.service ( optional but recommended ) alternatively restart the main service that will trigger a start of all services with: sudo systemctl restart cnode.service Run init command to fill the db with all blocks made by your pool known to the blockchain $CNODE_HOME/scripts/cncli.sh init Enjoy full blocklog automation and visit View Blocklog section for instructions on how to show blocks from the blocklog DB. Usage: cncli.sh [operation <sub arg>] Script to run CNCLI, best launched through systemd deployed by 'deploy-as-systemd.sh' sync Start CNCLI chainsync process that connects to cardano-node to sync blocks stored in SQLite DB (deployed as service) leaderlog One-time leader schedule calculation for current epoch, then continuously monitors and calculates schedule for coming epochs, 1.5 days before epoch boundary on the mainnet (deployed as service) force Manually force leaderlog calculation and overwrite even if already done, exits after leaderlog is calculated validate Continuously monitor and confirm that the blocks made actually was accepted and adopted by chain (deployed as service) all One-time re-validation of all blocks in blocklog db epoch One-time re-validation of blocks in blocklog db for the specified epoch ptsendtip Send node tip to PoolTool for network analysis and to show that your node is alive and well with a green badge (deployed as service) ptsendslots Securely sends PoolTool the number of slots you have assigned for an epoch and validates the correctness of your past epochs (deployed as service) init One-time initialization adding all minted and confirmed blocks to blocklog migrate One-time migration from old blocklog (cntoolsBlockCollector) to new format (post cncli) path Path to the old cntoolsBlockCollector blocklog folder holding json files with blocks created View Blocklog \u2693\ufe0e Best and easiest viewed in CNTools and gLiveView but the blocklog database is a SQLite DB so if you are comfortable with SQL, the sqlite3 command can be used to query the DB. Block status - Leader : Scheduled to make block at this slot - Ideal : Expected/Ideal number of blocks assigned based on active stake (sigma) - Luck : Leader slots assigned vs ideal slots for this epoch - Adopted : Block created successfully - Confirmed : Block created validated to be on-chain with the certainty set in cncli.sh for CONFIRM_BLOCK_CNT - Missed : Scheduled at slot but no record of it in CNCLI DB and no other pool has made a block for this slot - Ghosted : Block created but marked as orphaned and no other pool has made a valid block for this slot -> height battle or block propagation issue - Stolen : Another pool has a valid block registered on-chain for the same slot - Invalid : Pool failed to create block, base64 encoded error message can be decoded with echo <base64 hash> | base64 -d | jq -r CNTools Open CNTools and select [b] Blocks to open the block viewer. Either select Epoch and enter the epoch you want to see a detailed view for or choose Summary to display blocks for last x epochs. If the node was elected to create blocks in the selected epoch it could look something like this: Summary >> BLOCKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Current epoch: 96 +--------+---------------------------+----------------------+--------------------------------------+ | Epoch | Leader | Ideal | Luck | Adopted | Confirmed | Missed | Ghosted | Stolen | Invalid | +--------+---------------------------+----------------------+--------------------------------------+ | 96 | 34 | 31.66 | 107.39% | 18 | 18 | 0 | 0 | 0 | 0 | | 95 | 32 | 30.57 | 104.68% | 32 | 32 | 0 | 0 | 0 | 0 | +--------+---------------------------+----------------------+--------------------------------------+ [h] Home | [b] Block View | [i] Info | [*] Refresh Epoch >> BLOCKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Current epoch: 96 +---------------------------+----------------------+--------------------------------------+ | Leader | Ideal | Luck | Adopted | Confirmed | Missed | Ghosted | Stolen | Invalid | +---------------------------+----------------------+--------------------------------------+ | 34 | 31.66 | 107.39% | 18 | 18 | 0 | 0 | 0 | 0 | +---------------------------+----------------------+--------------------------------------+ +-----+------------+----------+---------------------+--------------------------+-------+-------------------------------------------------------------------+ | # | Status | Block | Slot | SlotInEpoch | Scheduled At | Size | Hash | +-----+------------+----------+---------------------+--------------------------+-------+-------------------------------------------------------------------+ | 1 | confirmed | 2043444 | 11142827 | 40427 | 2020-11-16 08:34:03 CET | 3 | ec216d3fb01e4a3cc3e85305145a31875d9561fa3bbcc6d0ee8297236dbb4115 | | 2 | confirmed | 2044321 | 11165082 | 62682 | 2020-11-16 14:44:58 CET | 3 | b75c33a5bbe49a74e4b4cc5df4474398bfb10ed39531fc65ec2acc51f89ddce5 | | 3 | confirmed | 2044397 | 11166970 | 64570 | 2020-11-16 15:16:26 CET | 3 | c1ea37fd72543779b6dab46e3e29e0e422784b5fd6188f828ace9eabcc87088f | | 4 | confirmed | 2044879 | 11178909 | 76509 | 2020-11-16 18:35:25 CET | 3 | 35a116cec80c5dc295415e4fc8e6435c562b14a5d6833027006c988706c60307 | | 5 | confirmed | 2046965 | 11232557 | 130157 | 2020-11-17 09:29:33 CET | 3 | d566e5a1f6a3d78811acab4ae3bdcee6aa42717364f9afecd6cac5093559f466 | | 6 | confirmed | 2047101 | 11235675 | 133275 | 2020-11-17 10:21:31 CET | 3 | 3a638e01f70ea1c4a660fe4e6333272e6c61b11cf84dc8a5a107b414d1e057eb | | 7 | confirmed | 2047221 | 11238453 | 136053 | 2020-11-17 11:07:49 CET | 3 | 843336f132961b94276603707751cdb9a1c2528b97100819ce47bc317af0a2d6 | | 8 | confirmed | 2048692 | 11273507 | 171107 | 2020-11-17 20:52:03 CET | 3 | 9b3eb79fe07e8ebae163870c21ba30460e689b23768d2e5f8e7118c572c4df36 | | 9 | confirmed | 2049058 | 11282619 | 180219 | 2020-11-17 23:23:55 CET | 3 | 643396ea9a1a2b6c66bb83bdc589fa19c8ae728d1f1181aab82e8dfe508d430a | | 10 | confirmed | 2049321 | 11289237 | 186837 | 2020-11-18 01:14:13 CET | 3 | d93d305a955f40b2298247d44e4bc27fe9e3d1486ef3ef3e73b235b25247ccd7 | | 11 | confirmed | 2049747 | 11299205 | 196805 | 2020-11-18 04:00:21 CET | 3 | 19a43deb5014b14760c3e564b41027c5ee50e0a252abddbfcac90c8f56dc0245 | | 12 | confirmed | 2050415 | 11316075 | 213675 | 2020-11-18 08:41:31 CET | 3 | dd2cb47653f3bfb3ccc8ffe76906e07d96f1384bafd57a872ddbab3b352403e3 | | 13 | confirmed | 2050505 | 11318274 | 215874 | 2020-11-18 09:18:10 CET | 3 | deb834bc42360f8d39eefc5856bb6d7cabb6b04170c842dcbe7e9efdf9dbd2e1 | | 14 | confirmed | 2050613 | 11320754 | 218354 | 2020-11-18 09:59:30 CET | 3 | bf094f6fde8e8c29f568a253201e4b92b078e9a1cad60706285e236a91ec95ff | | 15 | confirmed | 2050807 | 11325239 | 222839 | 2020-11-18 11:14:15 CET | 3 | 21f904346ba0fd2bb41afaae7d35977cb929d1d9727887f541782576fc6a62c9 | | 16 | confirmed | 2050997 | 11330062 | 227662 | 2020-11-18 12:34:38 CET | 3 | 109799d686fe3cad13b156a2d446a544fde2bf5d0e8f157f688f1dc30f35e912 | | 17 | confirmed | 2051286 | 11336791 | 234391 | 2020-11-18 14:26:47 CET | 3 | bb1beca7a1d849059110e3d7dc49ecf07b47970af2294fe73555ddfefb9561a8 | | 18 | confirmed | 2051734 | 11348498 | 246098 | 2020-11-18 17:41:54 CET | 3 | 87940b53c2342999c1ba4e185038cda3d8382891a16878a865f5114f540683de | | 19 | leader | - | 11382001 | 279601 | 2020-11-19 03:00:17 CET | - | - | | 20 | leader | - | 11419959 | 317559 | 2020-11-19 13:32:55 CET | - | - | | 21 | leader | - | 11433174 | 330774 | 2020-11-19 17:13:10 CET | - | - | | 22 | leader | - | 11434241 | 331841 | 2020-11-19 17:30:57 CET | - | - | | 23 | leader | - | 11435289 | 332889 | 2020-11-19 17:48:25 CET | - | - | | 24 | leader | - | 11440314 | 337914 | 2020-11-19 19:12:10 CET | - | - | | 25 | leader | - | 11442361 | 339961 | 2020-11-19 19:46:17 CET | - | - | | 26 | leader | - | 11443861 | 341461 | 2020-11-19 20:11:17 CET | - | - | | 27 | leader | - | 11446997 | 344597 | 2020-11-19 21:03:33 CET | - | - | | 28 | leader | - | 11453110 | 350710 | 2020-11-19 22:45:26 CET | - | - | | 29 | leader | - | 11455323 | 352923 | 2020-11-19 23:22:19 CET | - | - | | 30 | leader | - | 11505987 | 403587 | 2020-11-20 13:26:43 CET | - | - | | 31 | leader | - | 11514983 | 412583 | 2020-11-20 15:56:39 CET | - | - | | 32 | leader | - | 11516010 | 413610 | 2020-11-20 16:13:46 CET | - | - | | 33 | leader | - | 11518958 | 416558 | 2020-11-20 17:02:54 CET | - | - | | 34 | leader | - | 11533254 | 430854 | 2020-11-20 21:01:10 CET | - | - | +-----+------------+----------+---------------------+--------------------------+-------+-------------------------------------------------------------------+ gLiveView Currently shows a block summary for current epoch. For full block details use CNTools for now. Invalid, missing, ghosted and stolen blocks only shown in case of a non-zero value. \u2502--------------------------------------------------------------\u2502 \u2502 BLOCKS Leader | Ideal | Luck | Adopted | Confirmed \u2502 \u2502 24 27.42 87.53% 1 1 \u2502 \u2502 08:07:57 until leader XXXXXXXXX.....................\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"CNCLI"},{"location":"Scripts/cncli/#installation","text":"cncli.sh script's main functions, sync , leaderlog , validate and PoolTool sendslots / sendtip are not meant to be run manually, but instead deployed as systemd services that run in the background to do the block scraping and validation automatically. Additional commands exist for manual execution to initiate the sqlite db, filling the blocklog DB with all blocks created by the pool known to the blockchain, migration of old cntoolsBlockCollector JSON blocklog, and re-validation of blocks and leaderlogs. See usage output below for a complete list of available commands. The script works in tandem with Log Monitor to provide faster adopted status but mainly to catch slots the node is leader for but are unable to create a block for. These are marked as invalid. Blocklog will however work fine without the logMonitor service and CNCLI is able to handle everything except catching invalid blocks. Run the latest version of prereqs.sh with prereqs.sh -c to download and install RUST and CNCLI. IOG fork of libsodium required by CNCLI is automatically compiled by CNCLI build process. If a previous installation is found, RUST and CNCLI will be updated to the latest version. Run deploy-as-systemd.sh to deploy the systemd services that handle all the work in the background. Six systemd services in total are deployed whereof four are related to CNCLI. See above for the different purposes they serve. If you want to disable some of the deployed services, run sudo systemctl disable <service> cnode.service (main cardano-node launcher) cnode-cncli-sync.service cnode-cncli-leaderlog.service cnode-cncli-validate.service cnode-cncli-ptsendtip.service cnode-cncli-ptsendslots.service cnode-logmonitor.service (see Log Monitor )","title":"Installation"},{"location":"Scripts/cncli/#configuration","text":"You can override the values in the script at the User Variables section shown below. POOL_ID , POOL_VRF_SKEY and POOL_VRF_VKEY should automatically be detected if POOL_NAME is set in the common env file and can be left commented. PT_API_KEY and POOL_TICKER need to be set in the script if PoolTool sendtip / sendslots are to be used before starting the services. For the rest of the commented values, if the defaults do not provide the right values, uncomment and make adjustments. #POOL_ID=\"\" # Automatically detected if POOL_NAME is set in env. Required for leaderlog calculation & pooltool sendtip, lower-case hex pool id #POOL_VRF_SKEY=\"\" # Automatically detected if POOL_NAME is set in env. Required for leaderlog calculation, path to pool's vrf.skey file #POOL_VRF_VKEY=\"\" # Automatically detected if POOL_NAME is set in env. Required for block validation, path to pool's vrf.vkey file #PT_API_KEY=\"\" # POOLTOOL sendtip: set API key, e.g \"a47811d3-0008-4ecd-9f3e-9c22bdb7c82d\" #POOL_TICKER=\"\" # POOLTOOL sendtip: set the pools ticker, e.g. \"TCKR\" #PT_HOST=\"127.0.0.1\" # POOLTOOL sendtip: connect to a remote node, preferably block producer (default localhost) #PT_PORT=\"${CNODE_PORT}\" # POOLTOOL sendtip: port of node to connect to (default is CNODE_PORT from the env file) #CNCLI_DIR=\"${CNODE_HOME}/guild-db/cncli\" # path to the directory for cncli sqlite db #SLEEP_RATE=60 # CNCLI leaderlog/validate: time to wait until next check (in seconds) #CONFIRM_SLOT_CNT=600 # CNCLI validate: require at least these many slots to have passed before validating #CONFIRM_BLOCK_CNT=15 # CNCLI validate: require at least these many blocks on top of minted before validating #TIMEOUT_LEDGER_STATE=300 # CNCLI leaderlog: timeout in seconds for ledger-state query #BATCH_AUTO_UPDATE=N # Set to Y to automatically update the script if a new version is available without user interaction","title":"Configuration"},{"location":"Scripts/cncli/#run","text":"Services are controlled by sudo systemctl <status|start|stop|restart> <service name> All services are configured as child services to cnode.service and as such, when an action is taken against this service it's replicated to all child services. E.g running sudo systemctl start cnode.service will also start all child services. Log output is handled by syslog and end up in the systems standard syslog file, normally /var/log/syslog . journalctl -f -u <service> can be used to check service output (follow mode). Other logging configurations are not covered here. Recommended workflow to get started with CNCLI blocklog. Install and deploy services according to Installation section. Set required user variables according to Configuration section. ( optional ) If a previous blocklog db exist created by cntoolsBlockCollector, run this command to migrate json storage to new SQLite DB: $CNODE_HOME/scripts/cncli.sh migrate <path> where is the location to the directory containing all blocks_ .json files. Start deployed services with: sudo systemctl start cnode-cncli-sync.service (starts leaderlog , validate & ptsendslots automatically) sudo systemctl start cnode-logmonitor.service sudo systemctl start cnode-cncli-ptsendtip.service ( optional but recommended ) alternatively restart the main service that will trigger a start of all services with: sudo systemctl restart cnode.service Run init command to fill the db with all blocks made by your pool known to the blockchain $CNODE_HOME/scripts/cncli.sh init Enjoy full blocklog automation and visit View Blocklog section for instructions on how to show blocks from the blocklog DB. Usage: cncli.sh [operation <sub arg>] Script to run CNCLI, best launched through systemd deployed by 'deploy-as-systemd.sh' sync Start CNCLI chainsync process that connects to cardano-node to sync blocks stored in SQLite DB (deployed as service) leaderlog One-time leader schedule calculation for current epoch, then continuously monitors and calculates schedule for coming epochs, 1.5 days before epoch boundary on the mainnet (deployed as service) force Manually force leaderlog calculation and overwrite even if already done, exits after leaderlog is calculated validate Continuously monitor and confirm that the blocks made actually was accepted and adopted by chain (deployed as service) all One-time re-validation of all blocks in blocklog db epoch One-time re-validation of blocks in blocklog db for the specified epoch ptsendtip Send node tip to PoolTool for network analysis and to show that your node is alive and well with a green badge (deployed as service) ptsendslots Securely sends PoolTool the number of slots you have assigned for an epoch and validates the correctness of your past epochs (deployed as service) init One-time initialization adding all minted and confirmed blocks to blocklog migrate One-time migration from old blocklog (cntoolsBlockCollector) to new format (post cncli) path Path to the old cntoolsBlockCollector blocklog folder holding json files with blocks created","title":"Run"},{"location":"Scripts/cncli/#view-blocklog","text":"Best and easiest viewed in CNTools and gLiveView but the blocklog database is a SQLite DB so if you are comfortable with SQL, the sqlite3 command can be used to query the DB. Block status - Leader : Scheduled to make block at this slot - Ideal : Expected/Ideal number of blocks assigned based on active stake (sigma) - Luck : Leader slots assigned vs ideal slots for this epoch - Adopted : Block created successfully - Confirmed : Block created validated to be on-chain with the certainty set in cncli.sh for CONFIRM_BLOCK_CNT - Missed : Scheduled at slot but no record of it in CNCLI DB and no other pool has made a block for this slot - Ghosted : Block created but marked as orphaned and no other pool has made a valid block for this slot -> height battle or block propagation issue - Stolen : Another pool has a valid block registered on-chain for the same slot - Invalid : Pool failed to create block, base64 encoded error message can be decoded with echo <base64 hash> | base64 -d | jq -r CNTools Open CNTools and select [b] Blocks to open the block viewer. Either select Epoch and enter the epoch you want to see a detailed view for or choose Summary to display blocks for last x epochs. If the node was elected to create blocks in the selected epoch it could look something like this: Summary >> BLOCKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Current epoch: 96 +--------+---------------------------+----------------------+--------------------------------------+ | Epoch | Leader | Ideal | Luck | Adopted | Confirmed | Missed | Ghosted | Stolen | Invalid | +--------+---------------------------+----------------------+--------------------------------------+ | 96 | 34 | 31.66 | 107.39% | 18 | 18 | 0 | 0 | 0 | 0 | | 95 | 32 | 30.57 | 104.68% | 32 | 32 | 0 | 0 | 0 | 0 | +--------+---------------------------+----------------------+--------------------------------------+ [h] Home | [b] Block View | [i] Info | [*] Refresh Epoch >> BLOCKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Current epoch: 96 +---------------------------+----------------------+--------------------------------------+ | Leader | Ideal | Luck | Adopted | Confirmed | Missed | Ghosted | Stolen | Invalid | +---------------------------+----------------------+--------------------------------------+ | 34 | 31.66 | 107.39% | 18 | 18 | 0 | 0 | 0 | 0 | +---------------------------+----------------------+--------------------------------------+ +-----+------------+----------+---------------------+--------------------------+-------+-------------------------------------------------------------------+ | # | Status | Block | Slot | SlotInEpoch | Scheduled At | Size | Hash | +-----+------------+----------+---------------------+--------------------------+-------+-------------------------------------------------------------------+ | 1 | confirmed | 2043444 | 11142827 | 40427 | 2020-11-16 08:34:03 CET | 3 | ec216d3fb01e4a3cc3e85305145a31875d9561fa3bbcc6d0ee8297236dbb4115 | | 2 | confirmed | 2044321 | 11165082 | 62682 | 2020-11-16 14:44:58 CET | 3 | b75c33a5bbe49a74e4b4cc5df4474398bfb10ed39531fc65ec2acc51f89ddce5 | | 3 | confirmed | 2044397 | 11166970 | 64570 | 2020-11-16 15:16:26 CET | 3 | c1ea37fd72543779b6dab46e3e29e0e422784b5fd6188f828ace9eabcc87088f | | 4 | confirmed | 2044879 | 11178909 | 76509 | 2020-11-16 18:35:25 CET | 3 | 35a116cec80c5dc295415e4fc8e6435c562b14a5d6833027006c988706c60307 | | 5 | confirmed | 2046965 | 11232557 | 130157 | 2020-11-17 09:29:33 CET | 3 | d566e5a1f6a3d78811acab4ae3bdcee6aa42717364f9afecd6cac5093559f466 | | 6 | confirmed | 2047101 | 11235675 | 133275 | 2020-11-17 10:21:31 CET | 3 | 3a638e01f70ea1c4a660fe4e6333272e6c61b11cf84dc8a5a107b414d1e057eb | | 7 | confirmed | 2047221 | 11238453 | 136053 | 2020-11-17 11:07:49 CET | 3 | 843336f132961b94276603707751cdb9a1c2528b97100819ce47bc317af0a2d6 | | 8 | confirmed | 2048692 | 11273507 | 171107 | 2020-11-17 20:52:03 CET | 3 | 9b3eb79fe07e8ebae163870c21ba30460e689b23768d2e5f8e7118c572c4df36 | | 9 | confirmed | 2049058 | 11282619 | 180219 | 2020-11-17 23:23:55 CET | 3 | 643396ea9a1a2b6c66bb83bdc589fa19c8ae728d1f1181aab82e8dfe508d430a | | 10 | confirmed | 2049321 | 11289237 | 186837 | 2020-11-18 01:14:13 CET | 3 | d93d305a955f40b2298247d44e4bc27fe9e3d1486ef3ef3e73b235b25247ccd7 | | 11 | confirmed | 2049747 | 11299205 | 196805 | 2020-11-18 04:00:21 CET | 3 | 19a43deb5014b14760c3e564b41027c5ee50e0a252abddbfcac90c8f56dc0245 | | 12 | confirmed | 2050415 | 11316075 | 213675 | 2020-11-18 08:41:31 CET | 3 | dd2cb47653f3bfb3ccc8ffe76906e07d96f1384bafd57a872ddbab3b352403e3 | | 13 | confirmed | 2050505 | 11318274 | 215874 | 2020-11-18 09:18:10 CET | 3 | deb834bc42360f8d39eefc5856bb6d7cabb6b04170c842dcbe7e9efdf9dbd2e1 | | 14 | confirmed | 2050613 | 11320754 | 218354 | 2020-11-18 09:59:30 CET | 3 | bf094f6fde8e8c29f568a253201e4b92b078e9a1cad60706285e236a91ec95ff | | 15 | confirmed | 2050807 | 11325239 | 222839 | 2020-11-18 11:14:15 CET | 3 | 21f904346ba0fd2bb41afaae7d35977cb929d1d9727887f541782576fc6a62c9 | | 16 | confirmed | 2050997 | 11330062 | 227662 | 2020-11-18 12:34:38 CET | 3 | 109799d686fe3cad13b156a2d446a544fde2bf5d0e8f157f688f1dc30f35e912 | | 17 | confirmed | 2051286 | 11336791 | 234391 | 2020-11-18 14:26:47 CET | 3 | bb1beca7a1d849059110e3d7dc49ecf07b47970af2294fe73555ddfefb9561a8 | | 18 | confirmed | 2051734 | 11348498 | 246098 | 2020-11-18 17:41:54 CET | 3 | 87940b53c2342999c1ba4e185038cda3d8382891a16878a865f5114f540683de | | 19 | leader | - | 11382001 | 279601 | 2020-11-19 03:00:17 CET | - | - | | 20 | leader | - | 11419959 | 317559 | 2020-11-19 13:32:55 CET | - | - | | 21 | leader | - | 11433174 | 330774 | 2020-11-19 17:13:10 CET | - | - | | 22 | leader | - | 11434241 | 331841 | 2020-11-19 17:30:57 CET | - | - | | 23 | leader | - | 11435289 | 332889 | 2020-11-19 17:48:25 CET | - | - | | 24 | leader | - | 11440314 | 337914 | 2020-11-19 19:12:10 CET | - | - | | 25 | leader | - | 11442361 | 339961 | 2020-11-19 19:46:17 CET | - | - | | 26 | leader | - | 11443861 | 341461 | 2020-11-19 20:11:17 CET | - | - | | 27 | leader | - | 11446997 | 344597 | 2020-11-19 21:03:33 CET | - | - | | 28 | leader | - | 11453110 | 350710 | 2020-11-19 22:45:26 CET | - | - | | 29 | leader | - | 11455323 | 352923 | 2020-11-19 23:22:19 CET | - | - | | 30 | leader | - | 11505987 | 403587 | 2020-11-20 13:26:43 CET | - | - | | 31 | leader | - | 11514983 | 412583 | 2020-11-20 15:56:39 CET | - | - | | 32 | leader | - | 11516010 | 413610 | 2020-11-20 16:13:46 CET | - | - | | 33 | leader | - | 11518958 | 416558 | 2020-11-20 17:02:54 CET | - | - | | 34 | leader | - | 11533254 | 430854 | 2020-11-20 21:01:10 CET | - | - | +-----+------------+----------+---------------------+--------------------------+-------+-------------------------------------------------------------------+ gLiveView Currently shows a block summary for current epoch. For full block details use CNTools for now. Invalid, missing, ghosted and stolen blocks only shown in case of a non-zero value. \u2502--------------------------------------------------------------\u2502 \u2502 BLOCKS Leader | Ideal | Luck | Adopted | Confirmed \u2502 \u2502 24 27.42 87.53% 1 1 \u2502 \u2502 08:07:57 until leader XXXXXXXXX.....................\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"View Blocklog"},{"location":"Scripts/cntools-changelog/","text":"All notable changes to this tool will be documented in this file. Whenever you're updating between versions where format/hash of keys have changed , or you're changing networks - it is recommended to Backup your Wallet and Pool folders before you proceed with launching cntools on a fresh network. The format is based on Keep a Changelog , and this adheres to Semantic Versioning . [8.4.13] - 2021-07-08 \u2693\ufe0e Changed \u2693\ufe0e Documentation references updated to new site layout [8.4.12] - 2021-06-28 \u2693\ufe0e Fixed \u2693\ufe0e Pre-source env in offline/online mode for checkUpdate depending on argument provided to cntools.sh [8.4.11] - 2021-06-25 \u2693\ufe0e Changed \u2693\ufe0e KES calculation moved from CNTools & gLiveView into a common function in env file. For online mode node metrics is used for KES expiration instead of static pool KES start period. General message metadata support added to 'funds >> send' according to CIP-0020. [8.4.10] - 2021-06-15 \u2693\ufe0e Fixed \u2693\ufe0e Fix display issue for CLI that were upgraded to Alonzo-Blue networks [8.4.9] - 2021-06-15 \u2693\ufe0e Changed \u2693\ufe0e Handle Various updates to pgrest queries [disabled] to make them independent of instances. Note: Version incremented thrice on PR branch itself [8.4.6] - 2021-06-04 \u2693\ufe0e Fixed \u2693\ufe0e Add balance check for main pool owner, that there is at least one utxo available Allow utxo without lovelace (for future when we might have tokens on utxo without Ada, like on Alonzo TestNet) pctToFraction helper function didn't properly handle 0 value [8.4.5] - 2021-05-31 \u2693\ufe0e Fixed \u2693\ufe0e Reset IFS at main loop, fixes invalid tip difference on home screen after going to Block > Summary [8.4.4] - 2021-05-19 \u2693\ufe0e Fixed \u2693\ufe0e Typo in Ledger ledger version requirement error and make it clearer that its the app version, not fw version. [8.4.3] - 2021-05-17 \u2693\ufe0e Fixed \u2693\ufe0e Token Mint/Burn script file signing not completely removed in all places (1.27.0 change) [8.4.2] - 2021-05-16 \u2693\ufe0e Fixed \u2693\ufe0e cardano-hw-cli version limited to 1.2.0 for current Trezor fw v2.3.6. Please manually downgrade version, available at https://github.com/vacuumlabs/cardano-hw-cli/releases , placing files in $HOME/bin/cardano-hw-cli [8.4.1] - 2021-05-16 \u2693\ufe0e Changed \u2693\ufe0e Wallet >> Show no longer require payment.vkey to be present, as long as either payment or base .addr file(s) exist [8.4.0] - 2021-05-16 \u2693\ufe0e Added \u2693\ufe0e Compatibility with cardano-address 3.4.0 (while retaining support for 2.1.0) [8.3.0] - 2021-05-15 \u2693\ufe0e Added \u2693\ufe0e New env variable called PGREST_API and if set and reachable, used instead of local node queries and for advanced modes New library function isPoolRegistered() for verifying if a pool is registered or not using either simple reg cert file detection (if REST API not set/reachable) or proper dbsync lookup using REST API. Used by Pool >> Show|List|Register|Modify Option to mint/burn assets in hybrid mode Transaction >> Sign now automatically tries to find the correct signing keys instead of having the user manually select the correct files ** ADVANCED FEATURE ** - Chain Queries Menu is dynamically built based on queries(JSON files) in DBSYNC_QUERY_FOLDER (env variable, default files/dbsync/queries) three levels deep. A download option lets the user download the latest uploaded queries on Guild Operators GitHub site. Query files Contains menu path, description, variables, and queries(multiple) Executes a predefined DBSync RPC/function through PostgREST API Variables used in RPC call can either be user input, CNTools variables like EKG metrics, or an item in the result from a previous query(in the same query file) Result from RPC call can either be printed or silent(only to be used for later query) Output is printed as JSON Changed \u2693\ufe0e Minimum node version bumped to 1.27.0 Menu has been re-designed with both back & home options. Instead of returning to home menu after the completed operation user is returned to the last menu. Pool >> Show now use PostgREST API(if set), or the new pool-params cli query as fallback method. Fixed \u2693\ufe0e 1.27.0 introduced a few changes in CLI commands for assets minting/burning [8.2.2] - 2021-05-02 \u2693\ufe0e Fixed \u2693\ufe0e KES expiration date fix [8.2.1] - 2021-04-26 \u2693\ufe0e Changed \u2693\ufe0e Make use of UPDATE_CHECK environment variable to skip any checks to internet by default [8.2.0] - 2021-04-18 \u2693\ufe0e Added \u2693\ufe0e Ability to create & update a Cardano Token Registry submission JSON file Requires 'token-metadata-creator' tool, instructions to download/build this tool added to Guild Operators documentation: https://cardano-community.github.io/guild-operators/Build/offchainMetadataTools Token Registry lookup in Wallet >> Show Token asset fingerprint generation according to https://github.com/cardano-foundation/CIPs/pull/64 Changed \u2693\ufe0e Redesigned input handling to be more flexible and improve output [8.1.6] - 2021-04-14 \u2693\ufe0e Changed \u2693\ufe0e Metadata creation now offer the choice to add a metadata JSON scaffold to see the required structure Fixed \u2693\ufe0e Fixed metadata creation entering JSON metadata through text editor [8.1.5] - 2021-04-09 \u2693\ufe0e Fixed \u2693\ufe0e Offline mode fix to ignore error when sourcing env [8.1.4] - 2021-04-05 \u2693\ufe0e Changed \u2693\ufe0e Enhanced minimum utxo calculation (credits to Martin providing this) based on calculations from https://github.com/input-output-hk/cardano-ledger-specs/blob/master/doc/explanations/min-utxo.rst Validation of wallet address balance on transactions improved [8.1.3] - 2021-04-01 \u2693\ufe0e Fixed \u2693\ufe0e Alignment fix in blocks table [8.1.2] - 2021-03-31 \u2693\ufe0e Changed \u2693\ufe0e Manual CNTools update replaced with automatic by asking to update on startup like the rest of the scripts in the guild repository. Changelog truncated up to v6.0.0. Minor and patch version changelog entries merged with next major release changelog. [8.1.1] - 2021-03-30 \u2693\ufe0e Fixed \u2693\ufe0e Relay registration condition Version number [8.1.0] - 2021-03-26 \u2693\ufe0e Added \u2693\ufe0e IPv6 support in pool registration/modification Changed \u2693\ufe0e Wallet delegation now lets you specify Pool ID in addition to local CNTools pool instead of previous cold.vkey cbor string A couple of functions regarding number validation moved to common env file Code adapted for changes in ledger-state dump used by 'Pool >> Show' Fixed \u2693\ufe0e Backup & restore now exclude gpg encrypted keys from online backup and suppression of false alarms [8.0.2] - 2021-03-15 \u2693\ufe0e Fixed \u2693\ufe0e Bump cardano-hw-cli minimum version to 1.2.0 Add Ledger Cardano app version check with minimum enforced version of 2.2.0 Add Trezor firmware check with minimum enforced version of 2.3.6 [8.0.1] - 2021-03-05 \u2693\ufe0e Fixed \u2693\ufe0e Add BASH version check, version 4.4 or newer required [8.0.0] - 2021-02-28 \u2693\ufe0e Added \u2693\ufe0e Multi Asset Token compatibility added throughout all CNTools operations. Sending Ada and custom tokens is done through the normal 'Funds >> Send' operation Changed \u2693\ufe0e Metadata moved to a new Advanced section used for devs/advanced operations not normally used by SPOs. Accessed by enabling developer/advanced mode in cntools.config or by providing runtime flag '-a' Redesign of backup and restore. Deletion of private keys moved from backup to new section under Advanced Backup now only contain content of priv folder (files & scripts folders dropped) Restore operation now restore directly to priv folder instead of a random user selected folder to make restore easier and better. Before restore, a new full backup of priv folder is made and stored encrypted in priv/archive Fixed \u2693\ufe0e JQ limitation workaround for large numbers Dialog compatibility improvement by preventing dialog launching a subshell on some systems causing dialog not to run [7.1.6] - 2021-02-10 \u2693\ufe0e Update curl commands when file isnt downloaded correctly (to give correct return code) [7.1.5] - 2021-02-03 \u2693\ufe0e Changed \u2693\ufe0e Guild Announcement/Support Telegram channel added to CNTools GUI Fixed \u2693\ufe0e Fix for a special case using an incomplete wallet (missing stake keys) [7.1.4] - 2021-02-01 \u2693\ufe0e Fixed \u2693\ufe0e Typo in function name after harmonization between scripts [7.1.3] - 2021-01-30 \u2693\ufe0e Fixed \u2693\ufe0e Vacuumlabs cardano-hw-cli 1.1.3 support, now the minimum supported version Improved error handling [7.1.1] - 2021-01-29 \u2693\ufe0e Changed \u2693\ufe0e Minor change to future update notification for common env file [7.1.0] - 2021-01-29 \u2693\ufe0e Changed \u2693\ufe0e Remove ChainDB metrics references to align with cardano-node 1.25.1 Moved some functions to env for reusability between tools [7.0.2] - 2021-01-17 \u2693\ufe0e Changed \u2693\ufe0e Re-add the option in offline workflow to use wallet folder that only contains stake keys for multi-owner pools Fixed \u2693\ufe0e Verification of signing key in offline mode for extended signing keys (mnemonics imported wallets) [7.0.1] - 2021-01-13 \u2693\ufe0e Changed \u2693\ufe0e Add prompt before updating common env file, instead of auto-update [7.0.0] - 2021-01-11 \u2693\ufe0e Though mostly unchanged in the user interface, this is a major update with most of the code re-written/touched in the back-end. Only the most noticeable changes added to changelog. Added \u2693\ufe0e HW Wallet support through Vacuumlabs cardano-hw-cli (Ledger Nano X/S & Trezor T) Vacuumlabs cardano-hw-cli added as build option to prereqs.sh, option '-w' incl Ledger udev rules. Software from Vacuumlabs and Ledger app still early in development and may contain limitations that require workarounds. Users are recommended to familiarise their usage using test wallets first. Because of HW wallet support, transaction signing has been re-designed. For CLI and HW wallet pool reg, raw tx is first witnessed by all signing keys separately and then assembled and signed instead of signing directly with all signing keys. But for all other HW wallet transactions, signing is done directly without first witnessing. Requires updated Cardano app in Ledger/Trezor set to be released in January 2021 to use in pool registration/modification. Option added to disable Dialog for file/dir input in cntools.config Changed \u2693\ufe0e Logging completely re-designed from the ground. Previous selective logging wasn't very useful. All output(almost) now outputted to both the screen and to a timestamped log file. One log file is created per CNTools session. Old log file archived in logs/archive subfolder and last 10 log files kept, rest is pruned on CNTools startup. DEBUG : Verbose output, most output printed on screen is logged as debug messages except explicitly disabled, like menu printing. INFO : Informational and the most important output. ACTION : e.g cardano-cli executions etc ERROR : error messages and stderr output Verbosity setting in cntools.config removed. Offline workflow now use a single JSON transaction file holding all data needed. This allows us to bake in additional data in the JSON file in addition to the tx body to make it much more clear what the offline transaction do. Like signing key verification, transaction data like fee, source wallet, pool name etc. It also lets the user know on offline computer what signing keys is needed to sign the transaction. Sign Tx moved to Transaction >> Sign Submit Tx moved to Transaction >> Submit Fixed \u2693\ufe0e Remove intermediate prompt for showing changelog, so that it's directly visible. [6.3.1] - 2020-12-14 \u2693\ufe0e Fixed \u2693\ufe0e Array expansion not correctly handled for multi-owner signing keys KES rotation output fix in OFFLINE mode, op.cert should be copied, not cold.counter Output and file explorer workflow redesigned a bit for a better flow formatLovelace() thousand separator fix after forcing locale to C.UTF-8 in env formatAda() function added to pretty print pledge and cost w/o Lovelace [6.3.0] - 2020-12-03 \u2693\ufe0e Changed \u2693\ufe0e printTable function replaced with bash printf due to compatibility issues Improved workflow in pool registration/modification for relays and multi-owner. Standardized names for wallet and pool files/folders moved to env file from cntools.config Compatibility with 1.24.2 node (accomodate ledger schema and CLI changes), use 1.24.2 as baseline Move version check to env Fixed \u2693\ufe0e Error output for prerequisite checks [6.2.1] - 2020-11-28 \u2693\ufe0e Changed \u2693\ufe0e Compatibility changes for cardano-node 1.23.0, now minimum version to run CNTools 6.2.1 Cleanup of old code [6.2.0] - (alpha branch) \u2693\ufe0e Added \u2693\ufe0e Ability to post metadata on-chain, e.g. (but not limited to) Adams https://vote.crypto2099.io/ Changed \u2693\ufe0e Blocks view updated to adapt to the added CNCLI integration and changes made to block collector(logMonitor) CNCLI Log Monitor chattr file locking now optional to use, a new setting in cntools.config added for it. Fixed \u2693\ufe0e unnecessary bech32 conversion in wallet import (non-breaking) [6.1.0] - 2020-10-22 \u2693\ufe0e Added \u2693\ufe0e Wallet de-registration with key deposit refund (new cntools.config parameter, WALLET_STAKE_DEREG_FILENAME) Default values loaded for all config variables if omitted/missing in cntools.config Changed \u2693\ufe0e Prometheus node metrics replaced with EKG Allow and handle missing pool.config in pool >> modify and show Cancel and return added in several helper functions if cardano-cli execution fails Various tweaks to the output Fixed \u2693\ufe0e Script execution permissions after internal update Handle redirect in curl metadata fetch [6.0.3] - 2020-10-16 \u2693\ufe0e Fixed \u2693\ufe0e Shelley epoch transition calculation used the wrong byron metric in the calculation [6.0.2] - 2020-10-16 \u2693\ufe0e Fixed \u2693\ufe0e Internal update had the wrong path to env file breaking automatic update, please use prereqs.sh to update Fix in 6.0.1 broke pool id retrieval, now compatible with both pre and post cardano-node 1.21.2 syntax. [6.0.1] - 2020-10-16 \u2693\ufe0e Fixed \u2693\ufe0e As per change to cardano-cli syntax, pool ID requires --cold-verification-key-file instead of --verification-key-file [6.0.0] - 2020-10-15 \u2693\ufe0e This is a major release with a lot of changes. It is highly recommended that you familiarise yourself with the usage for Hybrid or Online v/s Offline mode on a testnet environment before doing it on production. Please visit https://cardano-community.github.io/guild-operators/upgrade for details. Added \u2693\ufe0e Allow CNTools to operate in offline mode. Offline features include: Simplified Walet Show/List menu Wallet delete without balance check option Pool KES Rotation Sign a staging transaction. Allow creation of staging tx files using ttl as input in an online/offline-hybrid mode, that can be sent to offline server to sign. To Transfer Funds Withdraw Rewards Delegate Register/Modify/Retire pool Allow import of a signed transaction to submit in online mode Allow import of 15/24 words based wallets. Note that you'd need cardano-address and bech32 in yout $PATH to use this feature (available if you rebuild cardano-node using updated cabal-build-all.sh ), reusing guide from @ilap . Backup now offer the ability to create an online backup without wallet payment/stake and pool cold sign keys Regular(offline) backup now display a warning if wallet payment/stake and pool cold sign keys are missing due to being deleted manually or by previous backup Retire notification in pool >> show Sanity check before launching a second instance of cnode.sh Doc update to run cnode.sh as a systemd service Use secure remove ( srm ) when available when deleting files. Balance check notification added before wallet selection menus are shown to know that work is done in the background Ability to select a different pool owner and reward wallet Multi-owner support using stake vkey/skey files Added TIMEOUT_LEDGER_STATE(default 300s) in cntools.config to be used instead of static 60 seconds for querying shelley ledger-state. Option to delete private keys after successful backup itnRewards.sh script to claim ITN rewards incl docs update More explicit error messages at startup Basic sanity checks for socket file Backup & Restore of wallets, pools and configuration files External KES rotation script using CNTools library Add few flags to control prereqs to allow skipping overwriting files, deploying OS packages, etc cntools.sh: Drop an error if log not found, indicating config with no JSON being used Changed \u2693\ufe0e Improved trap/exit handling Allow thousand separator( , ) in user input for sending ADA and pledge/cost at pool registration to make it easier to count the zeros User input for files and directories now open a dialog gui to make it easier to find the correct path CNTools now uses and works with cardano-node 1.19.0 , please upgrade if you're not using this version. Use manual calculation based on slot tip to get KES period Removed ledger dump dependency from Pool Register, Modify, Retire and List. The cost of the ledger dump is too high, replaced with a simple check if pools registration certificate exist in pool folder Pool >> Show|Delegators are now the only options dumping the ledger-state Wallet vkeys no longer encrypted as skeys are the only ones in need of protection Update command change (change applied after this release is active): Minor/Patch release: it will warn, backup and replace CNTools script files including cntools.config Major release: No change, prompt user to backup and run prereqs.sh according to instructions. Troubleshooting improvements: Split 'config in json format' and 'hasPrometheus' checks Output node sync stats if Shelley transition epoch is to be calculated Protocol parameters output check to give an improved error message Pool >> Show view updated to show modified pool values if Pool >> Modify has been used to update pool parameters The section has also been updated to make it a little bit easier to read Pool >> Delegators view also use updated pledge value if a pool modification has been registered to check if pledge is met Use mainnet as default, since other testnets are either retired or not being maintained :( Backup original files when doing upgrades, so that users do not lose their changes. Major update description updated env file update removed from minor update Prometheus metrics used for various functions and now required to run CNTools, enabled by default Changed references to ptn0 to generalize the usage Change CNTools changelog heading format - +1 sublevels for headings (used by newer documentation) Delegators previously displayed in Pool >> Show now moved to its own menu option This is to de-clutter and because it takes time to parse this data from ledger-state stake.cert no longer encrypted in wallet Meta description now has a limit of 255 chars to match smash server limit ledger-state timeout increased to 60s Update ptn0 config to align with hydra config as much as possible, while keeping trace options on moved update check to be one of the first things CNTools does after start to be able to show critical changes before anything else runs. Parse node logs to check the transition from Byron to shelley era, and save the epoch for transition in db folder. This is required for calculating KES keys. Please make sure to use config files created by the prereqs.sh, or enable JSON loggers for your config . Update cnode.sh.templ to archive logs every time node is restart, this ensures that we're not searching for previous log history when network was changed. Network being changed would automatically deduce db folder was deleted. Update default network to MC3 Removed \u2693\ufe0e Pool >> Delegators removed. If/when a better option than dumping and parsing ledger-state dump arise re-adding it will be considered. Utilize the community explorers listed at https://cardano-community.github.io/support-faq/explorers POOL_PLEDGECERT_FILENAME removed from config, WALLET_DELEGCERT_FILENAME is used instead for delegation cert to pool, no need to keep a separate cert in pool folder for this, its the wallet that is delegated. Redundant sections in guide Stale delegate.counter Fixed \u2693\ufe0e Check pool >> show stake distribution showing up as always 0. KES expiration calculation Slot interval calculation Custom vname replacement(when using prereqs.sh -t ) fix for internal update Pool registration and de-registration certificates removed in case of retire/re-registration KES Expiry to use KES Period instead of Epoch duration Block Collector script adapted for cardano-node 1.19.0. Block hash is now truncated in log, issue https://github.com/input-output-hk/cardano-node/issues/1738 High cpu usage reported in a few cases when running Block Collector Depending on log level, parsing and byte64 enc each entry with jq could potentially put high load on weaker systems. Replaced with grep to only parse entries containing specific traces. Docs for creating systemd block collector service file updated to include user env in run command cardano-node 1.19.0 introduced an issue that required us to use KES as current - 1 while rotating. A new getPoolID helper function added to extract both hex and bech32 pool ID Added --output-format hex when extracting pool ID in hex format A new pool.id-bech32 file gets created if cold.vkey is available and decrypted Added error check to see if cardano-cli is in $PATH before continuing. Backup & Restore paths were failing on machines due to alnum class availability on certain interpreters. Rewards were not counted in stake and pledge Removed +i file locking on .addr files when using Wallet >> Encrypt as these are re-generated from keys and need to be writable Balance check added to Funds >> Withdraw for base address as this is used to pay the withdraw transaction fee Resolve issue with Multi Owner causing an error with new pool registration (error was due to quotes) Mainnet uses dedicated condition for slot checks Timeout moved to a variable in cntools.library KES Calculation for current KES period and KES expiration date Please re-check expiration date using Pool >> Show calc_slots to be network independent prom_host should be calculated from config file, instead of having to update a config Minor typo in menu Parse Config for virtual forks, which adds supports for MC4 CNTools block collector fix column application added as a prereq, bsdmainutils/util-linux cntoolsBlockCollector.sh get epoch using function KES count was not showing up in Katip Funds -> Delegation was broken as per recent changes in 1.17, corrected key type for delegation certificate Pool >> Show delegator rewards parsing from ledger-state Slot sync format improvement kesExpiration function to use 17 fixed byron transition epochs [5.0.0] - 2020-07-20 \u2693\ufe0e Added \u2693\ufe0e HASH_IDENTIFIER where applicable to differentiate between network modes for commands used, required due to legacy Byron considerations add ptn0-praos.json and ptn0-combinator.json to reduce confusion between formats, make prereqs default to combinator, and accept p argument to indicate praos mode. cardano-node 1.16.0 refers to txhash using quotes, sed them out show what's new at startup after update file size check for pool metadata file Add nonce in pool metadata JSON to keep registration attempts unique, avoiding one hash pointing to multiple URLs Change default network to mainnet_candidate , and add second argument (g) to run prereqs against guild network allow the use of pre-existing metadata from URL when registering or modifying pool minimum pool cost check against protocol Refresh option to home screen Ability to register multiple relay DNS A records as well as a mix of DNS A and IPv4 Valid for pool registration and modification Changed \u2693\ufe0e Default config switched to combinator instead of testnet Start maintaining seperate versions of praos and combinator config files. Add 10s timeout to wget commmands in case of issue timestamp added to pool metadata file to make every creation unique Cancel shortcut changed from [c] to [Esc] Default pool cost from 256 -> 400 slotinterval calculation to include decentralisation parameter mainnet candidate compatible slot calculation, 17 fixed byron transition epochs (needs to be fixed for mainnet) Pool metadata information to copy file as-is as well as wait for keypress to make sure file is copied before proceeding with registration. Now use internal table builder to display previous relays Instead of giving relays from previous registration as default values it will now ask if you want to re-register relays exactly as before to minimize steps and complexity Removed \u2693\ufe0e Delete cntools-updater script NODE_SOCKET_PATH config parameter(replaced by CARDANO_NODE_SOCKET_PATH) Fixed \u2693\ufe0e Slots reference was mixing up for shelley testnet in absence of a combinator network numfmt dependency removed in favor of printf formatting Vkey delegation fix due to json format switch ADA not displayed in a couple of the wallet selection menus KES calculation support for both MC and Shelley Testnet Slot tip reference calculation for shelley testnet [4.0.0] - 2020-07-13 \u2693\ufe0e Added \u2693\ufe0e Add PROTOCOL_IDENTIFIER and NETWORK_IDENTIFIER instead of harcoded entries for combinator v/s TPraos & testnet v/s magic differentiators respectively. Keep both ptn0.yaml and ptn0-combinator.yaml to keep validity with mainnet-combinator Changed \u2693\ufe0e Revert back default for Public network to Shelley_Testnet as per https://t.me/CardanoStakePoolWorkgroup/282606 [3.0.0] - 2020-07-12 \u2693\ufe0e Added \u2693\ufe0e Basic health check data on main menu Epoch, time until next epoch, node tip vs calculated reference tip and a warning if node is lagging behind. Address era and encoding to Wallet >> Show Changed \u2693\ufe0e Release 2.1.1 included a change to env file and thus require a major version bump. Modified output on Update screen slightly. KES calculation, now take into account the byron era and the transition period until shelley start Credit to Martin @ ATADA for inspiration on how to calculate this Fixed \u2693\ufe0e Version fix to include patch version [2.0.0] - 2020-07-12 \u2693\ufe0e Added \u2693\ufe0e Support for cardano-node 1.15.x calculate-min-fee update to reflect change in 1.15. change was required to support byron witnesses. gettip update as output is now json formatted bech32 addressing in 1.15 required changes to delegator lookup in Pool >> Show add --cardano-mode to query parameters --mainnet flag for address generation Output verbosity A new config parameter added for output verbosity using say function. 0 = Minimal - Show relevant information (default) 1 = Normal - More information about whats going on behind the scene 2 = Maximal - Debug level for troubleshooting Improve delegators list in Pool >> Show Identify owners delegations Display owner stake in red if (stake + reward) is below pledge (single-owner only for now) Display all lovelace values in floating point ADA with 6 decimals (lovelaces) using locales Block Collector summary view KES rotation notification/warning on startup and in pool list/show views Live stake and delegators in Pool >> Show Changelog Changed \u2693\ufe0e op-cert creation moved from Pool >> New to Pool >> Register . Output changed in various places throughout. Include reward in delegators stake. Release now include patch version in addition to major and minor version. In-app update modified to reflect this change. Block Collector table view Various minor code improvements Removed \u2693\ufe0e Enterprise wallet upgrade option in Wallet >> List Not a registered wallet on chain information from Wallet listing en_US.UTF-8 locale dependency Fixed \u2693\ufe0e meta_json_url check Invalid tx_in when registering stake wallet Delegators rewards in Pool >> Show Work-around awk versions that only support 32-bit integers Sometimes cardano-node log contain duplicate traces for the same slot at log file rollover, now filtered Correct nwmagic - was hardcoded to 42 Set script locale to fix format issue [1.0.0] - 2020-07-07 \u2693\ufe0e First official major release","title":"Changelog"},{"location":"Scripts/cntools-changelog/#8413-2021-07-08","text":"","title":"[8.4.13] - 2021-07-08"},{"location":"Scripts/cntools-changelog/#8412-2021-06-28","text":"","title":"[8.4.12] - 2021-06-28"},{"location":"Scripts/cntools-changelog/#8411-2021-06-25","text":"","title":"[8.4.11] - 2021-06-25"},{"location":"Scripts/cntools-changelog/#8410-2021-06-15","text":"","title":"[8.4.10] - 2021-06-15"},{"location":"Scripts/cntools-changelog/#849-2021-06-15","text":"","title":"[8.4.9] - 2021-06-15"},{"location":"Scripts/cntools-changelog/#846-2021-06-04","text":"","title":"[8.4.6] - 2021-06-04"},{"location":"Scripts/cntools-changelog/#845-2021-05-31","text":"","title":"[8.4.5] - 2021-05-31"},{"location":"Scripts/cntools-changelog/#844-2021-05-19","text":"","title":"[8.4.4] - 2021-05-19"},{"location":"Scripts/cntools-changelog/#843-2021-05-17","text":"","title":"[8.4.3] - 2021-05-17"},{"location":"Scripts/cntools-changelog/#842-2021-05-16","text":"","title":"[8.4.2] - 2021-05-16"},{"location":"Scripts/cntools-changelog/#841-2021-05-16","text":"","title":"[8.4.1] - 2021-05-16"},{"location":"Scripts/cntools-changelog/#840-2021-05-16","text":"","title":"[8.4.0] - 2021-05-16"},{"location":"Scripts/cntools-changelog/#830-2021-05-15","text":"","title":"[8.3.0] - 2021-05-15"},{"location":"Scripts/cntools-changelog/#822-2021-05-02","text":"","title":"[8.2.2] - 2021-05-02"},{"location":"Scripts/cntools-changelog/#821-2021-04-26","text":"","title":"[8.2.1] - 2021-04-26"},{"location":"Scripts/cntools-changelog/#820-2021-04-18","text":"","title":"[8.2.0] - 2021-04-18"},{"location":"Scripts/cntools-changelog/#816-2021-04-14","text":"","title":"[8.1.6] - 2021-04-14"},{"location":"Scripts/cntools-changelog/#815-2021-04-09","text":"","title":"[8.1.5] - 2021-04-09"},{"location":"Scripts/cntools-changelog/#814-2021-04-05","text":"","title":"[8.1.4] - 2021-04-05"},{"location":"Scripts/cntools-changelog/#813-2021-04-01","text":"","title":"[8.1.3] - 2021-04-01"},{"location":"Scripts/cntools-changelog/#812-2021-03-31","text":"","title":"[8.1.2] - 2021-03-31"},{"location":"Scripts/cntools-changelog/#811-2021-03-30","text":"","title":"[8.1.1] - 2021-03-30"},{"location":"Scripts/cntools-changelog/#810-2021-03-26","text":"","title":"[8.1.0] - 2021-03-26"},{"location":"Scripts/cntools-changelog/#802-2021-03-15","text":"","title":"[8.0.2] - 2021-03-15"},{"location":"Scripts/cntools-changelog/#801-2021-03-05","text":"","title":"[8.0.1] - 2021-03-05"},{"location":"Scripts/cntools-changelog/#800-2021-02-28","text":"","title":"[8.0.0] - 2021-02-28"},{"location":"Scripts/cntools-changelog/#716-2021-02-10","text":"Update curl commands when file isnt downloaded correctly (to give correct return code)","title":"[7.1.6] - 2021-02-10"},{"location":"Scripts/cntools-changelog/#715-2021-02-03","text":"","title":"[7.1.5] - 2021-02-03"},{"location":"Scripts/cntools-changelog/#714-2021-02-01","text":"","title":"[7.1.4] - 2021-02-01"},{"location":"Scripts/cntools-changelog/#713-2021-01-30","text":"","title":"[7.1.3] - 2021-01-30"},{"location":"Scripts/cntools-changelog/#711-2021-01-29","text":"","title":"[7.1.1] - 2021-01-29"},{"location":"Scripts/cntools-changelog/#710-2021-01-29","text":"","title":"[7.1.0] - 2021-01-29"},{"location":"Scripts/cntools-changelog/#702-2021-01-17","text":"","title":"[7.0.2] - 2021-01-17"},{"location":"Scripts/cntools-changelog/#701-2021-01-13","text":"","title":"[7.0.1] - 2021-01-13"},{"location":"Scripts/cntools-changelog/#700-2021-01-11","text":"Though mostly unchanged in the user interface, this is a major update with most of the code re-written/touched in the back-end. Only the most noticeable changes added to changelog.","title":"[7.0.0] - 2021-01-11"},{"location":"Scripts/cntools-changelog/#631-2020-12-14","text":"","title":"[6.3.1] - 2020-12-14"},{"location":"Scripts/cntools-changelog/#630-2020-12-03","text":"","title":"[6.3.0] - 2020-12-03"},{"location":"Scripts/cntools-changelog/#621-2020-11-28","text":"","title":"[6.2.1] - 2020-11-28"},{"location":"Scripts/cntools-changelog/#620-alpha-branch","text":"","title":"[6.2.0] - (alpha branch)"},{"location":"Scripts/cntools-changelog/#610-2020-10-22","text":"","title":"[6.1.0] - 2020-10-22"},{"location":"Scripts/cntools-changelog/#603-2020-10-16","text":"","title":"[6.0.3] - 2020-10-16"},{"location":"Scripts/cntools-changelog/#fixed_26","text":"Shelley epoch transition calculation used the wrong byron metric in the calculation","title":"Fixed"},{"location":"Scripts/cntools-changelog/#602-2020-10-16","text":"","title":"[6.0.2] - 2020-10-16"},{"location":"Scripts/cntools-changelog/#fixed_27","text":"Internal update had the wrong path to env file breaking automatic update, please use prereqs.sh to update Fix in 6.0.1 broke pool id retrieval, now compatible with both pre and post cardano-node 1.21.2 syntax.","title":"Fixed"},{"location":"Scripts/cntools-changelog/#601-2020-10-16","text":"","title":"[6.0.1] - 2020-10-16"},{"location":"Scripts/cntools-changelog/#fixed_28","text":"As per change to cardano-cli syntax, pool ID requires --cold-verification-key-file instead of --verification-key-file","title":"Fixed"},{"location":"Scripts/cntools-changelog/#600-2020-10-15","text":"This is a major release with a lot of changes. It is highly recommended that you familiarise yourself with the usage for Hybrid or Online v/s Offline mode on a testnet environment before doing it on production. Please visit https://cardano-community.github.io/guild-operators/upgrade for details.","title":"[6.0.0] - 2020-10-15"},{"location":"Scripts/cntools-changelog/#500-2020-07-20","text":"","title":"[5.0.0] - 2020-07-20"},{"location":"Scripts/cntools-changelog/#400-2020-07-13","text":"","title":"[4.0.0] - 2020-07-13"},{"location":"Scripts/cntools-changelog/#300-2020-07-12","text":"","title":"[3.0.0] - 2020-07-12"},{"location":"Scripts/cntools-changelog/#200-2020-07-12","text":"","title":"[2.0.0] - 2020-07-12"},{"location":"Scripts/cntools-changelog/#100-2020-07-07","text":"First official major release","title":"[1.0.0] - 2020-07-07"},{"location":"Scripts/cntools-common/","text":"Important Familiarize yourself with the Online workflow of creating wallets and pools on the Testnet. You can then move on to test the Offline Workflow . The Offline workflow means that the private keys never touch the Online node. When comfortable with both the online and offline CNTools workflow, it's time to deploy what you learnt on the mainnet. This chapter describes some common use-cases for wallet and pool creation when running CNTools in Online mode. CNTools contains much more functionality not described here. Create Wallet A wallet is needed for pledge and to pay for pool registration fee. Choose [w] Wallet and you will be presented with the following menu: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> WALLET ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Wallet Management ) New - create a new wallet ) Import - import a Daedalus/Yoroi 24/25 mnemonic or Ledger/Trezor HW wallet ) Register - register a wallet on chain ) De-Register - De-Register (retire) a registered wallet ) List - list all available wallets in a compact view ) Show - show detailed view of a specific wallet ) Remove - remove a wallet ) Decrypt - remove write protection and decrypt wallet ) Encrypt - encrypt wallet keys and make all files immutable ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Select Wallet Operation [n] New [i] Import [r] Register [z] De-Register [l] List [s] Show [x] Remove [d] Decrypt [e] Encrypt [h] Home Choose [n] New to create a new wallet. [i] Import can also be used to import a Daedalus/Yoroi based 15 or 24 word wallet seed Give the wallet a name CNTools will give you the wallet address. For example: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> WALLET >> NEW ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Name of new wallet: Test New Wallet : Test Address : addr_test1qpq5qjr774cyc6kxcwp060k4t4hwp42q43v35lmcg3gcycu5uwdwld5yr8m8fgn7su955zf5qahtrgljqfjfa4nr8jfsj4alxk Enterprise Address : addr_test1vpq5qjr774cyc6kxcwp060k4t4hwp42q43v35lmcg3gcyccuxhdka You can now send and receive Ada using the above addresses. Note that Enterprise Address will not take part in staking. Wallet will be automatically registered on chain if you choose to delegate or pledge wallet when registering a stake pool. Send some money to this wallet. Either through the faucet or have a friend send you some. The wallet must have funds in it before you can proceed. The Wallet created from here is not derived from mnemonics, please use next tab if you'd like to use a wallet that can also be accessed from Daedalus/Yoroi Import Daedalus/Yoroi/HW Wallet The Import feature of CNTools is originally based on this guide from Ilap . If you would like to use Import function to import a Daedalus/Yoroi based 15 or 24 word wallet seed, please ensure that cardano-address and bech32 bineries are available in your $PATH environment variable: bech32 --version 1.1.0 cardano-address --version 3.5.0 If the version is not as per above, please run the latest prereqs.sh from here and rebuild cardano-node as instructed here . To import a Daedalus/Yoroi wallet to CNTools, open CNTools and select the [w] Wallet option, and then select the [i] Import , the following menu will appear: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> WALLET >> IMPORT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Wallet Import ) Mnemonic - Daedalus/Yoroi 24 or 25 word mnemonic ) HW Wallet - Ledger/Trezor hardware wallet ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Select Wallet operation [m] Mnemonic [w] HW Wallet [h] Home Note You can import Hardware wallet using [w] HW Wallet above, but please note that before you are able to use hardware wallet in CNTools, you need to ensure you can detect your hardware device at OS level using cardano-hw-cli Select the wallet you want to import, for Daedalus / Yoroi wallets select [m] Mnemonic : ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> WALLET >> IMPORT >> MNEMONIC ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Name of imported wallet: TEST 24 or 15 word mnemonic(space separated): Give your wallet a name (in this case 'TEST'), and enter your mnemonic phrase. Please ensure that you **READ* through the complete notes presented by CNTools before proceeding. Create Pool Create the necessary pool keys. From the main menu select [p] Pool ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> POOL ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pool Management ) New - create a new pool ) Register - register created pool on chain using a stake wallet (pledge wallet) ) Modify - change pool parameters and register updated pool values on chain ) Retire - de-register stake pool from chain in specified epoch ) List - a compact list view of available local pools ) Show - detailed view of specified pool ) Rotate - rotate pool KES keys ) Decrypt - remove write protection and decrypt pool ) Encrypt - encrypt pool cold keys and make all files immutable ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Select Pool Operation [n] New [r] Register [m] Modify [x] Retire [l] List [s] Show [o] Rotate [d] Decrypt [e] Encrypt [h] Home Select [n] New to create a new pool Give the pool a name. In our case, we call it TEST. The result should look something like this: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> POOL >> NEW ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pool Name: TEST Pool: TEST ID (hex) : 8d5a3510f18ce241115da38a1b2419ed82d308599c16e98caea1b4c0 ID (bech32) : pool134dr2y833n3yzy2a5w9pkfqeakpdxzzenstwnr9w5x6vqtnclue Register Pool Register the pool on-chain. From the main menu select [p] Pool Select [r] Register Select the pool you just created CNTools will give you prompts to set pledge, margin, cost, metadata, and relays. Enter values that are useful to you. Make sure you set your pledge low enough to insure your funds in your wallet will cover pledge plus pool registration fees. Select wallet to use as pledge wallet, Test in our case. As this is a newly created wallet, you will be prompted to continue with wallet registration. When complete and if successful, both wallet and pool will be registered on-chain. It will look something like this: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> POOL >> REGISTER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Online mode - The default mode to use if all keys are available Hybrid mode - 1) Go through the steps to build a transaction file 2) Copy the built tx file to an offline node 3) Sign it using 'Sign Tx' with keys on offline node (CNTools started in offline mode '-o' without node connection) 4) Copy the signed tx file back to the online node and submit using 'Submit Tx' Selected value: [o] Online # Select pool Selected pool: TEST # Pool Parameters press enter to use default value Pledge (in Ada, default: 50,000): Margin (in %, default: 7.5): Cost (in Ada, minimum: 340, default: 340): # Pool Metadata Enter Pool's JSON URL to host metadata file - URL length should be less than 64 chars (default: https://foo.bat/poolmeta.json): Enter Pool's Name (default: TEST): Enter Pool's Ticker , should be between 3-5 characters (default: TEST): Enter Pool's Description (default: No Description): Enter Pool's Homepage (default: https://foo.com): Optionally set an extended metadata URL? Selected value: [n] No { \"name\": \"TEST\", \"ticker\": \"TEST\", \"description\": \"No Description\", \"homepage\": \"https://foo.com\", \"nonce\": \"1613146429\" } Please host file /opt/cardano/guild/priv/pool/TEST/poolmeta.json as-is at https://foo.bat/poolmeta.json # Pool Relay Registration Selected value: [d] A or AAAA DNS record (single) Enter relays's DNS record, only A or AAAA DNS records: relay.foo.com Enter relays's port: 6000 Add more relay entries? Selected value: [n] No # Select main owner/pledge wallet (normal CLI wallet) Selected wallet: Test (100,000.000000 Ada) Wallet Test3 not registered on chain Waiting for new block to be created (timeout = 600 slots, 600s) INFO: press any key to cancel and return (won't stop transaction) Owner #1 : Test added! Register a multi-owner pool (you need to have stake.vkey of any additional owner in a seperate wallet folder under $CNODE_HOME/priv/wallet)? Selected value: [n] No Use a separate rewards wallet from main owner? Selected value: [n] No Waiting for new block to be created (timeout = 600 slots, 600s) INFO: press any key to cancel and return (won't stop transaction) Pool TEST successfully registered! Owner #1 : Test Reward Wallet : Test Pledge : 50,000 Ada Margin : 7.5 % Cost : 340 Ada Uncomment and set value for POOL_NAME in ./env with 'TEST' INFO: Total balance in 1 owner/pledge wallet(s) are: 99,497.996518 Ada As mentioned in the above output: Uncomment and set value for POOL_NAME in ./env with 'TEST' (in our case, the POOL_NAME is TEST ). The cnode.sh script will automatically detect whether the files required to run as a block producing node are present in the $CNODE_HOME/priv/pool/<POOL_NAME> directory. Rotate KES Keys The node runs with an operational certificate, generated using the KES hot key. For security reasons, the protocol asks to re-generate (or rotate) your KES key once reaching expiry. On mainnet, this expiry is in 62 cycles of 18 hours (thus, to ask for rotation quarterly), after which your node will not be able to forge valid blocks unless rotated. To be able to rotate KES keys, your cold keys files ( cold.skey , cold.vkey and cold.counter ) need to be present on the machine where you run CNTools to rotate your KES key. To Rotate KES keys and generate the operational certificate - op.cert . From the main menu select [p] Pool Select [o] Rotate Select the pool you just created The output should look like: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> POOL >> ROTATE KES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Select pool to rotate KES keys on Selected pool: TEST Pool KES keys successfully updated New KES start period : 240 KES keys will expire : 302 - 2021-09-04 11:24:31 UTC Restart your pool node for changes to take effect press any key to return to home menu Start or restart your cardano-node . If deployed as a systemd service as shown here , you can run sudo systemctl restart cnode . Ensure the node is running as a block producing (core) node. You can use gLiveView - the output at the top should say > Cardano Node - (Core - Testnet) . Alternatively, you can check the node logs in $CNODE_HOME/logs/ to see whether the node is performing leadership checks ( TraceStartLeadershipCheck , TraceNodeIsNotLeader , etc.)","title":"Common Tasks"},{"location":"Scripts/cntools/","text":"Important Ensure the Pre-Requisites are in place before you proceed. The active testers for this script use Fedora/CentOS/RHEL/Ubuntu operating systems, other OS may require customisations. The tool uses the folder structure defined here . Everyone is free to customise, but while doing so beware that you may introduce changes that may not be tested during updates. Always use Testnet/Guild network first to familiarise, read the warning/messages in full, maintain your keys/backups with passwords (no one other than yourself can retrieve the funds if you make an accident), before performing actions on mainnet. CNTools is like a swiss army knife for pool operators to simplify typical operations regarding their wallet keys and pool management. Please note that this tool only aims to simplify usual tasks for its users, but it should NOT act as an excuse to skip understanding how to manually work through things or basics of Linux operations. The skills highlighted on the home page are paramount for a stake pool operator, and so is the understanding of configuration files and network. Please ensure you've read and understood the disclaimers before proceeding. Visit the Changelog section to see progress and current release. Overview \u2693\ufe0e The tool consist of three files. cntools.sh - the main script to launch cntools. cntools.library - internal script with helper functions. cntools.config - configuration file to modify certain behaviours, paths and name schema used. In addition to the above files, there is also a dependency on the common env file. CNTools connects to your node through the configuration in the env file located in the same directory as the script. Customize env and cntools.config files to your needs. Additionally, CNTools can integrate and enable optional functionalities based on external components: cncli.sh is a companion script with optional functionalities to run on the core node (block producer) such as monitoring created blocks, calculating leader schedules and block validation. logMonitor.sh is another companion script meant to be run together with the cncli.sh script to give a more complete picture. See CNCLI and Log Monitor sections for more details. CNTools can operate in following modes: Advanced - When CNTools is launched with -a runtime argument, this launches CNTools exposing a new Advanced menu, which allows users to manage (create/mint/burn) new assets. Online - When all wallet and pool keys are available on the hot node, use this option. This is the default mode when you start CNTools without parameters. Hybrid - When running in online mode, this option can be used in menus to create offline transaction files that can be passed to Offline CNTools to sign. Offline - When CNTools is launched with -o runtime argument, this launches CNTools with limited set of features. This mode does not require access to cardano-node . It is mainly used to create Wallet/Pool and access Transaction >> Sign to sign an offline transaction file created in Hybrid mode. Download and Update \u2693\ufe0e The update functionality is provided from within CNTools. In case of breaking changes, please follow the prompts post-upgrade. If stuck, it's always best to re-run the latest prereqs.sh before proceeding. If you have not updated in a while, it is possible that you might come from a release with breaking changes. If so, please be sure to check out the upgrade instructions. Navigation \u2693\ufe0e The scripts menu supports both arrow key navigation and shortcut key selection. The character within the square brackets is the shortcut to press for quick navigation. For other selections like wallet and pool menu that don't contain shortcuts, there is a third way to navigate. Key pressed is compared to the first character of the menu option and if there is a match the selection jumps to this location. A handy way to quickly navigate a large menu. Hardware Wallet \u2693\ufe0e CNTools include hardware wallet support since version 7.0.0 through Vacuumlabs cardano-hw-cli application. Initialize and update firmware/app on the device to the latest version before usage following the manufacturer instructions. To enable hardware support run prereqs.sh -w . This downloads and installs Vacuumlabs cardano-hw-cli including udev configuration. When a new version of Vacuumlabs cardano-hw-cli is released, run prereqs.sh -w again to update. For additional runtime options, run prereqs.sh -h . Ledger Supported devices: Nano S / Nano X Make sure the latest cardano app is installed on the device. Trezor Supported devices: Model T Make sure the latest firmware is installed on the device. In addition to this, install Trezor Bridge for your system before trying to use your Trezor device in CNTools. You can find the latest version of the bridge at https://wallet.trezor.io/#/bridge Offline Workflow \u2693\ufe0e CNTools can be run in online and offline mode. At a very high level, for working with offline devices, remember that you need to use CNTools in an online node to generate a staging transaction for the desired type of transaction, and then move the staging transaction to an offline node to sign (authorize) using the signing keys on your offline node - and then bring back the signed transaction to the online node for submission to the chain. For the offline workflow, all the wallet and pool keys should be kept on the offline node. The backup function in CNTools has an option to create a backup without private keys (sensitive signing keys) to be transferred to online node. All other files are included in the backup to be transferred to the online node. Keys excluded from backup when created without private keys: Wallet - payment.skey , stake.skey Pool - cold.skey Note that setting up an offline server requires good SysOps background (you need to be aware of how to set up your server with offline mirror repository, how to transfer files across and be fairly familiar with the disk layout of guild tools). The prereqs.sh in its current state is not expected to run on an offline machine. Essentially, you simply need the cardano-cli , bech32 , cardano-address binaries in your $PATH , OS level dependency packages [ jq , coreutils , pkgconfig , gcc-c++ and bc ], and perhaps a copy from your online cnode directory (to ensure you have the right genesis / config files on your offline server). We strongly recommend you to familiarise yourself with the workflow on the testnet / guild networks first, before attempting on mainnet. Example workflow for creating a wallet and pool: sequenceDiagram Note over Offline: Create/Import a wallet Note over Offline: Create a new pool Note over Offline: Rotate KES keys to generate op.cert Note over Offline: Create a backup w/o private keys Offline->>Online: Transfer backup to online node Note over Online: Fund the wallet base address with enough Ada Note over Online: Register wallet using ' Wallet \u00bb Register ' in hybrid mode Online->>Offline: Transfer built tx file back to offline node Note over Offline: Use ' Transaction >> Sign ' with payment.skey from wallet to sign transaction Offline->>Online: Transfer signed tx back to online node Note over Online: Use ' Transaction >> Submit ' to send signed transaction to blockchain Note over Online: Register pool in hybrid mode loop Offline-->Online: Repeat steps to sign and submit built pool registration transaction end Note over Online: Verify that pool was successfully registered with ' Pool \u00bb Show ' Online mode To start CNTools in Online (advanced) Mode, execute the script from the $CNODE_HOME/scripts/ directory: cd $CNODE_HOME/scripts ./cntools.sh -a You should get a screen that looks something like this: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> CNTools vX.X.X - Guild - CONNECTED << A Guild Operators collaboration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Main Menu Telegram Announcement / Support channel: t.me/guild_operators_official ) Wallet - create, show, remove and protect wallets ) Funds - send, withdraw and delegate ) Pool - pool creation and management ) Transaction - Sign and Submit a cold transaction (hybrid/offline mode) ) Blocks - show core node leader schedule & block production statistics ) Backup - backup & restore of wallet/pool/config ) Advanced - Developer and advanced features: metadata, multi-assets, ... ) Refresh - reload home screen content ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Epoch 276 - 3d 19:08:27 until next What would you like to do? Node Sync: 12 :) [w] Wallet [f] Funds [p] Pool [t] Transaction [b] Blocks [u] Update [z] Backup & Restore [a] Advanced [r] Refresh [q] Quit Offline mode To start CNTools in Offline Mode, execute the script from the $CNODE_HOME/scripts/ directory using the -o flag: cd $CNODE_HOME/scripts ./cntools.sh -o The main menu header should let you know that node is started in offline mode: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> CNTools vX.X.X - Guild - OFFLINE << A Guild Operators collaboration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Main Menu Telegram Announcement / Support channel: t.me/guild_operators_official ) Wallet - create, show, remove and protect wallets ) Funds - send, withdraw and delegate ) Pool - pool creation and management ) Transaction - Sign and Submit a cold transaction (hybrid/offline mode) ) Backup - backup & restore of wallet/pool/config ) Refresh - reload home screen content ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Epoch 276 - 3d 19:03:46 until next What would you like to do? [w] Wallet [f] Funds [p] Pool [t] Transaction [z] Backup & Restore [r] Refresh [q] Quit","title":"Overview"},{"location":"Scripts/cntools/#overview","text":"The tool consist of three files. cntools.sh - the main script to launch cntools. cntools.library - internal script with helper functions. cntools.config - configuration file to modify certain behaviours, paths and name schema used. In addition to the above files, there is also a dependency on the common env file. CNTools connects to your node through the configuration in the env file located in the same directory as the script. Customize env and cntools.config files to your needs. Additionally, CNTools can integrate and enable optional functionalities based on external components: cncli.sh is a companion script with optional functionalities to run on the core node (block producer) such as monitoring created blocks, calculating leader schedules and block validation. logMonitor.sh is another companion script meant to be run together with the cncli.sh script to give a more complete picture. See CNCLI and Log Monitor sections for more details. CNTools can operate in following modes: Advanced - When CNTools is launched with -a runtime argument, this launches CNTools exposing a new Advanced menu, which allows users to manage (create/mint/burn) new assets. Online - When all wallet and pool keys are available on the hot node, use this option. This is the default mode when you start CNTools without parameters. Hybrid - When running in online mode, this option can be used in menus to create offline transaction files that can be passed to Offline CNTools to sign. Offline - When CNTools is launched with -o runtime argument, this launches CNTools with limited set of features. This mode does not require access to cardano-node . It is mainly used to create Wallet/Pool and access Transaction >> Sign to sign an offline transaction file created in Hybrid mode.","title":"Overview"},{"location":"Scripts/cntools/#download-and-update","text":"The update functionality is provided from within CNTools. In case of breaking changes, please follow the prompts post-upgrade. If stuck, it's always best to re-run the latest prereqs.sh before proceeding. If you have not updated in a while, it is possible that you might come from a release with breaking changes. If so, please be sure to check out the upgrade instructions.","title":"Download and Update"},{"location":"Scripts/cntools/#navigation","text":"The scripts menu supports both arrow key navigation and shortcut key selection. The character within the square brackets is the shortcut to press for quick navigation. For other selections like wallet and pool menu that don't contain shortcuts, there is a third way to navigate. Key pressed is compared to the first character of the menu option and if there is a match the selection jumps to this location. A handy way to quickly navigate a large menu.","title":"Navigation"},{"location":"Scripts/cntools/#hardware-wallet","text":"CNTools include hardware wallet support since version 7.0.0 through Vacuumlabs cardano-hw-cli application. Initialize and update firmware/app on the device to the latest version before usage following the manufacturer instructions. To enable hardware support run prereqs.sh -w . This downloads and installs Vacuumlabs cardano-hw-cli including udev configuration. When a new version of Vacuumlabs cardano-hw-cli is released, run prereqs.sh -w again to update. For additional runtime options, run prereqs.sh -h . Ledger Supported devices: Nano S / Nano X Make sure the latest cardano app is installed on the device. Trezor Supported devices: Model T Make sure the latest firmware is installed on the device. In addition to this, install Trezor Bridge for your system before trying to use your Trezor device in CNTools. You can find the latest version of the bridge at https://wallet.trezor.io/#/bridge","title":"Hardware Wallet"},{"location":"Scripts/cntools/#offline-workflow","text":"CNTools can be run in online and offline mode. At a very high level, for working with offline devices, remember that you need to use CNTools in an online node to generate a staging transaction for the desired type of transaction, and then move the staging transaction to an offline node to sign (authorize) using the signing keys on your offline node - and then bring back the signed transaction to the online node for submission to the chain. For the offline workflow, all the wallet and pool keys should be kept on the offline node. The backup function in CNTools has an option to create a backup without private keys (sensitive signing keys) to be transferred to online node. All other files are included in the backup to be transferred to the online node. Keys excluded from backup when created without private keys: Wallet - payment.skey , stake.skey Pool - cold.skey Note that setting up an offline server requires good SysOps background (you need to be aware of how to set up your server with offline mirror repository, how to transfer files across and be fairly familiar with the disk layout of guild tools). The prereqs.sh in its current state is not expected to run on an offline machine. Essentially, you simply need the cardano-cli , bech32 , cardano-address binaries in your $PATH , OS level dependency packages [ jq , coreutils , pkgconfig , gcc-c++ and bc ], and perhaps a copy from your online cnode directory (to ensure you have the right genesis / config files on your offline server). We strongly recommend you to familiarise yourself with the workflow on the testnet / guild networks first, before attempting on mainnet. Example workflow for creating a wallet and pool: sequenceDiagram Note over Offline: Create/Import a wallet Note over Offline: Create a new pool Note over Offline: Rotate KES keys to generate op.cert Note over Offline: Create a backup w/o private keys Offline->>Online: Transfer backup to online node Note over Online: Fund the wallet base address with enough Ada Note over Online: Register wallet using ' Wallet \u00bb Register ' in hybrid mode Online->>Offline: Transfer built tx file back to offline node Note over Offline: Use ' Transaction >> Sign ' with payment.skey from wallet to sign transaction Offline->>Online: Transfer signed tx back to online node Note over Online: Use ' Transaction >> Submit ' to send signed transaction to blockchain Note over Online: Register pool in hybrid mode loop Offline-->Online: Repeat steps to sign and submit built pool registration transaction end Note over Online: Verify that pool was successfully registered with ' Pool \u00bb Show ' Online mode To start CNTools in Online (advanced) Mode, execute the script from the $CNODE_HOME/scripts/ directory: cd $CNODE_HOME/scripts ./cntools.sh -a You should get a screen that looks something like this: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> CNTools vX.X.X - Guild - CONNECTED << A Guild Operators collaboration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Main Menu Telegram Announcement / Support channel: t.me/guild_operators_official ) Wallet - create, show, remove and protect wallets ) Funds - send, withdraw and delegate ) Pool - pool creation and management ) Transaction - Sign and Submit a cold transaction (hybrid/offline mode) ) Blocks - show core node leader schedule & block production statistics ) Backup - backup & restore of wallet/pool/config ) Advanced - Developer and advanced features: metadata, multi-assets, ... ) Refresh - reload home screen content ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Epoch 276 - 3d 19:08:27 until next What would you like to do? Node Sync: 12 :) [w] Wallet [f] Funds [p] Pool [t] Transaction [b] Blocks [u] Update [z] Backup & Restore [a] Advanced [r] Refresh [q] Quit Offline mode To start CNTools in Offline Mode, execute the script from the $CNODE_HOME/scripts/ directory using the -o flag: cd $CNODE_HOME/scripts ./cntools.sh -o The main menu header should let you know that node is started in offline mode: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >> CNTools vX.X.X - Guild - OFFLINE << A Guild Operators collaboration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Main Menu Telegram Announcement / Support channel: t.me/guild_operators_official ) Wallet - create, show, remove and protect wallets ) Funds - send, withdraw and delegate ) Pool - pool creation and management ) Transaction - Sign and Submit a cold transaction (hybrid/offline mode) ) Backup - backup & restore of wallet/pool/config ) Refresh - reload home screen content ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Epoch 276 - 3d 19:03:46 until next What would you like to do? [w] Wallet [f] Funds [p] Pool [t] Transaction [z] Backup & Restore [r] Refresh [q] Quit","title":"Offline Workflow"},{"location":"Scripts/env/","text":"A common environment file called env is sourced by most scripts in the Guild Operators repository. This file holds common variables and functions needed by other scripts. There are several benefits to this, not having to specify duplicate settings and being able to reuse functions decreasing the risk of misconfiguration and inconsistency. Installation \u2693\ufe0e env file is downloaded together with the rest of the scripts when Pre-Requisites if followed and located in the $CNODE_HOME/scripts/ directory. The file is also automatically downloaded/updated by some of the individual scripts if missing, like cntools.sh , gLiveView.sh and topologyUpdater.sh . All custom changes in User Variables section are untouched on updates unless a forced overwrite is selected when running prereqs.sh . Configuration \u2693\ufe0e Most variables can be left commented to use the automatically detected or default value. But there are some that need to be set as explained below. CNODE_PORT - This is the most important variable and needs to be set. Used when launching the node through cnode.sh and to identify the correct process of the node. CNODE_HOME - The root directory of the Cardano node holding all the files needed. Can be left commented if prereqs.sh has been run as this variable is then exported and added as a system environment variable. POOL_NAME - If the node is to be started as a block producer by cnode.sh this variable needs to be uncommented and set. This is the name given to the pool in CNTools (not ticker), i.e. the pool directory name under $CNODE_HOME/priv/pool/<POOL_NAME> Take your time and look through the different variables and their explanations and decide if you need/want to change the default setting. For a default deployment using prereqs.sh , the CNODE_PORT (all installs) and POOL_NAME (only block producer) should be the only variables needed to be set. ###################################### # User Variables - Change as desired # # Leave as is if unsure # ###################################### #CCLI=\"${HOME}/.cabal/bin/cardano-cli\" # Override automatic detection of path to cardano-cli executable #CNCLI=\"${HOME}/.cargo/bin/cncli\" # Override automatic detection of path to cncli executable (https://github.com/AndrewWestberg/cncli) #CNODE_HOME=\"/opt/cardano/cnode\" # Override default CNODE_HOME path (defaults to /opt/cardano/cnode) CNODE_PORT = 6000 # Set node port #CONFIG=\"${CNODE_HOME}/files/config.json\" # Override automatic detection of node config path #SOCKET=\"${CNODE_HOME}/sockets/node0.socket\" # Override automatic detection of path to socket #TOPOLOGY=\"${CNODE_HOME}/files/topology.json\" # Override default topology.json path #LOG_DIR=\"${CNODE_HOME}/logs\" # Folder where your logs will be sent to (must pre-exist) #DB_DIR=\"${CNODE_HOME}/db\" # Folder to store the cardano-node blockchain db #UPDATE_CHECK=\"Y\" # Check for updates to scripts, it will still be prompted before proceeding (Y|N). #TMP_DIR=\"/tmp/cnode\" # Folder to hold temporary files in the various scripts, each script might create additional subfolders #EKG_HOST=127.0.0.1 # Set node EKG host IP #EKG_PORT=12788 # Override automatic detection of node EKG port #PROM_HOST=127.0.0.1 # Set node Prometheus host IP #PROM_PORT=12798 # Override automatic detection of node Prometheus port #EKG_TIMEOUT=3 # Maximum time in seconds that you allow EKG request to take before aborting (node metrics) #CURL_TIMEOUT=10 # Maximum time in seconds that you allow curl file download to take before aborting (GitHub update process) #BLOCKLOG_DIR=\"${CNODE_HOME}/guild-db/blocklog\" # Override default directory used to store block data for core node #BLOCKLOG_TZ=\"UTC\" # TimeZone to use when displaying blocklog - https://en.wikipedia.org/wiki/List_of_tz_database_time_zones #SHELLEY_TRANS_EPOCH=208 # Override automatic detection of shelley epoch start, e.g 208 for mainnet #TG_BOT_TOKEN=\"\" # Uncomment and set to enable telegramSend function. To create your own BOT-token and Chat-Id follow guide at: #TG_CHAT_ID=\"\" # https://cardano-community.github.io/guild-operators/Scripts/sendalerts #USE_EKG=\"N\" # Use EKG metrics from the node instead of Promethus. Promethus metrics(default) should yield slightly better performance #TIMEOUT_LEDGER_STATE=300 # Timeout in seconds for querying and dumping ledger-state #IP_VERSION=4 # The IP version to use for push and fetch, valid options: 4 | 6 | mix (Default: 4) #WALLET_FOLDER=\"${CNODE_HOME}/priv/wallet\" # Root folder for Wallets #POOL_FOLDER=\"${CNODE_HOME}/priv/pool\" # Root folder for Pools # Each wallet and pool has a friendly name and subfolder containing all related keys, certificates, ... #POOL_NAME=\"\" # Set the pool's name to run node as a core node (the name, NOT the ticker, ie folder name) #WALLET_PAY_VK_FILENAME=\"payment.vkey\" # Standardized names for all wallet related files #WALLET_PAY_SK_FILENAME=\"payment.skey\" #WALLET_HW_PAY_SK_FILENAME=\"payment.hwsfile\" #WALLET_PAY_ADDR_FILENAME=\"payment.addr\" #WALLET_BASE_ADDR_FILENAME=\"base.addr\" #WALLET_STAKE_VK_FILENAME=\"stake.vkey\" #WALLET_STAKE_SK_FILENAME=\"stake.skey\" #WALLET_HW_STAKE_SK_FILENAME=\"stake.hwsfile\" #WALLET_STAKE_ADDR_FILENAME=\"reward.addr\" #WALLET_STAKE_CERT_FILENAME=\"stake.cert\" #WALLET_STAKE_DEREG_FILENAME=\"stake.dereg\" #WALLET_DELEGCERT_FILENAME=\"delegation.cert\" #POOL_ID_FILENAME=\"pool.id\" # Standardized names for all pool related files #POOL_HOTKEY_VK_FILENAME=\"hot.vkey\" #POOL_HOTKEY_SK_FILENAME=\"hot.skey\" #POOL_COLDKEY_VK_FILENAME=\"cold.vkey\" #POOL_COLDKEY_SK_FILENAME=\"cold.skey\" #POOL_OPCERT_COUNTER_FILENAME=\"cold.counter\" #POOL_OPCERT_FILENAME=\"op.cert\" #POOL_VRF_VK_FILENAME=\"vrf.vkey\" #POOL_VRF_SK_FILENAME=\"vrf.skey\" #POOL_CONFIG_FILENAME=\"pool.config\" #POOL_REGCERT_FILENAME=\"pool.cert\" #POOL_CURRENT_KES_START=\"kes.start\" #POOL_DEREGCERT_FILENAME=\"pool.dereg\" #ASSET_FOLDER=\"${CNODE_HOME}/priv/asset\" # Root folder for Multi-Assets containing minted assets and subfolders for Policy IDs #ASSET_POLICY_VK_FILENAME=\"policy.vkey\" # Standardized names for all multi-asset related files #ASSET_POLICY_SK_FILENAME=\"policy.skey\" #ASSET_POLICY_SCRIPT_FILENAME=\"policy.script\" # File extension '.script' mandatory #ASSET_POLICY_ID_FILENAME=\"policy.id\"","title":"Common env"},{"location":"Scripts/env/#installation","text":"env file is downloaded together with the rest of the scripts when Pre-Requisites if followed and located in the $CNODE_HOME/scripts/ directory. The file is also automatically downloaded/updated by some of the individual scripts if missing, like cntools.sh , gLiveView.sh and topologyUpdater.sh . All custom changes in User Variables section are untouched on updates unless a forced overwrite is selected when running prereqs.sh .","title":"Installation"},{"location":"Scripts/env/#configuration","text":"Most variables can be left commented to use the automatically detected or default value. But there are some that need to be set as explained below. CNODE_PORT - This is the most important variable and needs to be set. Used when launching the node through cnode.sh and to identify the correct process of the node. CNODE_HOME - The root directory of the Cardano node holding all the files needed. Can be left commented if prereqs.sh has been run as this variable is then exported and added as a system environment variable. POOL_NAME - If the node is to be started as a block producer by cnode.sh this variable needs to be uncommented and set. This is the name given to the pool in CNTools (not ticker), i.e. the pool directory name under $CNODE_HOME/priv/pool/<POOL_NAME> Take your time and look through the different variables and their explanations and decide if you need/want to change the default setting. For a default deployment using prereqs.sh , the CNODE_PORT (all installs) and POOL_NAME (only block producer) should be the only variables needed to be set. ###################################### # User Variables - Change as desired # # Leave as is if unsure # ###################################### #CCLI=\"${HOME}/.cabal/bin/cardano-cli\" # Override automatic detection of path to cardano-cli executable #CNCLI=\"${HOME}/.cargo/bin/cncli\" # Override automatic detection of path to cncli executable (https://github.com/AndrewWestberg/cncli) #CNODE_HOME=\"/opt/cardano/cnode\" # Override default CNODE_HOME path (defaults to /opt/cardano/cnode) CNODE_PORT = 6000 # Set node port #CONFIG=\"${CNODE_HOME}/files/config.json\" # Override automatic detection of node config path #SOCKET=\"${CNODE_HOME}/sockets/node0.socket\" # Override automatic detection of path to socket #TOPOLOGY=\"${CNODE_HOME}/files/topology.json\" # Override default topology.json path #LOG_DIR=\"${CNODE_HOME}/logs\" # Folder where your logs will be sent to (must pre-exist) #DB_DIR=\"${CNODE_HOME}/db\" # Folder to store the cardano-node blockchain db #UPDATE_CHECK=\"Y\" # Check for updates to scripts, it will still be prompted before proceeding (Y|N). #TMP_DIR=\"/tmp/cnode\" # Folder to hold temporary files in the various scripts, each script might create additional subfolders #EKG_HOST=127.0.0.1 # Set node EKG host IP #EKG_PORT=12788 # Override automatic detection of node EKG port #PROM_HOST=127.0.0.1 # Set node Prometheus host IP #PROM_PORT=12798 # Override automatic detection of node Prometheus port #EKG_TIMEOUT=3 # Maximum time in seconds that you allow EKG request to take before aborting (node metrics) #CURL_TIMEOUT=10 # Maximum time in seconds that you allow curl file download to take before aborting (GitHub update process) #BLOCKLOG_DIR=\"${CNODE_HOME}/guild-db/blocklog\" # Override default directory used to store block data for core node #BLOCKLOG_TZ=\"UTC\" # TimeZone to use when displaying blocklog - https://en.wikipedia.org/wiki/List_of_tz_database_time_zones #SHELLEY_TRANS_EPOCH=208 # Override automatic detection of shelley epoch start, e.g 208 for mainnet #TG_BOT_TOKEN=\"\" # Uncomment and set to enable telegramSend function. To create your own BOT-token and Chat-Id follow guide at: #TG_CHAT_ID=\"\" # https://cardano-community.github.io/guild-operators/Scripts/sendalerts #USE_EKG=\"N\" # Use EKG metrics from the node instead of Promethus. Promethus metrics(default) should yield slightly better performance #TIMEOUT_LEDGER_STATE=300 # Timeout in seconds for querying and dumping ledger-state #IP_VERSION=4 # The IP version to use for push and fetch, valid options: 4 | 6 | mix (Default: 4) #WALLET_FOLDER=\"${CNODE_HOME}/priv/wallet\" # Root folder for Wallets #POOL_FOLDER=\"${CNODE_HOME}/priv/pool\" # Root folder for Pools # Each wallet and pool has a friendly name and subfolder containing all related keys, certificates, ... #POOL_NAME=\"\" # Set the pool's name to run node as a core node (the name, NOT the ticker, ie folder name) #WALLET_PAY_VK_FILENAME=\"payment.vkey\" # Standardized names for all wallet related files #WALLET_PAY_SK_FILENAME=\"payment.skey\" #WALLET_HW_PAY_SK_FILENAME=\"payment.hwsfile\" #WALLET_PAY_ADDR_FILENAME=\"payment.addr\" #WALLET_BASE_ADDR_FILENAME=\"base.addr\" #WALLET_STAKE_VK_FILENAME=\"stake.vkey\" #WALLET_STAKE_SK_FILENAME=\"stake.skey\" #WALLET_HW_STAKE_SK_FILENAME=\"stake.hwsfile\" #WALLET_STAKE_ADDR_FILENAME=\"reward.addr\" #WALLET_STAKE_CERT_FILENAME=\"stake.cert\" #WALLET_STAKE_DEREG_FILENAME=\"stake.dereg\" #WALLET_DELEGCERT_FILENAME=\"delegation.cert\" #POOL_ID_FILENAME=\"pool.id\" # Standardized names for all pool related files #POOL_HOTKEY_VK_FILENAME=\"hot.vkey\" #POOL_HOTKEY_SK_FILENAME=\"hot.skey\" #POOL_COLDKEY_VK_FILENAME=\"cold.vkey\" #POOL_COLDKEY_SK_FILENAME=\"cold.skey\" #POOL_OPCERT_COUNTER_FILENAME=\"cold.counter\" #POOL_OPCERT_FILENAME=\"op.cert\" #POOL_VRF_VK_FILENAME=\"vrf.vkey\" #POOL_VRF_SK_FILENAME=\"vrf.skey\" #POOL_CONFIG_FILENAME=\"pool.config\" #POOL_REGCERT_FILENAME=\"pool.cert\" #POOL_CURRENT_KES_START=\"kes.start\" #POOL_DEREGCERT_FILENAME=\"pool.dereg\" #ASSET_FOLDER=\"${CNODE_HOME}/priv/asset\" # Root folder for Multi-Assets containing minted assets and subfolders for Policy IDs #ASSET_POLICY_VK_FILENAME=\"policy.vkey\" # Standardized names for all multi-asset related files #ASSET_POLICY_SK_FILENAME=\"policy.skey\" #ASSET_POLICY_SCRIPT_FILENAME=\"policy.script\" # File extension '.script' mandatory #ASSET_POLICY_ID_FILENAME=\"policy.id\"","title":"Configuration"},{"location":"Scripts/gliveview/","text":"!> Ensure the Pre-Requisites are in place before you proceed. Guild LiveView - gLiveView is a local monitoring tool to use in addition to remote monitoring tools like Prometheus/Grafana, Zabbix or IOG's RTView. This is especially useful when moving to a systemd deployment - if you haven't done so already - as it offers an intuitive UI to monitor the node status. The tool is independent from other files and can run as a standalone utility that can be stopped/started without affecting the status of cardano-node . Download \u2693\ufe0e If you've used prereqs.sh , you can skip this part, as this is already set up for you. The tool relies on the common env configuration file. To get current epoch blocks, the logMonitor.sh script is needed (and can be combined with CNCLI ). This is optional and Guild LiveView will function without it. ?> For those who follow guild's folder structure and do not wish to run prereqs.sh , you can run the below in $CNODE_HOME/scripts folder To download the script: curl -s -o gLiveView.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/gLiveView.sh curl -s -o env https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/env chmod 755 gLiveView.sh Configuration & Startup \u2693\ufe0e For most setups, it's enough to set CNODE_PORT in the env file. The rest of the variables should automatically be detected. If required, modify User Variables in env and gLiveView.sh to suit your environment. For most standard deployments, this should lead you to a stage where you can now start running ./gLiveView.sh in the folder you downloaded the script (the default location would be $CNODE_HOME/scripts ). Note that the script is smart enough to automatically detect when you're running as a Core or Relay and will show fields accordingly. The tool can be run in legacy mode with only standard ASCII characters for terminals with trouble displaying the box-drawing characters. Run ./gLiveView.sh -h to show available command-line parameters or permanently set it directly in script. A sample output from both core and relay (with peer analysis): Core Relay Upper main section Displays live metrics gathered from EKG. Epoch number and progress is live from the node while date calculation until epoch boundary is based on offline genesis parameters. Reference tip is also an offline calculation based on genesis values used to compare against the node tip to see how far of the tip (diff value) the node is. With current parameters a slot diff up to 40 from reference tip is considered good but it should usually stay below 30. In/Out peers show how many connections the node has established in and out. Core section If the node is run as a core, identified by the 'forge-about-to-lead' EKG parameter, a second core section is displayed. This section contain current and remaining KES periods as well as a calculated date for the expiration. When getting close to expire date the values will change color. Blocks created by the node since node start is another metric shown in this section. If CNCLI is activated to store blocks created in a blocklog DB, data from this blocklog is displayed. If not, blocks created values are taken from EKG metrics. Peer analysis A manual peer analysis can be triggered by key press p . A latency test will be done on incoming and outgoing connections to the node. Outgoing connections(peers in topology file), ping type used is done in this order: 1. cncli - If available, this gives the most accurate measure as it checks the entire handshake process against the remote peer. 2. ss - Sends a TCP SYN package to ping the remote peer on the cardano-node port. Should give ~100% success rate. 2. tcptraceroute - Same as ss. 3. ping - fallback method using ICMP ping against IP. Will only work if firewall of remote peer accept ICMP traffic. For incoming connections, only ICMP ping is used as remote peer port is unknown. It's not uncommon to see many undetermined peers for incoming connections as it's a good security practice to disable ICMP in firewall. Once the analysis is finished, it will display the RTTs (return-trip times) for the peers and group them in ranges 0-50, 50-100, 100-200, 200<. The analysis is NOT live. Press [h] Home to go back to default view or [i] Info to show in-script help text. Up and Down arrow keys is used to select incoming or outgoing detailed list of IPs and their RTT value. Left (<) and Right (>) arrow keys can be used to navigate the pages in the selected list. Troubleshooting/Customisations \u2693\ufe0e In case you run into trouble while running the script, you might want to edit env & gLiveView.sh and look at User Variables section. You can override the values if the automatic detection do not provide the right information, but we would appreciate if you could also notify us by raising an issue against the GitHub repository : gLiveView.sh ###################################### # User Variables - Change as desired # ###################################### NODE_NAME = \"Cardano Node\" # Change your node's name prefix here, keep at or below 19 characters! REFRESH_RATE = 2 # How often (in seconds) to refresh the view (additional time for processing and output may slow it down) LEGACY_MODE = false # (true|false) If enabled unicode box-drawing characters will be replaced by standard ASCII characters RETRIES = 3 # How many attempts to connect to running Cardano node before erroring out and quitting PEER_LIST_CNT = 6 # Number of peers to show on each in/out page in peer analysis view THEME = \"dark\" # dark = suited for terminals with a dark background # light = suited for terminals with a bright background ENABLE_IP_GEOLOCATION = \"Y\" # Enable IP geolocation on outgoing and incoming connections using ip-api.com","title":"Guild LiveView"},{"location":"Scripts/itnrewards/","text":"Concept \u2693\ufe0e To claim rewards earned during the Incentivized TestNet the private and public keys from ITN must be converted to Shelley stake keys. A script called itnRewards.sh has been created to guide you through the process of converting the keys and to create a CNTools compatible wallet from were the rewards can be withdrawn. graph TB A([\"itnRewards.sh\"]) A --x B([\"ITN Owner skey (ed25519[e]_sk)..\"]) --x D([\"cardano-cli shelley key convert-itn-key ..\"]) A --x C([\"ITN Owner vkey (ed25519_pk)..\"]) --x D D --x E([\"Stake skey/vkey\"]) --x L A --x F([\"cardano-cli shelley ..\"]) F --x G([\"Payment skey/vkey/addr\"]) --x L F --x H([\"Reward addr\"]) --x L F --x I([\"Base addr\"]) --x L L[CNTools Wallet] ; Steps \u2693\ufe0e If the secret key used for jcli account in ITN was ed25519_sk (not extended), you can run the itnRewards.sh script providing the name for the CNTools wallet and ITN owner public / secret keys that were used to register your pool as below. cd $CNODE_HOME /scripts ./itnRewards.sh MyITNWallet ~/jormu/account/priv/owner.sk ~/jormu/account/priv/owner.pk Start CNTools and verify that the correct balance is shown in the wallet reward address Fund base address of the wallet with enough funds to pay the withdraw tx fee Use FUNDS >> WITHDRAW to move rewards to the base address of wallet You can now spend/move funds as you see fit","title":"ITN Rewards"},{"location":"Scripts/itnrewards/#concept","text":"To claim rewards earned during the Incentivized TestNet the private and public keys from ITN must be converted to Shelley stake keys. A script called itnRewards.sh has been created to guide you through the process of converting the keys and to create a CNTools compatible wallet from were the rewards can be withdrawn. graph TB A([\"itnRewards.sh\"]) A --x B([\"ITN Owner skey (ed25519[e]_sk)..\"]) --x D([\"cardano-cli shelley key convert-itn-key ..\"]) A --x C([\"ITN Owner vkey (ed25519_pk)..\"]) --x D D --x E([\"Stake skey/vkey\"]) --x L A --x F([\"cardano-cli shelley ..\"]) F --x G([\"Payment skey/vkey/addr\"]) --x L F --x H([\"Reward addr\"]) --x L F --x I([\"Base addr\"]) --x L L[CNTools Wallet] ;","title":"Concept"},{"location":"Scripts/itnrewards/#steps","text":"If the secret key used for jcli account in ITN was ed25519_sk (not extended), you can run the itnRewards.sh script providing the name for the CNTools wallet and ITN owner public / secret keys that were used to register your pool as below. cd $CNODE_HOME /scripts ./itnRewards.sh MyITNWallet ~/jormu/account/priv/owner.sk ~/jormu/account/priv/owner.pk Start CNTools and verify that the correct balance is shown in the wallet reward address Fund base address of the wallet with enough funds to pay the withdraw tx fee Use FUNDS >> WITHDRAW to move rewards to the base address of wallet You can now spend/move funds as you see fit","title":"Steps"},{"location":"Scripts/itnwitness/","text":"Disclaimer Currently this is to protect the existing pools from the ITN who already have a delegator base against spoofing - to avoid scammers building on results of ITN from known pools. There would be a solution in the future for Mainnet nodes too - but it doesn't apply to those in its current form. Concept \u2693\ufe0e Due to the expected ticker spoofing attack for pools that were famous during ITN, some of the community members have proposed an interim solution to verify the legitimacy of a pool for delegators. You can check the high-level workflow below: graph TB A(\"ITN Owner skey (ed25519/ed25519e) ..\") --x C([\"jcli key sign ..\"]) B(\"Haskell Pool ID (pool.id) ..\") --x C C --x D(\"Signature key, (pool.sig) ..\") E(\"ITN Owner vkey (ed25519_pk) ..\") --x F(\"Extended Metadata JSON (poolmeta_extended.json) ..\") D --x F F --x G(\"Pool Meta JSON (poolmeta.json) ..\") ; Steps \u2693\ufe0e The actual implementation is pretty straightforward, we will keep it brisk - as we assume ones participating are fairly familiar with jcli usage. You need to use your owner keys that were used to register your pool, and it should match the owner public key you presented on official cardano-foundation github while registering metadata. Store your pool ID in a file (eg: mainnet_pool.id ) Sign the file using your owner secret key from ITN (eg: owner_skey ) as per below: jcli key sign --secret-key ~/jormu/account/priv/owner.sk $CNODE_HOME /priv/pool/TEST/pool.id --output mainnet_pool.sig cat mainnet_pool.sig # ed25519_sig1sn32v3z...d72rg7rc6gs Add this signature and owner public key to the extended pool JSON , so that it looks like below: { \"itn\" : { \"owner\" : \"ed25519_pk1...\" , \"witness\" : \"ed25519_sig1...\" } } Host this signature file online at a URL with raw contents easily accessible on the internet (eg: https://my.pool.com/extended-metadata.json ) When you register/modify a pool using CNTools, use the above mentioned URL to add to your pool metadata. If the process is approved to appear for wallets, we may consider providing easier alternatives. If any queries about the process, or any additions please create a git issue/PR against guild repository - to capture common queries and update instructions/help text where appropriate. Sample output of JSON files generated \u2693\ufe0e Metadata JSON used for registering pool (one that will be hosted URL used to define pool, eg: https://hosting.site/poolmeta.json ) { \"name\" : \"Test\" , \"ticker\" : \"TEST\" , \"description\" : \"For demo purposes only\" , \"homepage\" : \"https://hosting.site\" , \"nonce\" : \"1595816423\" , \"extended\" : \"https://hosting.site/poolmeta_extended.json\" } Extended Metadata JSON used for hosting additional metadata (hosted at URL referred in extended field above, thus - eg : https://hosting.site/poolmeta_extended.json ) { \"itn\" : { \"owner\" : \"ed25519_pk1...\" , \"witness\" : \"ed25519_sig1...\" } }","title":"ITN Metadata Proof"},{"location":"Scripts/itnwitness/#concept","text":"Due to the expected ticker spoofing attack for pools that were famous during ITN, some of the community members have proposed an interim solution to verify the legitimacy of a pool for delegators. You can check the high-level workflow below: graph TB A(\"ITN Owner skey (ed25519/ed25519e) ..\") --x C([\"jcli key sign ..\"]) B(\"Haskell Pool ID (pool.id) ..\") --x C C --x D(\"Signature key, (pool.sig) ..\") E(\"ITN Owner vkey (ed25519_pk) ..\") --x F(\"Extended Metadata JSON (poolmeta_extended.json) ..\") D --x F F --x G(\"Pool Meta JSON (poolmeta.json) ..\") ;","title":"Concept"},{"location":"Scripts/itnwitness/#steps","text":"The actual implementation is pretty straightforward, we will keep it brisk - as we assume ones participating are fairly familiar with jcli usage. You need to use your owner keys that were used to register your pool, and it should match the owner public key you presented on official cardano-foundation github while registering metadata. Store your pool ID in a file (eg: mainnet_pool.id ) Sign the file using your owner secret key from ITN (eg: owner_skey ) as per below: jcli key sign --secret-key ~/jormu/account/priv/owner.sk $CNODE_HOME /priv/pool/TEST/pool.id --output mainnet_pool.sig cat mainnet_pool.sig # ed25519_sig1sn32v3z...d72rg7rc6gs Add this signature and owner public key to the extended pool JSON , so that it looks like below: { \"itn\" : { \"owner\" : \"ed25519_pk1...\" , \"witness\" : \"ed25519_sig1...\" } } Host this signature file online at a URL with raw contents easily accessible on the internet (eg: https://my.pool.com/extended-metadata.json ) When you register/modify a pool using CNTools, use the above mentioned URL to add to your pool metadata. If the process is approved to appear for wallets, we may consider providing easier alternatives. If any queries about the process, or any additions please create a git issue/PR against guild repository - to capture common queries and update instructions/help text where appropriate.","title":"Steps"},{"location":"Scripts/itnwitness/#sample-output-of-json-files-generated","text":"Metadata JSON used for registering pool (one that will be hosted URL used to define pool, eg: https://hosting.site/poolmeta.json ) { \"name\" : \"Test\" , \"ticker\" : \"TEST\" , \"description\" : \"For demo purposes only\" , \"homepage\" : \"https://hosting.site\" , \"nonce\" : \"1595816423\" , \"extended\" : \"https://hosting.site/poolmeta_extended.json\" } Extended Metadata JSON used for hosting additional metadata (hosted at URL referred in extended field above, thus - eg : https://hosting.site/poolmeta_extended.json ) { \"itn\" : { \"owner\" : \"ed25519_pk1...\" , \"witness\" : \"ed25519_sig1...\" } }","title":"Sample output of JSON files generated"},{"location":"Scripts/logmonitor/","text":"!> Ensure the Pre-Requisites are in place before you proceed. logMonitor.sh is a general purpose JSON log monitoring script for traces created by cardano-node . Currently, it looks for traces related to leader slots and block creation but other uses could be added in the future. Block traces \u2693\ufe0e For the core node (block producer) the logMonitor.sh script can be run to monitor the JSON log file created by cardano-node for traces related to leader slots and block creation. For optimal coverage, it's best run together with CNCLI scripts as they provide different functionalities. Together, they create a complete picture of blocks assigned, created, validated or invalidated due to node issues. Installation \u2693\ufe0e The script is best run as a background process. This can be accomplished in many ways but the preferred method is to run it as a systemd service. A terminal multiplexer like tmux or screen could also be used but not covered here. Use the deploy-as-systemd.sh script to create a systemd unit file (deployed together with CNCLI ). Log output is handled by syslog and end up in the systems standard syslog file, normally /var/log/syslog . journalctl -f -u cnode-logmonitor.service can be used to check service output (follow mode). Other logging configurations are not covered here. View Blocklog \u2693\ufe0e Best viewed in CNTools or gLiveView. See CNCLI for example output.","title":"Log Monitor"},{"location":"Scripts/sendalerts/","text":"!> Ensure the Pre-Requisites are in place before you proceed. This section describes the ways in which CNTools can send important messages to the operator. Telegram alerts \u2693\ufe0e If known but unwanted errors occur on your node, or if characteristic values indicate an unusual status , CNTools can send you Telegram alert messages. To do this, you first have to activate your own bot and link it to your own Telegram user. Here is an explanation of how this works: Open Telegram and search for \" botfather \". Write him your wish: /newbot . Define a name for your bot, such as cntools_[POOLNAME]_alerts . Botfather will confirm the creation of your bot by giving you the unique bot access token . Keep it safe and private. Now send at least one direct message to your new bot. Open this URL in your browser by using your own, just created bot access token: https://api.telegram.org/bot<your-access-token>/getUpdates the result is a JSON. Look for the value of result.message.chat.id . This chat id should be a large integer number. This is all you need to enable your Telegram alerts in the scripts/env file - uncomment and add the chat ID to the TG_CHAT_ID user variable in the env file: ... TG_CHAT_ID=\"<YOUR_TG_CHAT_ID>\" ...","title":"Sendalerts"},{"location":"Scripts/sendalerts/#telegram-alerts","text":"If known but unwanted errors occur on your node, or if characteristic values indicate an unusual status , CNTools can send you Telegram alert messages. To do this, you first have to activate your own bot and link it to your own Telegram user. Here is an explanation of how this works: Open Telegram and search for \" botfather \". Write him your wish: /newbot . Define a name for your bot, such as cntools_[POOLNAME]_alerts . Botfather will confirm the creation of your bot by giving you the unique bot access token . Keep it safe and private. Now send at least one direct message to your new bot. Open this URL in your browser by using your own, just created bot access token: https://api.telegram.org/bot<your-access-token>/getUpdates the result is a JSON. Look for the value of result.message.chat.id . This chat id should be a large integer number. This is all you need to enable your Telegram alerts in the scripts/env file - uncomment and add the chat ID to the TG_CHAT_ID user variable in the env file: ... TG_CHAT_ID=\"<YOUR_TG_CHAT_ID>\" ...","title":"Telegram alerts"},{"location":"Scripts/topologyupdater/","text":"Reminder !! Since the network has to get along without the P2P network module for the time being, it needs static topology files. This \"TopologyUpdater\" service, which is far from being perfect due to its centralization factor, is intended to be a temporary solution to allow everyone to activate their relay nodes without having to postpone and wait for manual topology completion requests. You should NOT set up topologyUpdater for your block producing nodes. The topologyUpdater shell script must be executed on the relay node as a cronjob exactly every 60 minutes . After 4 consecutive requests (3 hours) the node is considered a new relay node in listed in the topology file. If the node is turned off, it's automatically delisted after 3 hours. Download and Configure \u2693\ufe0e If you have run prereqs.sh , this should already be available in your scripts folder and make this step unnecessary. Before the updater can make a valid request to the central topology service, it must query the current tip/blockNo from the well-synced local node. It connects to your node through the configuration in the script as well as the common env configuration file. Customize these files for your needs. To download topologyUpdater.sh manually, you can execute the commands below and test executing Topology Updater once (it's OK if first execution gives back an error): cd $CNODE_HOME /scripts curl -s -o topologyUpdater.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/topologyUpdater.sh curl -s -o env https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/env chmod 750 topologyUpdater.sh ./topologyUpdater.sh Examine and modify the variables within topologyUpdater.sh script \u2693\ufe0e Out of the box, the scripts might come with some assumptions, that may or may not be valid for your environment. One of the common changes as an SPO would be to the complete CUSTOM_PEERS section as below to include your local relays/BP nodes (described in the How do I add my own nodes section ), and any additional peers you'd like to be always available at minimum. Please do take time to update the variables in User Variables section in env & topologyUpdater.sh : ### topologyUpdater.sh ###################################### # User Variables - Change as desired # ###################################### CNODE_HOSTNAME = \"CHANGE ME\" # (Optional) Must resolve to the IP you are requesting from CNODE_VALENCY = 1 # (Optional) for multi-IP hostnames MAX_PEERS = 15 # Maximum number of peers to return on successful fetch #CUSTOM_PEERS=\"None\" # Additional custom peers to (IP:port[:valency]) to add to your target topology.json # eg: \"10.0.0.1:3001|10.0.0.2:3002|relays.mydomain.com:3003:3\" #BATCH_AUTO_UPDATE=N # Set to Y to automatically update the script if a new version is available without user interaction Any customisations you add above, will be saved across future prereqs.sh executions, unless you specify the -f flag to overwrite completely. Deploy the script \u2693\ufe0e systemd service The script can be deployed as a background service in different ways but the recommended and easiest way if prereqs.sh was used, is to utilize the deploy-as-systemd.sh script to setup and schedule the execution. This will deploy both push & fetch service files as well as timers for a scheduled 60 min node alive message and cnode restart at the user set interval (default: 24 hours) when running the deploy script. cnode-tu-push.service : pushes a node alive message to Topology Updater API cnode-tu-push.timer : schedules the push service to execute once every hour cnode-tu-fetch.service : fetches a fresh topology file before the cnode.service file is started/restarted cnode-tu-restart.service : handles the restart of cardano-node ( cnode.sh ) cnode-tu-restart.timer : schedules the cardano-node restart service, default every 24h systemctl list-timers can be used to to check the push and restart service schedule. crontab job Another way to deploy the topologyUpdater.sh script is as a crontab job. Add the script to be executed once per hour at a minute of your choice (eg xx:25 o'clock in the example below). The example below will handle both the fetch and push in a single call to the script once an hour. In addition to the below crontab job for topologyUpdater, it's expected that you also add a scheduled restart of the relay node to pick up a fresh topology file fetched by topologyUpdater script with relays that are alive and well. 25 * * * * /opt/cardano/cnode/scripts/topologyUpdater.sh Logs \u2693\ufe0e You can check the last result of push message in logs/topologyUpdater_lastresult.json . If deployed as systemd service, use sudo journalctl -u <service> to check output from service. If one of the parameters is outside the allowed ranges, invalid or missing the returned JSON will tell you what needs to be fixed. Don't try to execute the script more often than once per hour. It's completely useless and may lead to a temporary blacklisting. Why does my topology file only contain IOG peers? \u2693\ufe0e Each subscribed node (4 consecutive requests) is allowed to fetch a subset of other nodes to prove loyalty/stability of the relay. Until reaching this point, your fetch calls will only return IOG peers combined with any custom peers added in USER VARIABLES section of topologyUpdater.sh script The engineers of cardano-node network stack suggested to use around 20 peers. More peers create unnecessary and unwanted system load and delays. In its default setting, topologyUpdater returns a list of 15 remote peers. Note that the change in topology is only effective upon restart of your node. Make sure you account for some scheduled restarts on your relays, to help onboard newer relays onto the network (as described in the systemd section ). How do I add my own relays/static nodes in addition to dynamic list generated by topologyUpdater? \u2693\ufe0e Most of the Stake Pool Operators may have few preferences (own relays, close friends, etc) that they would like to add to their topology by default. This is where the CUSTOM_PEERS variable in topologyUpdater.sh comes in. You can add a list of peers in the format of: hostname/IP:port[:valency] here and the output topology.json formed will already include the custom peers that you supplied. Every custom peer is defined in the form [address]:[port] and optional :[valency] (if not specified, the valency defaults to 1 ). Multiple custom peers are separated by | . An example of a valid CUSTOM_PEERS variable would be: CUSTOM_PEERS = \"foo.bar.io:3001:2|198.175.21.197:6001|36.233.3.89:6000 The list above would add three custom peers with the specified addresses and ports, with the first one additionally specifying the optional valency parameter (in this case 2 ). How are the peers for my topology file selected? \u2693\ufe0e We calculate the distance on the Earth's surface from your node's IP to all subscribed peers. We then order the peers by distance (closest first) and start by selecting one peer. We then skip some, pick the next, skip, pick, skip, pick ... until we reach the end of the list (furthest away). The number of skipped records is calculated in a way to have the desired number of peers at the end. Every requesting node has its personal distance to all other nodes. We assume this should result in a well-distributed and interconnected peering network.","title":"Topology Updater"},{"location":"Scripts/topologyupdater/#download","text":"If you have run prereqs.sh , this should already be available in your scripts folder and make this step unnecessary. Before the updater can make a valid request to the central topology service, it must query the current tip/blockNo from the well-synced local node. It connects to your node through the configuration in the script as well as the common env configuration file. Customize these files for your needs. To download topologyUpdater.sh manually, you can execute the commands below and test executing Topology Updater once (it's OK if first execution gives back an error): cd $CNODE_HOME /scripts curl -s -o topologyUpdater.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/topologyUpdater.sh curl -s -o env https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/env chmod 750 topologyUpdater.sh ./topologyUpdater.sh","title":"Download and Configure"},{"location":"Scripts/topologyupdater/#modify","text":"Out of the box, the scripts might come with some assumptions, that may or may not be valid for your environment. One of the common changes as an SPO would be to the complete CUSTOM_PEERS section as below to include your local relays/BP nodes (described in the How do I add my own nodes section ), and any additional peers you'd like to be always available at minimum. Please do take time to update the variables in User Variables section in env & topologyUpdater.sh : ### topologyUpdater.sh ###################################### # User Variables - Change as desired # ###################################### CNODE_HOSTNAME = \"CHANGE ME\" # (Optional) Must resolve to the IP you are requesting from CNODE_VALENCY = 1 # (Optional) for multi-IP hostnames MAX_PEERS = 15 # Maximum number of peers to return on successful fetch #CUSTOM_PEERS=\"None\" # Additional custom peers to (IP:port[:valency]) to add to your target topology.json # eg: \"10.0.0.1:3001|10.0.0.2:3002|relays.mydomain.com:3003:3\" #BATCH_AUTO_UPDATE=N # Set to Y to automatically update the script if a new version is available without user interaction Any customisations you add above, will be saved across future prereqs.sh executions, unless you specify the -f flag to overwrite completely.","title":"Examine and modify the variables within topologyUpdater.sh script"},{"location":"Scripts/topologyupdater/#deploy","text":"systemd service The script can be deployed as a background service in different ways but the recommended and easiest way if prereqs.sh was used, is to utilize the deploy-as-systemd.sh script to setup and schedule the execution. This will deploy both push & fetch service files as well as timers for a scheduled 60 min node alive message and cnode restart at the user set interval (default: 24 hours) when running the deploy script. cnode-tu-push.service : pushes a node alive message to Topology Updater API cnode-tu-push.timer : schedules the push service to execute once every hour cnode-tu-fetch.service : fetches a fresh topology file before the cnode.service file is started/restarted cnode-tu-restart.service : handles the restart of cardano-node ( cnode.sh ) cnode-tu-restart.timer : schedules the cardano-node restart service, default every 24h systemctl list-timers can be used to to check the push and restart service schedule. crontab job Another way to deploy the topologyUpdater.sh script is as a crontab job. Add the script to be executed once per hour at a minute of your choice (eg xx:25 o'clock in the example below). The example below will handle both the fetch and push in a single call to the script once an hour. In addition to the below crontab job for topologyUpdater, it's expected that you also add a scheduled restart of the relay node to pick up a fresh topology file fetched by topologyUpdater script with relays that are alive and well. 25 * * * * /opt/cardano/cnode/scripts/topologyUpdater.sh","title":"Deploy the script"},{"location":"Scripts/topologyupdater/#logs","text":"You can check the last result of push message in logs/topologyUpdater_lastresult.json . If deployed as systemd service, use sudo journalctl -u <service> to check output from service. If one of the parameters is outside the allowed ranges, invalid or missing the returned JSON will tell you what needs to be fixed. Don't try to execute the script more often than once per hour. It's completely useless and may lead to a temporary blacklisting.","title":"Logs"},{"location":"Scripts/topologyupdater/#why-does-my-topology-file-only-contain-iog-peers","text":"Each subscribed node (4 consecutive requests) is allowed to fetch a subset of other nodes to prove loyalty/stability of the relay. Until reaching this point, your fetch calls will only return IOG peers combined with any custom peers added in USER VARIABLES section of topologyUpdater.sh script The engineers of cardano-node network stack suggested to use around 20 peers. More peers create unnecessary and unwanted system load and delays. In its default setting, topologyUpdater returns a list of 15 remote peers. Note that the change in topology is only effective upon restart of your node. Make sure you account for some scheduled restarts on your relays, to help onboard newer relays onto the network (as described in the systemd section ).","title":"Why does my topology file only contain IOG peers?"},{"location":"Scripts/topologyupdater/#how-do-i-add-my-own-relaysstatic-nodes-in-addition-to-dynamic-list-generated-by-topologyupdater","text":"Most of the Stake Pool Operators may have few preferences (own relays, close friends, etc) that they would like to add to their topology by default. This is where the CUSTOM_PEERS variable in topologyUpdater.sh comes in. You can add a list of peers in the format of: hostname/IP:port[:valency] here and the output topology.json formed will already include the custom peers that you supplied. Every custom peer is defined in the form [address]:[port] and optional :[valency] (if not specified, the valency defaults to 1 ). Multiple custom peers are separated by | . An example of a valid CUSTOM_PEERS variable would be: CUSTOM_PEERS = \"foo.bar.io:3001:2|198.175.21.197:6001|36.233.3.89:6000 The list above would add three custom peers with the specified addresses and ports, with the first one additionally specifying the optional valency parameter (in this case 2 ).","title":"How do I add my own relays/static nodes in addition to dynamic list generated by topologyUpdater?"},{"location":"Scripts/topologyupdater/#how-are-the-peers-for-my-topology-file-selected","text":"We calculate the distance on the Earth's surface from your node's IP to all subscribed peers. We then order the peers by distance (closest first) and start by selecting one peer. We then skip some, pick the next, skip, pick, skip, pick ... until we reach the end of the list (furthest away). The number of skipped records is calculated in a way to have the desired number of peers at the end. Every requesting node has its personal distance to all other nodes. We assume this should result in a well-distributed and interconnected peering network.","title":"How are the peers for my topology file selected?"},{"location":"docker/build/","text":"Intro \u2693\ufe0e \ud83d\udca1 Docker containers are fastest way to run a Cardano node in both \"Relay\" and \"Block-Producing\" mode. For easy of use and maintenance we adopted a 3 stage building strategy. Each stage derives from a specific phase of the building strategy: stage1 \u2192 is the first stage of the builds and the only thing it does is to prepare the compiling environment. stage2 \u2192 at this stage the Cardano source code is downloaded and compiled on top of the stage1. stage3 \u2192 Here is where we copy over a new debian-slim image the results of the copiled software (binaries and libs) including the guild's scripts and tools. How to build \u2693\ufe0e You can chose to just start building from the stage3 (or a custom stage3 dockerfile) or build all 3 stages from scratch. Instead of specifying a context, you can pass a single Dockerfile in the URL or pipe the file in via STDIN. Pipe the chosen Dockerfile (i.e. dockerfile_stage3 ) from STDIN: Building the Stage1 docker build -t cardanocommunity/cardano-node:stage1 - < dockerfile_stage1 Building the Stage2 docker build -t cardanocommunity/cardano-node:stage2 - < dockerfile_stage2 Building the Stage3 docker build -t cardanocommunity/cardano-node:stage3 - < dockerfile_stage3 For Windows Users \u2693\ufe0e With Powershell on Windows, you can run docker by typing the following command: Get-Content dockerfile_stage3 | docker build -t guild-operators/cardano-node:latest - See also \u2693\ufe0e Docker Tips Docker Official Docs","title":"Build"},{"location":"docker/build/#intro","text":"\ud83d\udca1 Docker containers are fastest way to run a Cardano node in both \"Relay\" and \"Block-Producing\" mode. For easy of use and maintenance we adopted a 3 stage building strategy. Each stage derives from a specific phase of the building strategy: stage1 \u2192 is the first stage of the builds and the only thing it does is to prepare the compiling environment. stage2 \u2192 at this stage the Cardano source code is downloaded and compiled on top of the stage1. stage3 \u2192 Here is where we copy over a new debian-slim image the results of the copiled software (binaries and libs) including the guild's scripts and tools.","title":"Intro"},{"location":"docker/build/#how-to-build","text":"You can chose to just start building from the stage3 (or a custom stage3 dockerfile) or build all 3 stages from scratch. Instead of specifying a context, you can pass a single Dockerfile in the URL or pipe the file in via STDIN. Pipe the chosen Dockerfile (i.e. dockerfile_stage3 ) from STDIN: Building the Stage1 docker build -t cardanocommunity/cardano-node:stage1 - < dockerfile_stage1 Building the Stage2 docker build -t cardanocommunity/cardano-node:stage2 - < dockerfile_stage2 Building the Stage3 docker build -t cardanocommunity/cardano-node:stage3 - < dockerfile_stage3","title":"How to build"},{"location":"docker/build/#for-windows-users","text":"With Powershell on Windows, you can run docker by typing the following command: Get-Content dockerfile_stage3 | docker build -t guild-operators/cardano-node:latest -","title":"For Windows Users"},{"location":"docker/build/#see-also","text":"Docker Tips Docker Official Docs","title":"See also"},{"location":"docker/docker/","text":"Running your own Cardano node has never been so fast and easy. But first, a kind reminder to the security aspects of running docker containers . External resources \u2693\ufe0e DockerHub Guild's images YouTube Guild's Videos \ud83d\udd14 Built-in tools \u2693\ufe0e CNTools gLiveView CNCLI Monitoring ready EKG, Prometheus Guild Operators Docker startegy (testnet / mainnet / staging / guild) \u2693\ufe0e Modular docker images based on Debian. Based on the Guild's work we decided to build the Cardano Node images in 3 stages: 1 st stage: it uses prereq.sh to prepare the development enviroment before compiling the node source code. -> Stage1 2 nd stage: based on stage1, this stage intent is to compile and produce the binaries of the node. -> Stage2 3 rd stage: based upon a minimal debian image it incorporates the node's binaries as well as all the Guild's tools. -> Stage3 Additional docs \u2693\ufe0e If you prefer to build the images your own than you can check: Docker Build Documentation Docker Tips Port mapping \u2693\ufe0e The dockerfiles are located in ./files/docker/ Node Ports Wallet Ports Flavor Node (6000) Wallet (8090) Debian Prometheus (12798) Prometheus (12798) EKG (12781)","title":"Overview"},{"location":"docker/docker/#external-resources","text":"DockerHub Guild's images YouTube Guild's Videos","title":"External resources"},{"location":"docker/docker/#built-in-tools","text":"CNTools gLiveView CNCLI Monitoring ready EKG, Prometheus","title":"\ud83d\udd14 Built-in tools"},{"location":"docker/docker/#strategy","text":"Modular docker images based on Debian. Based on the Guild's work we decided to build the Cardano Node images in 3 stages: 1 st stage: it uses prereq.sh to prepare the development enviroment before compiling the node source code. -> Stage1 2 nd stage: based on stage1, this stage intent is to compile and produce the binaries of the node. -> Stage2 3 rd stage: based upon a minimal debian image it incorporates the node's binaries as well as all the Guild's tools. -> Stage3","title":"Guild Operators Docker startegy (testnet / mainnet / staging / guild)"},{"location":"docker/docker/#additional-docs","text":"If you prefer to build the images your own than you can check: Docker Build Documentation Docker Tips","title":"Additional docs"},{"location":"docker/docker/#port-mapping","text":"The dockerfiles are located in ./files/docker/ Node Ports Wallet Ports Flavor Node (6000) Wallet (8090) Debian Prometheus (12798) Prometheus (12798) EKG (12781)","title":"Port mapping"},{"location":"docker/run/","text":"OS Requirements \u2693\ufe0e docker-ce installed - Get Docker . Private mode Use Cases \u2693\ufe0e Pool Management Wallet Management Node testing docker run -dit --name <YourCName> --security-opt = no-new-privileges -e NETWORK = mainnet -v <your_custom_path>:/opt/cardano/cnode/priv -v <your_custom_db_path>:/opt/cardano/cnode/db cardanocommunity/cardano-node Public mode Use Cases: \u2693\ufe0e Node Relay docker run -dit --name <YourCName> --security-opt = no-new-privileges -e NETWORK = mainnet -p 6000 :6000 -v <your_custom_path>:/opt/cardano/cnode/priv -v <your_custom_db_path>:/opt/cardano/cnode/db cardanocommunity/cardano-node Note --entrypoint=bash # This option won't start the node but only the docker OS, ready to get in and play with it.","title":"Run"},{"location":"docker/run/#os-requirements","text":"docker-ce installed - Get Docker . Private mode","title":"OS Requirements"},{"location":"docker/run/#use-cases","text":"Pool Management Wallet Management Node testing docker run -dit --name <YourCName> --security-opt = no-new-privileges -e NETWORK = mainnet -v <your_custom_path>:/opt/cardano/cnode/priv -v <your_custom_db_path>:/opt/cardano/cnode/db cardanocommunity/cardano-node Public mode","title":"Use Cases"},{"location":"docker/run/#use-cases_1","text":"Node Relay docker run -dit --name <YourCName> --security-opt = no-new-privileges -e NETWORK = mainnet -p 6000 :6000 -v <your_custom_path>:/opt/cardano/cnode/priv -v <your_custom_db_path>:/opt/cardano/cnode/db cardanocommunity/cardano-node Note --entrypoint=bash # This option won't start the node but only the docker OS, ready to get in and play with it.","title":"Use Cases:"},{"location":"docker/security/","text":"Docker Security best practices \u2693\ufe0e Intro \u2693\ufe0e On the security front, Docker developers are faced with different types of security attacks such as: Kernel exploits: Since the host\u2019s kernel is shared in the container, a compromised container can attack the entire host. Container breakouts: Caused when the user is able to escape the container namespace and interact with other processes on the host. Denial-of-service attacks: Occur when some containers take up enough resources to hamper the functioning of other applications. Poisoned images: Caused when an untrusted image is being run and a hacker is able to access application data and, potentially, the host itself. Docker containers are now being exploited to covertly mine for cryptocurrency, marking a shift from ransomware to cryptocurrency malware. As with all things in security, also Docker security is a moving target \u2014 so it\u2019s helpful to have access to up-to-date information, including experience-based best practices, for securing your containerized environments. Here below some key concepts: \u2693\ufe0e Use a Third-Party Security Tool Docker allows you to use containers from untrusted public repositories, which increases the need to scrutinize whether the container was created securely and whether it is free of any corrupt or malicious files. For this, use a multi-purpose security tool that gives extensive dev-to-production security controls.(keep reading below) Manage Vulnerability It is best to have a sound vulnerability management program that has multiple checks throughout the container lifecycle. Vulnerability management should incorporate quality gates to detect access issues and weaknesses for a potential exploit from dev-to-production environments. Monitor and Audit Container Activity It is vital to monitor the container ecosystem and detect suspicious activity. Container monitoring activities provide real-time reports that can help you react promptly to a security breach. Enable Docker Content Trust Docker Content Trust is a new feature incorporated into Docker 1.8. It is disabled by default, but once enabled, allows you to verify the integrity, authenticity, and publication date of all Docker images from the Docker Hub Registry. Use Docker Bench for Security You should consider Docker Bench for Security as your must-use script. Once the script is run, you will notice a lot of information regarding configuration best practices for deploying Docker containers that can be used to further secure your Docker server and containers. Resource Utilization To reduce performance impacts and denial-of-service attacks, it is a good practice to implement limits on the system resources that the containers can consume. If, for example, a web server is compromised, it helps to limit the impact to the other processes that are running on a host. RBAC RBAC is role-based access control. If you have multiple users accessing you enviroment, this is a must-have. It can be quite expensive to implement but portainer makes it super easy. Security Docker best practices: \u2693\ufe0e The Guild Docker images are not using all the following tips due to functional purpose \u2693\ufe0e Guild tips: - NEVER NEVER NEVER expose Docker API publicly!!! (disabled by default) Keep Docker Host Up-to-date Reverse uptime: containers that are frequently shut down and replaced by new container are more difficult for hackers to attack. Use a Firewall or Expose only the ports you need to be public. Use a * Reverse Proxy Do not Change ** Docker Socket Ownership Do not Run Docker Containers as Root Use Trusted Docker Images Use Privileged Mode Carefully (This is usually done by adding --privileged you can use --security-opt=no-new-privileges instead) Some more general tips: - Restrict container capabilities: \"--cap-drop ALL\" - Use Docker Secrets - Change DOCKER_OPTS to ***Respect IP Table Firewall - Control Docker Resource Usage - Rate Limit : is quite common to mitigate brute force or denial of service attacks. - Fail2ban : Fail2ban scans your log files and bans IP address that shows malicious intent - Container Vulnerability Scanner Notes: \u2693\ufe0e *Nginx is a very good choice as load balancer and/or reverse proxy. **By default the socket is owned by root user and docker group. *** On Ubuntu/Debian based systems, edit /etc/default/docker and add the following line: DOCKER_OPTS= \"--iptables=false\"","title":"Security"},{"location":"docker/security/#docker-security-best-practices","text":"","title":"Docker Security best practices"},{"location":"docker/security/#intro","text":"On the security front, Docker developers are faced with different types of security attacks such as: Kernel exploits: Since the host\u2019s kernel is shared in the container, a compromised container can attack the entire host. Container breakouts: Caused when the user is able to escape the container namespace and interact with other processes on the host. Denial-of-service attacks: Occur when some containers take up enough resources to hamper the functioning of other applications. Poisoned images: Caused when an untrusted image is being run and a hacker is able to access application data and, potentially, the host itself. Docker containers are now being exploited to covertly mine for cryptocurrency, marking a shift from ransomware to cryptocurrency malware. As with all things in security, also Docker security is a moving target \u2014 so it\u2019s helpful to have access to up-to-date information, including experience-based best practices, for securing your containerized environments.","title":"Intro"},{"location":"docker/security/#here-below-some-key-concepts","text":"Use a Third-Party Security Tool Docker allows you to use containers from untrusted public repositories, which increases the need to scrutinize whether the container was created securely and whether it is free of any corrupt or malicious files. For this, use a multi-purpose security tool that gives extensive dev-to-production security controls.(keep reading below) Manage Vulnerability It is best to have a sound vulnerability management program that has multiple checks throughout the container lifecycle. Vulnerability management should incorporate quality gates to detect access issues and weaknesses for a potential exploit from dev-to-production environments. Monitor and Audit Container Activity It is vital to monitor the container ecosystem and detect suspicious activity. Container monitoring activities provide real-time reports that can help you react promptly to a security breach. Enable Docker Content Trust Docker Content Trust is a new feature incorporated into Docker 1.8. It is disabled by default, but once enabled, allows you to verify the integrity, authenticity, and publication date of all Docker images from the Docker Hub Registry. Use Docker Bench for Security You should consider Docker Bench for Security as your must-use script. Once the script is run, you will notice a lot of information regarding configuration best practices for deploying Docker containers that can be used to further secure your Docker server and containers. Resource Utilization To reduce performance impacts and denial-of-service attacks, it is a good practice to implement limits on the system resources that the containers can consume. If, for example, a web server is compromised, it helps to limit the impact to the other processes that are running on a host. RBAC RBAC is role-based access control. If you have multiple users accessing you enviroment, this is a must-have. It can be quite expensive to implement but portainer makes it super easy.","title":"Here below some key concepts:"},{"location":"docker/security/#security-docker-best-practices","text":"","title":"Security Docker best practices:"},{"location":"docker/security/#the-guild-docker-images-are-not-using-all-the-following-tips-due-to-functional-purpose","text":"Guild tips: - NEVER NEVER NEVER expose Docker API publicly!!! (disabled by default) Keep Docker Host Up-to-date Reverse uptime: containers that are frequently shut down and replaced by new container are more difficult for hackers to attack. Use a Firewall or Expose only the ports you need to be public. Use a * Reverse Proxy Do not Change ** Docker Socket Ownership Do not Run Docker Containers as Root Use Trusted Docker Images Use Privileged Mode Carefully (This is usually done by adding --privileged you can use --security-opt=no-new-privileges instead) Some more general tips: - Restrict container capabilities: \"--cap-drop ALL\" - Use Docker Secrets - Change DOCKER_OPTS to ***Respect IP Table Firewall - Control Docker Resource Usage - Rate Limit : is quite common to mitigate brute force or denial of service attacks. - Fail2ban : Fail2ban scans your log files and bans IP address that shows malicious intent - Container Vulnerability Scanner","title":"The Guild Docker images are not using all the following tips due to functional purpose"},{"location":"docker/security/#notes","text":"*Nginx is a very good choice as load balancer and/or reverse proxy. **By default the socket is owned by root user and docker group. *** On Ubuntu/Debian based systems, edit /etc/default/docker and add the following line: DOCKER_OPTS= \"--iptables=false\"","title":"Notes:"},{"location":"docker/tips/","text":"How to run a Cardano Node with Docker \u2693\ufe0e With this quick guide you will be able to run a cardano node in seconds and also have the powerfull Guild operator's scripts built-in . How to operate interactively within the container \u2693\ufe0e Once executed the container as a deamon with attached tty you are then able to enter the container by using the flag -dit . While if you have a hook within the container console, use the following command (change CN with your container name): docker exec -it CN bash This command will bring you within the container bash env ready to use the Guild tools. Docker flags explained \u2693\ufe0e \"docker build\" options explained: -t : option is to \"tag\" the image you can name the image as you prefer as long as you maintain the references between dockerfiles. \"docker run\" options explained: -d : for detach the container -i : interactive enabled -t : terminal session enabled -e : set an Env Variable -p : set exposed ports ( by default if not specified the ports will be reachable only internally ) --hostname : Container 's hostname --name : Container' s name Custom container with your own cfg \u2693\ufe0e docker run -itd -name Relay # Optional (recommended for quick access): set a name for your newly created container. -p 9000 :6000 # Optional: to expose the internal container's port (6000) to the host <IP> port 9000 -e NETWORK = mainnet # Mandatory: mainnet / testnet / staging / guild-mainnet / guild --security-opt = no-new-privileges # Option to prevent privilege escalations -v <YourNetPath>:/opt/cardano/cnode/sockets # Optional: useful to share the node socket with other containers -v <YourCfgPath>:/opt/cardano/cnode/priv # Optional: if used has to contain all the configuration files needed to run a node -v <YourDBbk>:/opt/cardano/cnode/db # Optional: if not set a fresh DB will be downloaded from scratch cardanocommunity/cardano-node:latest # Mandatory: image to run Note To be able to use the CNTools encryption key feature you need to manually change in \"cntools.config\" ENABLE_CHATTR to \"true\" and not use the --security-opt=no-new-privileges docker run option. Docker CLI managment \u2693\ufe0e Official \u2693\ufe0e docker inspect docker ps docker ls docker stop Un-Official Docker managment cli tool \u2693\ufe0e Lazydocker","title":"Tips"},{"location":"docker/tips/#how-to-run-a-cardano-node-with-docker","text":"With this quick guide you will be able to run a cardano node in seconds and also have the powerfull Guild operator's scripts built-in .","title":"How to run a Cardano Node with Docker"},{"location":"docker/tips/#how-to-operate-interactively-within-the-container","text":"Once executed the container as a deamon with attached tty you are then able to enter the container by using the flag -dit . While if you have a hook within the container console, use the following command (change CN with your container name): docker exec -it CN bash This command will bring you within the container bash env ready to use the Guild tools.","title":"How to operate interactively within the container"},{"location":"docker/tips/#docker-flags-explained","text":"\"docker build\" options explained: -t : option is to \"tag\" the image you can name the image as you prefer as long as you maintain the references between dockerfiles. \"docker run\" options explained: -d : for detach the container -i : interactive enabled -t : terminal session enabled -e : set an Env Variable -p : set exposed ports ( by default if not specified the ports will be reachable only internally ) --hostname : Container 's hostname --name : Container' s name","title":"Docker flags explained"},{"location":"docker/tips/#custom-container-with-your-own-cfg","text":"docker run -itd -name Relay # Optional (recommended for quick access): set a name for your newly created container. -p 9000 :6000 # Optional: to expose the internal container's port (6000) to the host <IP> port 9000 -e NETWORK = mainnet # Mandatory: mainnet / testnet / staging / guild-mainnet / guild --security-opt = no-new-privileges # Option to prevent privilege escalations -v <YourNetPath>:/opt/cardano/cnode/sockets # Optional: useful to share the node socket with other containers -v <YourCfgPath>:/opt/cardano/cnode/priv # Optional: if used has to contain all the configuration files needed to run a node -v <YourDBbk>:/opt/cardano/cnode/db # Optional: if not set a fresh DB will be downloaded from scratch cardanocommunity/cardano-node:latest # Mandatory: image to run Note To be able to use the CNTools encryption key feature you need to manually change in \"cntools.config\" ENABLE_CHATTR to \"true\" and not use the --security-opt=no-new-privileges docker run option.","title":"Custom container with your own cfg"},{"location":"docker/tips/#docker-cli-managment","text":"","title":"Docker CLI managment"},{"location":"docker/tips/#official","text":"docker inspect docker ps docker ls docker stop","title":"Official"},{"location":"docker/tips/#un-official-docker-managment-cli-tool","text":"Lazydocker","title":"Un-Official Docker managment cli tool"},{"location":"pgrest-meetings/02Jul2021/","text":"2 nd Meeting \u2693\ufe0e Thank you all for joining and working on the project I will try to provide a short summary of the 2 nd guild pgREST meeting (held on 02/07/2021 - 07:00 UTC ), both for logging purposes and for those who were not able to attend. Participants: \u2693\ufe0e Homer Ola Markus Priyank Damjan After the initial stand-up updates from participants, we went through the entire Trello board, updating/deleting existing tickets and creating some new ones. Deployment scripts \u2693\ufe0e During the last week, work has been done on deployment scripts for all services (db-sync, pgREST and haproxy) -> this is now in testing with updated instructions on trello . Everybody can put their name down on the ticket to signify when the setup is complete and note down any comments for bugs/improvements. This is the main priority at the moment as it would allow us to start transferring our setups to mainnet. Switch to Mainnet \u2693\ufe0e Following on from that, we created a ticket for starting to set up mainnet instances -> we can use 32GB RAM to start and increase later. While making sure everything works against the guild network is priority, people are free to start on this as well as we anticipate we are almost ready for the switch. Supported Networks \u2693\ufe0e This brings me to another discussion point which is on which networks are to be supported. After some discussion, it was agreed to keep beefy servers for mainnet, and have small independent instances for testnet maintained by those interested, while guild instance is pretty lightweight and useful to keep. Monitoring System \u2693\ufe0e The ticket for creating a centralised monitoring system was discussed and updated. I would say it would be good to have at least a basic version of the system in place around the time we switch to mainnet. The system could eventually serve for: - analysis of instance - performances and subsequent tuning - endpoints usage - anticipation of system requirements increases - etc. I would say that this should be an important topic of the next meeting to come up with an approach on how we will structure this system so that we can start building it in time for mainnet switch. Handling SSL \u2693\ufe0e Enabling SSL was agreed to not be required by each instance, but is optional and documentation should be created for how to automate the process of renewing SSL certificates for those wishing to add it to their instance. The end user facing endpoints \"Instance Checker\" will of course be SSL-enabled. Next meeting \u2693\ufe0e We somewhat agreed to another meeting next week again at the same time, but some participants aren't 100% for availability. Friday at 07:00 UTC might be a good standard time we hold on to, but I will make a poll like last time so that we can get more info before confirming the meeting.","title":"PGRest meetings 2"},{"location":"pgrest-meetings/02Jul2021/#2nd-meeting","text":"Thank you all for joining and working on the project I will try to provide a short summary of the 2 nd guild pgREST meeting (held on 02/07/2021 - 07:00 UTC ), both for logging purposes and for those who were not able to attend.","title":"2nd Meeting"},{"location":"pgrest-meetings/02Jul2021/#participants","text":"Homer Ola Markus Priyank Damjan After the initial stand-up updates from participants, we went through the entire Trello board, updating/deleting existing tickets and creating some new ones.","title":"Participants:"},{"location":"pgrest-meetings/02Jul2021/#deployment-scripts","text":"During the last week, work has been done on deployment scripts for all services (db-sync, pgREST and haproxy) -> this is now in testing with updated instructions on trello . Everybody can put their name down on the ticket to signify when the setup is complete and note down any comments for bugs/improvements. This is the main priority at the moment as it would allow us to start transferring our setups to mainnet.","title":"Deployment scripts"},{"location":"pgrest-meetings/02Jul2021/#switch-to-mainnet","text":"Following on from that, we created a ticket for starting to set up mainnet instances -> we can use 32GB RAM to start and increase later. While making sure everything works against the guild network is priority, people are free to start on this as well as we anticipate we are almost ready for the switch.","title":"Switch to Mainnet"},{"location":"pgrest-meetings/02Jul2021/#supported-networks","text":"This brings me to another discussion point which is on which networks are to be supported. After some discussion, it was agreed to keep beefy servers for mainnet, and have small independent instances for testnet maintained by those interested, while guild instance is pretty lightweight and useful to keep.","title":"Supported Networks"},{"location":"pgrest-meetings/02Jul2021/#monitoring-system","text":"The ticket for creating a centralised monitoring system was discussed and updated. I would say it would be good to have at least a basic version of the system in place around the time we switch to mainnet. The system could eventually serve for: - analysis of instance - performances and subsequent tuning - endpoints usage - anticipation of system requirements increases - etc. I would say that this should be an important topic of the next meeting to come up with an approach on how we will structure this system so that we can start building it in time for mainnet switch.","title":"Monitoring System"},{"location":"pgrest-meetings/02Jul2021/#handling-ssl","text":"Enabling SSL was agreed to not be required by each instance, but is optional and documentation should be created for how to automate the process of renewing SSL certificates for those wishing to add it to their instance. The end user facing endpoints \"Instance Checker\" will of course be SSL-enabled.","title":"Handling SSL"},{"location":"pgrest-meetings/02Jul2021/#next-meeting","text":"We somewhat agreed to another meeting next week again at the same time, but some participants aren't 100% for availability. Friday at 07:00 UTC might be a good standard time we hold on to, but I will make a poll like last time so that we can get more info before confirming the meeting.","title":"Next meeting"},{"location":"pgrest-meetings/25Jun2021/","text":"1 st Meeting \u2693\ufe0e Thank you all for joining and working on the project I will try to provide a short summary of the 1 st guild pgREST meeting (held at 25/06/2021 - 07:00 UTC ), both for logging purposes and for those who were not able to attend. Participants: \u2693\ufe0e Homer Ola Markus Priyank Damjan Meeting Structure \u2693\ufe0e As this was the first meeting, at the start we discussed about the meeting structure. In general, we agreed to something like listed below, but this can definitely change in the future: 1) 2-liner (60s) round the table stand-ups by everyone to sync up on what they were doing / are planning to do / mention struggles etc. This itself often sparks discussions 2) going through the Trello board tasks with the intention of discussing and possbily assigning them to individuals / smaller groups (maybe 1-2-3 people choose to work together on a single task) Stand-ups \u2693\ufe0e We then proceeded to give a status of where we are individually in terms of what's been done, a summary below: - Homer, Ola, Markus, Priyank and Damjan have all set up their dbsync + pgrest endpoints against guild network and added to topology. - Ola laid down the groundwork for CNTools to integrate with API endpoints created so far. - Markus has created the systemd scripts and will add them soon to repo - Damjan is tracking live stake query that includes payment + stake address, but is awaiting fix on dbsync for pool refund (contextual reserves -> account) , also need to validate reserve -> MIR certs - Priyank created initial haproxy settings for polls done, need to complete agent based on design finalisation Main discussion points \u2693\ufe0e Directory structure on the repo -> General agreement is to have anything related to db-sync/postgREST separated from the current cnode-helper-scripts directory. We can finalise the end locations of files a bit later, for now intent should be to simply add them all to /files/dbsync folder. prereqs.sh addendum can be done once artifacts are finalised (added a Trello ticket for tracking). DNS/haproxy configurations: We have two options: a. controlled approach for endpoints - wherein there is a layer of haproxy that will load balance and ensure tip being in sync for individual providers (individuals can provide haproxy OR pgrest instances). b. completely decentralised - each client to maintain haproxy endpoint, and fails over to other node if its not up to recent tip. I think that in general, it was agreed to use a hybrid approach. Details are captured in diagram here . DNS endpoint can be reserved post initial testing of haproxy-agent against mainnet nodes. Internal monitoring system This would be important and useful and has not been mentioned before this meeting (as far as I know). Basically, a system for monitoring all of our instances together and also handling alerts. Not only for ensuring good quality of service, but also for logging and inspection of short- and long-term trends to better understand what's happening. A ticket is added to trello board Next meeting \u2693\ufe0e All in all, I think we saw that there is need for these meetings as there are a lot of things to discuss and new ideas come up (like the monitoring system). We went for over an hour (~1h15min) and still didn't have enough time to go through the board, we basically only touched the DNS/haproxy part of the board. This tells me that we are in a stage where more frequent meetings are required, weekly instead of biweekly, as we are in the initial stage and it's important to build things right from the start rather than having to refactor later on. With that, the participants in general agreed to another meeting next week, but this will be confirmed in the TG chat and the times can be discussed then.","title":"PGRest meetings 1"},{"location":"pgrest-meetings/25Jun2021/#1st-meeting","text":"Thank you all for joining and working on the project I will try to provide a short summary of the 1 st guild pgREST meeting (held at 25/06/2021 - 07:00 UTC ), both for logging purposes and for those who were not able to attend.","title":"1st Meeting"},{"location":"pgrest-meetings/25Jun2021/#participants","text":"Homer Ola Markus Priyank Damjan","title":"Participants:"},{"location":"pgrest-meetings/25Jun2021/#meeting-structure","text":"As this was the first meeting, at the start we discussed about the meeting structure. In general, we agreed to something like listed below, but this can definitely change in the future: 1) 2-liner (60s) round the table stand-ups by everyone to sync up on what they were doing / are planning to do / mention struggles etc. This itself often sparks discussions 2) going through the Trello board tasks with the intention of discussing and possbily assigning them to individuals / smaller groups (maybe 1-2-3 people choose to work together on a single task)","title":"Meeting Structure"},{"location":"pgrest-meetings/25Jun2021/#stand-ups","text":"We then proceeded to give a status of where we are individually in terms of what's been done, a summary below: - Homer, Ola, Markus, Priyank and Damjan have all set up their dbsync + pgrest endpoints against guild network and added to topology. - Ola laid down the groundwork for CNTools to integrate with API endpoints created so far. - Markus has created the systemd scripts and will add them soon to repo - Damjan is tracking live stake query that includes payment + stake address, but is awaiting fix on dbsync for pool refund (contextual reserves -> account) , also need to validate reserve -> MIR certs - Priyank created initial haproxy settings for polls done, need to complete agent based on design finalisation","title":"Stand-ups"},{"location":"pgrest-meetings/25Jun2021/#main-discussion-points","text":"Directory structure on the repo -> General agreement is to have anything related to db-sync/postgREST separated from the current cnode-helper-scripts directory. We can finalise the end locations of files a bit later, for now intent should be to simply add them all to /files/dbsync folder. prereqs.sh addendum can be done once artifacts are finalised (added a Trello ticket for tracking). DNS/haproxy configurations: We have two options: a. controlled approach for endpoints - wherein there is a layer of haproxy that will load balance and ensure tip being in sync for individual providers (individuals can provide haproxy OR pgrest instances). b. completely decentralised - each client to maintain haproxy endpoint, and fails over to other node if its not up to recent tip. I think that in general, it was agreed to use a hybrid approach. Details are captured in diagram here . DNS endpoint can be reserved post initial testing of haproxy-agent against mainnet nodes. Internal monitoring system This would be important and useful and has not been mentioned before this meeting (as far as I know). Basically, a system for monitoring all of our instances together and also handling alerts. Not only for ensuring good quality of service, but also for logging and inspection of short- and long-term trends to better understand what's happening. A ticket is added to trello board","title":"Main discussion points"},{"location":"pgrest-meetings/25Jun2021/#next-meeting","text":"All in all, I think we saw that there is need for these meetings as there are a lot of things to discuss and new ideas come up (like the monitoring system). We went for over an hour (~1h15min) and still didn't have enough time to go through the board, we basically only touched the DNS/haproxy part of the board. This tells me that we are in a stage where more frequent meetings are required, weekly instead of biweekly, as we are in the initial stage and it's important to build things right from the start rather than having to refactor later on. With that, the participants in general agreed to another meeting next week, but this will be confirmed in the TG chat and the times can be discussed then.","title":"Next meeting"}]}